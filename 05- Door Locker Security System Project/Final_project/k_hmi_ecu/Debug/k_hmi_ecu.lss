
k_hmi_ecu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  00002c32  00002cc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080012e  0080012e  00002d94  2**0
                  ALLOC
  3 .stab         00002808  00000000  00000000  00002d94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001089  00000000  00000000  0000559c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006625  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006765  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000068d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000851e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009409  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a1b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a318  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a5a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ad73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 32       	cpi	r26, 0x2E	; 46
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e2       	ldi	r26, 0x2E	; 46
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 32       	cpi	r26, 0x2F	; 47
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9b 15 	jmp	0x2b36	; 0x2b36 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e2       	ldi	r26, 0x20	; 32
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9b 15 	jmp	0x2b36	; 0x2b36 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e2       	ldi	r24, 0x20	; 32
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void setPassword(uint8 *password);
void sendPassword(uint8 *password);
void changePassword(uint8 *password);
void openDoor(uint8 *password);
int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	69 97       	sbiw	r28, 0x19	; 25
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	volatile uint8 pass1 [12];
	UART_Configuration hmi_conf = {DISABLE,STOP1_BIT,BITS_8,9600};
     b5a:	9e 01       	movw	r18, r28
     b5c:	22 5f       	subi	r18, 0xF2	; 242
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
     b60:	3e 8b       	std	Y+22, r19	; 0x16
     b62:	2d 8b       	std	Y+21, r18	; 0x15
     b64:	88 e2       	ldi	r24, 0x28	; 40
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	98 8f       	std	Y+24, r25	; 0x18
     b6a:	8f 8b       	std	Y+23, r24	; 0x17
     b6c:	95 e0       	ldi	r25, 0x05	; 5
     b6e:	99 8f       	std	Y+25, r25	; 0x19
     b70:	ef 89       	ldd	r30, Y+23	; 0x17
     b72:	f8 8d       	ldd	r31, Y+24	; 0x18
     b74:	00 80       	ld	r0, Z
     b76:	2f 89       	ldd	r18, Y+23	; 0x17
     b78:	38 8d       	ldd	r19, Y+24	; 0x18
     b7a:	2f 5f       	subi	r18, 0xFF	; 255
     b7c:	3f 4f       	sbci	r19, 0xFF	; 255
     b7e:	38 8f       	std	Y+24, r19	; 0x18
     b80:	2f 8b       	std	Y+23, r18	; 0x17
     b82:	ed 89       	ldd	r30, Y+21	; 0x15
     b84:	fe 89       	ldd	r31, Y+22	; 0x16
     b86:	00 82       	st	Z, r0
     b88:	2d 89       	ldd	r18, Y+21	; 0x15
     b8a:	3e 89       	ldd	r19, Y+22	; 0x16
     b8c:	2f 5f       	subi	r18, 0xFF	; 255
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	3e 8b       	std	Y+22, r19	; 0x16
     b92:	2d 8b       	std	Y+21, r18	; 0x15
     b94:	39 8d       	ldd	r19, Y+25	; 0x19
     b96:	31 50       	subi	r19, 0x01	; 1
     b98:	39 8f       	std	Y+25, r19	; 0x19
     b9a:	89 8d       	ldd	r24, Y+25	; 0x19
     b9c:	88 23       	and	r24, r24
     b9e:	41 f7       	brne	.-48     	; 0xb70 <main+0x2a>
	UART_init(8000000, &hmi_conf);
     ba0:	9e 01       	movw	r18, r28
     ba2:	22 5f       	subi	r18, 0xF2	; 242
     ba4:	3f 4f       	sbci	r19, 0xFF	; 255
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	72 e1       	ldi	r23, 0x12	; 18
     baa:	8a e7       	ldi	r24, 0x7A	; 122
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a9 01       	movw	r20, r18
     bb0:	0e 94 4d 14 	call	0x289a	; 0x289a <UART_init>
	uint8 key;
	LCD_init();
     bb4:	0e 94 c4 0b 	call	0x1788	; 0x1788 <LCD_init>
	while(UART_recieveByte() != CONTROL_ECU_READY){}
     bb8:	0e 94 fe 14 	call	0x29fc	; 0x29fc <UART_recieveByte>
     bbc:	80 3f       	cpi	r24, 0xF0	; 240
     bbe:	e1 f7       	brne	.-8      	; 0xbb8 <main+0x72>
	setPassword(pass1);
     bc0:	ce 01       	movw	r24, r28
     bc2:	02 96       	adiw	r24, 0x02	; 2
     bc4:	0e 94 4e 09 	call	0x129c	; 0x129c <setPassword>
	while(1)
	{
		/*Display the default message on the LCD*/
		LCD_displayString("+ : Open Door");
     bc8:	80 e6       	ldi	r24, 0x60	; 96
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
		LCD_moveCursor(1,0);
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_moveCursor>
		LCD_displayString("- : Change Pass");
     bd8:	8e e6       	ldi	r24, 0x6E	; 110
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
		/*Wait the user to choose if he want to open the door or change the password*/
		key=KEYPAD_getPressedKey();
     be0:	0e 94 b5 0a 	call	0x156a	; 0x156a <KEYPAD_getPressedKey>
     be4:	89 83       	std	Y+1, r24	; 0x01
		switch(key){
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	e8 2f       	mov	r30, r24
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	fc 8b       	std	Y+20, r31	; 0x14
     bee:	eb 8b       	std	Y+19, r30	; 0x13
     bf0:	2b 89       	ldd	r18, Y+19	; 0x13
     bf2:	3c 89       	ldd	r19, Y+20	; 0x14
     bf4:	2b 32       	cpi	r18, 0x2B	; 43
     bf6:	31 05       	cpc	r19, r1
     bf8:	69 f0       	breq	.+26     	; 0xc14 <main+0xce>
     bfa:	8b 89       	ldd	r24, Y+19	; 0x13
     bfc:	9c 89       	ldd	r25, Y+20	; 0x14
     bfe:	8d 32       	cpi	r24, 0x2D	; 45
     c00:	91 05       	cpc	r25, r1
     c02:	11 f7       	brne	.-60     	; 0xbc8 <main+0x82>
		case '-':
			UART_sendByte(CHANGE);
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	0e 94 e7 14 	call	0x29ce	; 0x29ce <UART_sendByte>
			changePassword(pass1);
     c0a:	ce 01       	movw	r24, r28
     c0c:	02 96       	adiw	r24, 0x02	; 2
     c0e:	0e 94 12 06 	call	0xc24	; 0xc24 <changePassword>
     c12:	da cf       	rjmp	.-76     	; 0xbc8 <main+0x82>
			break;
		case '+':
			UART_sendByte(OPEN);
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	0e 94 e7 14 	call	0x29ce	; 0x29ce <UART_sendByte>
			openDoor(pass1);
     c1a:	ce 01       	movw	r24, r28
     c1c:	02 96       	adiw	r24, 0x02	; 2
     c1e:	0e 94 f6 06 	call	0xdec	; 0xdec <openDoor>
     c22:	d2 cf       	rjmp	.-92     	; 0xbc8 <main+0x82>

00000c24 <changePassword>:
	return 0;
}



void changePassword(uint8 *password){
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	61 97       	sbiw	r28, 0x11	; 17
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	de bf       	out	0x3e, r29	; 62
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	cd bf       	out	0x3d, r28	; 61
     c38:	99 8b       	std	Y+17, r25	; 0x11
     c3a:	88 8b       	std	Y+16, r24	; 0x10
	uint8 n=0;
     c3c:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_sendCommand(LCD_CLEAR_COMMAND);
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
	LCD_displayString("Enter Old Pass:");
     c44:	8e e7       	ldi	r24, 0x7E	; 126
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
	LCD_moveCursor(1,0);
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_moveCursor>
	getPassword(password);
     c54:	88 89       	ldd	r24, Y+16	; 0x10
     c56:	99 89       	ldd	r25, Y+17	; 0x11
     c58:	0e 94 f6 07 	call	0xfec	; 0xfec <getPassword>
	sendPassword(password);
     c5c:	88 89       	ldd	r24, Y+16	; 0x10
     c5e:	99 89       	ldd	r25, Y+17	; 0x11
     c60:	0e 94 1a 09 	call	0x1234	; 0x1234 <sendPassword>
	g_matchingCheck=UART_recieveByte();
     c64:	0e 94 fe 14 	call	0x29fc	; 0x29fc <UART_recieveByte>
     c68:	80 93 2e 01 	sts	0x012E, r24
     c6c:	93 c0       	rjmp	.+294    	; 0xd94 <changePassword+0x170>
	while(((g_matchingCheck==UNMATCHED) && (n<2))){
		n++;
     c6e:	8f 85       	ldd	r24, Y+15	; 0x0f
     c70:	8f 5f       	subi	r24, 0xFF	; 255
     c72:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_sendCommand(LCD_CLEAR_COMMAND);
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
		LCD_displayString("Wrong Password");
     c7a:	8e e8       	ldi	r24, 0x8E	; 142
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	a8 e4       	ldi	r26, 0x48	; 72
     c88:	b3 e4       	ldi	r27, 0x43	; 67
     c8a:	8b 87       	std	Y+11, r24	; 0x0b
     c8c:	9c 87       	std	Y+12, r25	; 0x0c
     c8e:	ad 87       	std	Y+13, r26	; 0x0d
     c90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c92:	6b 85       	ldd	r22, Y+11	; 0x0b
     c94:	7c 85       	ldd	r23, Y+12	; 0x0c
     c96:	8d 85       	ldd	r24, Y+13	; 0x0d
     c98:	9e 85       	ldd	r25, Y+14	; 0x0e
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	4a ef       	ldi	r20, 0xFA	; 250
     ca0:	54 e4       	ldi	r21, 0x44	; 68
     ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	8f 83       	std	Y+7, r24	; 0x07
     cac:	98 87       	std	Y+8, r25	; 0x08
     cae:	a9 87       	std	Y+9, r26	; 0x09
     cb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cb2:	6f 81       	ldd	r22, Y+7	; 0x07
     cb4:	78 85       	ldd	r23, Y+8	; 0x08
     cb6:	89 85       	ldd	r24, Y+9	; 0x09
     cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e8       	ldi	r20, 0x80	; 128
     cc0:	5f e3       	ldi	r21, 0x3F	; 63
     cc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cc6:	88 23       	and	r24, r24
     cc8:	2c f4       	brge	.+10     	; 0xcd4 <changePassword+0xb0>
		__ticks = 1;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	9e 83       	std	Y+6, r25	; 0x06
     cd0:	8d 83       	std	Y+5, r24	; 0x05
     cd2:	3f c0       	rjmp	.+126    	; 0xd52 <changePassword+0x12e>
	else if (__tmp > 65535)
     cd4:	6f 81       	ldd	r22, Y+7	; 0x07
     cd6:	78 85       	ldd	r23, Y+8	; 0x08
     cd8:	89 85       	ldd	r24, Y+9	; 0x09
     cda:	9a 85       	ldd	r25, Y+10	; 0x0a
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	3f ef       	ldi	r19, 0xFF	; 255
     ce0:	4f e7       	ldi	r20, 0x7F	; 127
     ce2:	57 e4       	ldi	r21, 0x47	; 71
     ce4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ce8:	18 16       	cp	r1, r24
     cea:	4c f5       	brge	.+82     	; 0xd3e <changePassword+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cec:	6b 85       	ldd	r22, Y+11	; 0x0b
     cee:	7c 85       	ldd	r23, Y+12	; 0x0c
     cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	40 e2       	ldi	r20, 0x20	; 32
     cfa:	51 e4       	ldi	r21, 0x41	; 65
     cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d00:	dc 01       	movw	r26, r24
     d02:	cb 01       	movw	r24, r22
     d04:	bc 01       	movw	r22, r24
     d06:	cd 01       	movw	r24, r26
     d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d0c:	dc 01       	movw	r26, r24
     d0e:	cb 01       	movw	r24, r22
     d10:	9e 83       	std	Y+6, r25	; 0x06
     d12:	8d 83       	std	Y+5, r24	; 0x05
     d14:	0f c0       	rjmp	.+30     	; 0xd34 <changePassword+0x110>
     d16:	88 ec       	ldi	r24, 0xC8	; 200
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	9c 83       	std	Y+4, r25	; 0x04
     d1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	9c 81       	ldd	r25, Y+4	; 0x04
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	f1 f7       	brne	.-4      	; 0xd22 <changePassword+0xfe>
     d26:	9c 83       	std	Y+4, r25	; 0x04
     d28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d2a:	8d 81       	ldd	r24, Y+5	; 0x05
     d2c:	9e 81       	ldd	r25, Y+6	; 0x06
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	9e 83       	std	Y+6, r25	; 0x06
     d32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d34:	8d 81       	ldd	r24, Y+5	; 0x05
     d36:	9e 81       	ldd	r25, Y+6	; 0x06
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	69 f7       	brne	.-38     	; 0xd16 <changePassword+0xf2>
     d3c:	14 c0       	rjmp	.+40     	; 0xd66 <changePassword+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d3e:	6f 81       	ldd	r22, Y+7	; 0x07
     d40:	78 85       	ldd	r23, Y+8	; 0x08
     d42:	89 85       	ldd	r24, Y+9	; 0x09
     d44:	9a 85       	ldd	r25, Y+10	; 0x0a
     d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	9e 83       	std	Y+6, r25	; 0x06
     d50:	8d 83       	std	Y+5, r24	; 0x05
     d52:	8d 81       	ldd	r24, Y+5	; 0x05
     d54:	9e 81       	ldd	r25, Y+6	; 0x06
     d56:	9a 83       	std	Y+2, r25	; 0x02
     d58:	89 83       	std	Y+1, r24	; 0x01
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	9a 81       	ldd	r25, Y+2	; 0x02
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <changePassword+0x13a>
     d62:	9a 83       	std	Y+2, r25	; 0x02
     d64:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		LCD_sendCommand(LCD_CLEAR_COMMAND);
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
		LCD_displayString("Enter Old Pass:");
     d6c:	8e e7       	ldi	r24, 0x7E	; 126
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
		LCD_moveCursor(1,0);
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_moveCursor>
		getPassword(password);
     d7c:	88 89       	ldd	r24, Y+16	; 0x10
     d7e:	99 89       	ldd	r25, Y+17	; 0x11
     d80:	0e 94 f6 07 	call	0xfec	; 0xfec <getPassword>
		sendPassword(password);
     d84:	88 89       	ldd	r24, Y+16	; 0x10
     d86:	99 89       	ldd	r25, Y+17	; 0x11
     d88:	0e 94 1a 09 	call	0x1234	; 0x1234 <sendPassword>
		g_matchingCheck=UART_recieveByte();
     d8c:	0e 94 fe 14 	call	0x29fc	; 0x29fc <UART_recieveByte>
     d90:	80 93 2e 01 	sts	0x012E, r24
	LCD_displayString("Enter Old Pass:");
	LCD_moveCursor(1,0);
	getPassword(password);
	sendPassword(password);
	g_matchingCheck=UART_recieveByte();
	while(((g_matchingCheck==UNMATCHED) && (n<2))){
     d94:	80 91 2e 01 	lds	r24, 0x012E
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	21 f4       	brne	.+8      	; 0xda4 <changePassword+0x180>
     d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d9e:	82 30       	cpi	r24, 0x02	; 2
     da0:	08 f4       	brcc	.+2      	; 0xda4 <changePassword+0x180>
     da2:	65 cf       	rjmp	.-310    	; 0xc6e <changePassword+0x4a>
		LCD_moveCursor(1,0);
		getPassword(password);
		sendPassword(password);
		g_matchingCheck=UART_recieveByte();
	}
	if(n==2){
     da4:	8f 85       	ldd	r24, Y+15	; 0x0f
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	61 f4       	brne	.+24     	; 0xdc2 <changePassword+0x19e>
		LCD_sendCommand(LCD_CLEAR_COMMAND);
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
		LCD_displayString("Error !!!");
     db0:	8d e9       	ldi	r24, 0x9D	; 157
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
		while(UART_recieveByte()!=RESET){};
     db8:	0e 94 fe 14 	call	0x29fc	; 0x29fc <UART_recieveByte>
     dbc:	82 30       	cpi	r24, 0x02	; 2
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <changePassword+0x194>
     dc0:	0c c0       	rjmp	.+24     	; 0xdda <changePassword+0x1b6>
	}
	else if (g_matchingCheck==MATCHED){
     dc2:	80 91 2e 01 	lds	r24, 0x012E
     dc6:	82 30       	cpi	r24, 0x02	; 2
     dc8:	41 f4       	brne	.+16     	; 0xdda <changePassword+0x1b6>
		setPassword(password);
     dca:	88 89       	ldd	r24, Y+16	; 0x10
     dcc:	99 89       	ldd	r25, Y+17	; 0x11
     dce:	0e 94 4e 09 	call	0x129c	; 0x129c <setPassword>
		while(UART_recieveByte()!=DONE){};
     dd2:	0e 94 fe 14 	call	0x29fc	; 0x29fc <UART_recieveByte>
     dd6:	86 30       	cpi	r24, 0x06	; 6
     dd8:	e1 f7       	brne	.-8      	; 0xdd2 <changePassword+0x1ae>
	}
}
     dda:	61 96       	adiw	r28, 0x11	; 17
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <openDoor>:


void openDoor(uint8 *password){
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	61 97       	sbiw	r28, 0x11	; 17
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	99 8b       	std	Y+17, r25	; 0x11
     e02:	88 8b       	std	Y+16, r24	; 0x10
	uint8 n=0;
     e04:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_sendCommand(LCD_CLEAR_COMMAND);
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
	LCD_displayString("plz enter pass:");
     e0c:	87 ea       	ldi	r24, 0xA7	; 167
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
	LCD_moveCursor(1,0);
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_moveCursor>
	getPassword(password);
     e1c:	88 89       	ldd	r24, Y+16	; 0x10
     e1e:	99 89       	ldd	r25, Y+17	; 0x11
     e20:	0e 94 f6 07 	call	0xfec	; 0xfec <getPassword>
	sendPassword(password);
     e24:	88 89       	ldd	r24, Y+16	; 0x10
     e26:	99 89       	ldd	r25, Y+17	; 0x11
     e28:	0e 94 1a 09 	call	0x1234	; 0x1234 <sendPassword>
	g_matchingCheck= UART_recieveByte();
     e2c:	0e 94 fe 14 	call	0x29fc	; 0x29fc <UART_recieveByte>
     e30:	80 93 2e 01 	sts	0x012E, r24
     e34:	93 c0       	rjmp	.+294    	; 0xf5c <openDoor+0x170>
	while(((g_matchingCheck==UNMATCHED) && (n<2))){
		n++;
     e36:	8f 85       	ldd	r24, Y+15	; 0x0f
     e38:	8f 5f       	subi	r24, 0xFF	; 255
     e3a:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_sendCommand(LCD_CLEAR_COMMAND);
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
		LCD_displayString("Wrong Password");
     e42:	8e e8       	ldi	r24, 0x8E	; 142
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	a8 e4       	ldi	r26, 0x48	; 72
     e50:	b3 e4       	ldi	r27, 0x43	; 67
     e52:	8b 87       	std	Y+11, r24	; 0x0b
     e54:	9c 87       	std	Y+12, r25	; 0x0c
     e56:	ad 87       	std	Y+13, r26	; 0x0d
     e58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e5c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e5e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e60:	9e 85       	ldd	r25, Y+14	; 0x0e
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	4a ef       	ldi	r20, 0xFA	; 250
     e68:	54 e4       	ldi	r21, 0x44	; 68
     e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	8f 83       	std	Y+7, r24	; 0x07
     e74:	98 87       	std	Y+8, r25	; 0x08
     e76:	a9 87       	std	Y+9, r26	; 0x09
     e78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e7a:	6f 81       	ldd	r22, Y+7	; 0x07
     e7c:	78 85       	ldd	r23, Y+8	; 0x08
     e7e:	89 85       	ldd	r24, Y+9	; 0x09
     e80:	9a 85       	ldd	r25, Y+10	; 0x0a
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	40 e8       	ldi	r20, 0x80	; 128
     e88:	5f e3       	ldi	r21, 0x3F	; 63
     e8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e8e:	88 23       	and	r24, r24
     e90:	2c f4       	brge	.+10     	; 0xe9c <openDoor+0xb0>
		__ticks = 1;
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	9e 83       	std	Y+6, r25	; 0x06
     e98:	8d 83       	std	Y+5, r24	; 0x05
     e9a:	3f c0       	rjmp	.+126    	; 0xf1a <openDoor+0x12e>
	else if (__tmp > 65535)
     e9c:	6f 81       	ldd	r22, Y+7	; 0x07
     e9e:	78 85       	ldd	r23, Y+8	; 0x08
     ea0:	89 85       	ldd	r24, Y+9	; 0x09
     ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	3f ef       	ldi	r19, 0xFF	; 255
     ea8:	4f e7       	ldi	r20, 0x7F	; 127
     eaa:	57 e4       	ldi	r21, 0x47	; 71
     eac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eb0:	18 16       	cp	r1, r24
     eb2:	4c f5       	brge	.+82     	; 0xf06 <openDoor+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb4:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb6:	7c 85       	ldd	r23, Y+12	; 0x0c
     eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eba:	9e 85       	ldd	r25, Y+14	; 0x0e
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e2       	ldi	r20, 0x20	; 32
     ec2:	51 e4       	ldi	r21, 0x41	; 65
     ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	bc 01       	movw	r22, r24
     ece:	cd 01       	movw	r24, r26
     ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	9e 83       	std	Y+6, r25	; 0x06
     eda:	8d 83       	std	Y+5, r24	; 0x05
     edc:	0f c0       	rjmp	.+30     	; 0xefc <openDoor+0x110>
     ede:	88 ec       	ldi	r24, 0xC8	; 200
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	9c 83       	std	Y+4, r25	; 0x04
     ee4:	8b 83       	std	Y+3, r24	; 0x03
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	9c 81       	ldd	r25, Y+4	; 0x04
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	f1 f7       	brne	.-4      	; 0xeea <openDoor+0xfe>
     eee:	9c 83       	std	Y+4, r25	; 0x04
     ef0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef2:	8d 81       	ldd	r24, Y+5	; 0x05
     ef4:	9e 81       	ldd	r25, Y+6	; 0x06
     ef6:	01 97       	sbiw	r24, 0x01	; 1
     ef8:	9e 83       	std	Y+6, r25	; 0x06
     efa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     efc:	8d 81       	ldd	r24, Y+5	; 0x05
     efe:	9e 81       	ldd	r25, Y+6	; 0x06
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	69 f7       	brne	.-38     	; 0xede <openDoor+0xf2>
     f04:	14 c0       	rjmp	.+40     	; 0xf2e <openDoor+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f06:	6f 81       	ldd	r22, Y+7	; 0x07
     f08:	78 85       	ldd	r23, Y+8	; 0x08
     f0a:	89 85       	ldd	r24, Y+9	; 0x09
     f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	9e 83       	std	Y+6, r25	; 0x06
     f18:	8d 83       	std	Y+5, r24	; 0x05
     f1a:	8d 81       	ldd	r24, Y+5	; 0x05
     f1c:	9e 81       	ldd	r25, Y+6	; 0x06
     f1e:	9a 83       	std	Y+2, r25	; 0x02
     f20:	89 83       	std	Y+1, r24	; 0x01
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	9a 81       	ldd	r25, Y+2	; 0x02
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <openDoor+0x13a>
     f2a:	9a 83       	std	Y+2, r25	; 0x02
     f2c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		LCD_sendCommand(LCD_CLEAR_COMMAND);
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
		LCD_displayString("plz enter pass:");
     f34:	87 ea       	ldi	r24, 0xA7	; 167
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
		LCD_moveCursor(1,0);
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_moveCursor>
		getPassword(password);
     f44:	88 89       	ldd	r24, Y+16	; 0x10
     f46:	99 89       	ldd	r25, Y+17	; 0x11
     f48:	0e 94 f6 07 	call	0xfec	; 0xfec <getPassword>
		sendPassword(password);
     f4c:	88 89       	ldd	r24, Y+16	; 0x10
     f4e:	99 89       	ldd	r25, Y+17	; 0x11
     f50:	0e 94 1a 09 	call	0x1234	; 0x1234 <sendPassword>
		g_matchingCheck=UART_recieveByte();
     f54:	0e 94 fe 14 	call	0x29fc	; 0x29fc <UART_recieveByte>
     f58:	80 93 2e 01 	sts	0x012E, r24
	LCD_displayString("plz enter pass:");
	LCD_moveCursor(1,0);
	getPassword(password);
	sendPassword(password);
	g_matchingCheck= UART_recieveByte();
	while(((g_matchingCheck==UNMATCHED) && (n<2))){
     f5c:	80 91 2e 01 	lds	r24, 0x012E
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	21 f4       	brne	.+8      	; 0xf6c <openDoor+0x180>
     f64:	8f 85       	ldd	r24, Y+15	; 0x0f
     f66:	82 30       	cpi	r24, 0x02	; 2
     f68:	08 f4       	brcc	.+2      	; 0xf6c <openDoor+0x180>
     f6a:	65 cf       	rjmp	.-310    	; 0xe36 <openDoor+0x4a>
		LCD_moveCursor(1,0);
		getPassword(password);
		sendPassword(password);
		g_matchingCheck=UART_recieveByte();
	}
	if(n==2){
     f6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f6e:	82 30       	cpi	r24, 0x02	; 2
     f70:	61 f4       	brne	.+24     	; 0xf8a <openDoor+0x19e>
		LCD_sendCommand(LCD_CLEAR_COMMAND);
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
		LCD_displayString("Thief !!!");
     f78:	87 eb       	ldi	r24, 0xB7	; 183
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
		while(UART_recieveByte()!=RESET){};
     f80:	0e 94 fe 14 	call	0x29fc	; 0x29fc <UART_recieveByte>
     f84:	82 30       	cpi	r24, 0x02	; 2
     f86:	e1 f7       	brne	.-8      	; 0xf80 <openDoor+0x194>
     f88:	25 c0       	rjmp	.+74     	; 0xfd4 <openDoor+0x1e8>
	}
	else if (g_matchingCheck==MATCHED){
     f8a:	80 91 2e 01 	lds	r24, 0x012E
     f8e:	82 30       	cpi	r24, 0x02	; 2
     f90:	09 f5       	brne	.+66     	; 0xfd4 <openDoor+0x1e8>
		LCD_sendCommand(LCD_CLEAR_COMMAND);
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
		LCD_displayString("Door is opening");
     f98:	81 ec       	ldi	r24, 0xC1	; 193
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
		while(UART_recieveByte()!=OPENED){};
     fa0:	0e 94 fe 14 	call	0x29fc	; 0x29fc <UART_recieveByte>
     fa4:	83 30       	cpi	r24, 0x03	; 3
     fa6:	e1 f7       	brne	.-8      	; 0xfa0 <openDoor+0x1b4>
		LCD_sendCommand(LCD_CLEAR_COMMAND);
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
		LCD_displayString("Door is opened");
     fae:	81 ed       	ldi	r24, 0xD1	; 209
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
		while(UART_recieveByte()!=CLOSING){};
     fb6:	0e 94 fe 14 	call	0x29fc	; 0x29fc <UART_recieveByte>
     fba:	85 30       	cpi	r24, 0x05	; 5
     fbc:	e1 f7       	brne	.-8      	; 0xfb6 <openDoor+0x1ca>
		LCD_sendCommand(LCD_CLEAR_COMMAND);
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
		LCD_displayString("Door is closing");
     fc4:	80 ee       	ldi	r24, 0xE0	; 224
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
		while(UART_recieveByte()!=CLOSED){};
     fcc:	0e 94 fe 14 	call	0x29fc	; 0x29fc <UART_recieveByte>
     fd0:	84 30       	cpi	r24, 0x04	; 4
     fd2:	e1 f7       	brne	.-8      	; 0xfcc <openDoor+0x1e0>
	}
	LCD_sendCommand(LCD_CLEAR_COMMAND);
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
}
     fda:	61 96       	adiw	r28, 0x11	; 17
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <getPassword>:


void getPassword(uint8 * password){
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	a0 97       	sbiw	r28, 0x20	; 32
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	98 a3       	std	Y+32, r25	; 0x20
    1002:	8f 8f       	std	Y+31, r24	; 0x1f
	uint8 i=0,key;
    1004:	1e 8e       	std	Y+30, r1	; 0x1e
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a8 ec       	ldi	r26, 0xC8	; 200
    100c:	b2 e4       	ldi	r27, 0x42	; 66
    100e:	89 8f       	std	Y+25, r24	; 0x19
    1010:	9a 8f       	std	Y+26, r25	; 0x1a
    1012:	ab 8f       	std	Y+27, r26	; 0x1b
    1014:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1016:	69 8d       	ldd	r22, Y+25	; 0x19
    1018:	7a 8d       	ldd	r23, Y+26	; 0x1a
    101a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    101c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	4a ef       	ldi	r20, 0xFA	; 250
    1024:	54 e4       	ldi	r21, 0x44	; 68
    1026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    102a:	dc 01       	movw	r26, r24
    102c:	cb 01       	movw	r24, r22
    102e:	8d 8b       	std	Y+21, r24	; 0x15
    1030:	9e 8b       	std	Y+22, r25	; 0x16
    1032:	af 8b       	std	Y+23, r26	; 0x17
    1034:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1036:	6d 89       	ldd	r22, Y+21	; 0x15
    1038:	7e 89       	ldd	r23, Y+22	; 0x16
    103a:	8f 89       	ldd	r24, Y+23	; 0x17
    103c:	98 8d       	ldd	r25, Y+24	; 0x18
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e8       	ldi	r20, 0x80	; 128
    1044:	5f e3       	ldi	r21, 0x3F	; 63
    1046:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    104a:	88 23       	and	r24, r24
    104c:	2c f4       	brge	.+10     	; 0x1058 <getPassword+0x6c>
		__ticks = 1;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	9c 8b       	std	Y+20, r25	; 0x14
    1054:	8b 8b       	std	Y+19, r24	; 0x13
    1056:	3f c0       	rjmp	.+126    	; 0x10d6 <getPassword+0xea>
	else if (__tmp > 65535)
    1058:	6d 89       	ldd	r22, Y+21	; 0x15
    105a:	7e 89       	ldd	r23, Y+22	; 0x16
    105c:	8f 89       	ldd	r24, Y+23	; 0x17
    105e:	98 8d       	ldd	r25, Y+24	; 0x18
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	3f ef       	ldi	r19, 0xFF	; 255
    1064:	4f e7       	ldi	r20, 0x7F	; 127
    1066:	57 e4       	ldi	r21, 0x47	; 71
    1068:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    106c:	18 16       	cp	r1, r24
    106e:	4c f5       	brge	.+82     	; 0x10c2 <getPassword+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1070:	69 8d       	ldd	r22, Y+25	; 0x19
    1072:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1074:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1076:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	40 e2       	ldi	r20, 0x20	; 32
    107e:	51 e4       	ldi	r21, 0x41	; 65
    1080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	bc 01       	movw	r22, r24
    108a:	cd 01       	movw	r24, r26
    108c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	9c 8b       	std	Y+20, r25	; 0x14
    1096:	8b 8b       	std	Y+19, r24	; 0x13
    1098:	0f c0       	rjmp	.+30     	; 0x10b8 <getPassword+0xcc>
    109a:	88 ec       	ldi	r24, 0xC8	; 200
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	9a 8b       	std	Y+18, r25	; 0x12
    10a0:	89 8b       	std	Y+17, r24	; 0x11
    10a2:	89 89       	ldd	r24, Y+17	; 0x11
    10a4:	9a 89       	ldd	r25, Y+18	; 0x12
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <getPassword+0xba>
    10aa:	9a 8b       	std	Y+18, r25	; 0x12
    10ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ae:	8b 89       	ldd	r24, Y+19	; 0x13
    10b0:	9c 89       	ldd	r25, Y+20	; 0x14
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	9c 8b       	std	Y+20, r25	; 0x14
    10b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b8:	8b 89       	ldd	r24, Y+19	; 0x13
    10ba:	9c 89       	ldd	r25, Y+20	; 0x14
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	69 f7       	brne	.-38     	; 0x109a <getPassword+0xae>
    10c0:	14 c0       	rjmp	.+40     	; 0x10ea <getPassword+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10c2:	6d 89       	ldd	r22, Y+21	; 0x15
    10c4:	7e 89       	ldd	r23, Y+22	; 0x16
    10c6:	8f 89       	ldd	r24, Y+23	; 0x17
    10c8:	98 8d       	ldd	r25, Y+24	; 0x18
    10ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	9c 8b       	std	Y+20, r25	; 0x14
    10d4:	8b 8b       	std	Y+19, r24	; 0x13
    10d6:	8b 89       	ldd	r24, Y+19	; 0x13
    10d8:	9c 89       	ldd	r25, Y+20	; 0x14
    10da:	98 8b       	std	Y+16, r25	; 0x10
    10dc:	8f 87       	std	Y+15, r24	; 0x0f
    10de:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e0:	98 89       	ldd	r25, Y+16	; 0x10
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	f1 f7       	brne	.-4      	; 0x10e2 <getPassword+0xf6>
    10e6:	98 8b       	std	Y+16, r25	; 0x10
    10e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	key=KEYPAD_getPressedKey();
    10ea:	0e 94 b5 0a 	call	0x156a	; 0x156a <KEYPAD_getPressedKey>
    10ee:	8d 8f       	std	Y+29, r24	; 0x1d
    10f0:	8a c0       	rjmp	.+276    	; 0x1206 <getPassword+0x21a>
	while(key!=13){
		LCD_moveCursor(1,i);
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	6e 8d       	ldd	r22, Y+30	; 0x1e
    10f6:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_moveCursor>
		password[i]=key;
    10fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1102:	98 a1       	ldd	r25, Y+32	; 0x20
    1104:	fc 01       	movw	r30, r24
    1106:	e2 0f       	add	r30, r18
    1108:	f3 1f       	adc	r31, r19
    110a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    110c:	80 83       	st	Z, r24
		i++;
    110e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1110:	8f 5f       	subi	r24, 0xFF	; 255
    1112:	8e 8f       	std	Y+30, r24	; 0x1e
		//LCD_intgerToString(key);
		LCD_displayString("*");
    1114:	80 ef       	ldi	r24, 0xF0	; 240
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a8 ec       	ldi	r26, 0xC8	; 200
    1122:	b3 e4       	ldi	r27, 0x43	; 67
    1124:	8b 87       	std	Y+11, r24	; 0x0b
    1126:	9c 87       	std	Y+12, r25	; 0x0c
    1128:	ad 87       	std	Y+13, r26	; 0x0d
    112a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112c:	6b 85       	ldd	r22, Y+11	; 0x0b
    112e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1130:	8d 85       	ldd	r24, Y+13	; 0x0d
    1132:	9e 85       	ldd	r25, Y+14	; 0x0e
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	4a ef       	ldi	r20, 0xFA	; 250
    113a:	54 e4       	ldi	r21, 0x44	; 68
    113c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	8f 83       	std	Y+7, r24	; 0x07
    1146:	98 87       	std	Y+8, r25	; 0x08
    1148:	a9 87       	std	Y+9, r26	; 0x09
    114a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    114c:	6f 81       	ldd	r22, Y+7	; 0x07
    114e:	78 85       	ldd	r23, Y+8	; 0x08
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	9a 85       	ldd	r25, Y+10	; 0x0a
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e8       	ldi	r20, 0x80	; 128
    115a:	5f e3       	ldi	r21, 0x3F	; 63
    115c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1160:	88 23       	and	r24, r24
    1162:	2c f4       	brge	.+10     	; 0x116e <getPassword+0x182>
		__ticks = 1;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	9e 83       	std	Y+6, r25	; 0x06
    116a:	8d 83       	std	Y+5, r24	; 0x05
    116c:	3f c0       	rjmp	.+126    	; 0x11ec <getPassword+0x200>
	else if (__tmp > 65535)
    116e:	6f 81       	ldd	r22, Y+7	; 0x07
    1170:	78 85       	ldd	r23, Y+8	; 0x08
    1172:	89 85       	ldd	r24, Y+9	; 0x09
    1174:	9a 85       	ldd	r25, Y+10	; 0x0a
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	3f ef       	ldi	r19, 0xFF	; 255
    117a:	4f e7       	ldi	r20, 0x7F	; 127
    117c:	57 e4       	ldi	r21, 0x47	; 71
    117e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1182:	18 16       	cp	r1, r24
    1184:	4c f5       	brge	.+82     	; 0x11d8 <getPassword+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1186:	6b 85       	ldd	r22, Y+11	; 0x0b
    1188:	7c 85       	ldd	r23, Y+12	; 0x0c
    118a:	8d 85       	ldd	r24, Y+13	; 0x0d
    118c:	9e 85       	ldd	r25, Y+14	; 0x0e
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e2       	ldi	r20, 0x20	; 32
    1194:	51 e4       	ldi	r21, 0x41	; 65
    1196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	bc 01       	movw	r22, r24
    11a0:	cd 01       	movw	r24, r26
    11a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	8d 83       	std	Y+5, r24	; 0x05
    11ae:	0f c0       	rjmp	.+30     	; 0x11ce <getPassword+0x1e2>
    11b0:	88 ec       	ldi	r24, 0xC8	; 200
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	9c 83       	std	Y+4, r25	; 0x04
    11b6:	8b 83       	std	Y+3, r24	; 0x03
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	9c 81       	ldd	r25, Y+4	; 0x04
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <getPassword+0x1d0>
    11c0:	9c 83       	std	Y+4, r25	; 0x04
    11c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	9e 81       	ldd	r25, Y+6	; 0x06
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	9e 83       	std	Y+6, r25	; 0x06
    11cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ce:	8d 81       	ldd	r24, Y+5	; 0x05
    11d0:	9e 81       	ldd	r25, Y+6	; 0x06
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	69 f7       	brne	.-38     	; 0x11b0 <getPassword+0x1c4>
    11d6:	14 c0       	rjmp	.+40     	; 0x1200 <getPassword+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d8:	6f 81       	ldd	r22, Y+7	; 0x07
    11da:	78 85       	ldd	r23, Y+8	; 0x08
    11dc:	89 85       	ldd	r24, Y+9	; 0x09
    11de:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	9e 83       	std	Y+6, r25	; 0x06
    11ea:	8d 83       	std	Y+5, r24	; 0x05
    11ec:	8d 81       	ldd	r24, Y+5	; 0x05
    11ee:	9e 81       	ldd	r25, Y+6	; 0x06
    11f0:	9a 83       	std	Y+2, r25	; 0x02
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <getPassword+0x20c>
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(400);
		key=KEYPAD_getPressedKey();
    1200:	0e 94 b5 0a 	call	0x156a	; 0x156a <KEYPAD_getPressedKey>
    1204:	8d 8f       	std	Y+29, r24	; 0x1d

void getPassword(uint8 * password){
	uint8 i=0,key;
	_delay_ms(100);
	key=KEYPAD_getPressedKey();
	while(key!=13){
    1206:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1208:	8d 30       	cpi	r24, 0x0D	; 13
    120a:	09 f0       	breq	.+2      	; 0x120e <getPassword+0x222>
    120c:	72 cf       	rjmp	.-284    	; 0x10f2 <getPassword+0x106>
		//LCD_intgerToString(key);
		LCD_displayString("*");
		_delay_ms(400);
		key=KEYPAD_getPressedKey();
	}
	password[i]=key;
    120e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1216:	98 a1       	ldd	r25, Y+32	; 0x20
    1218:	fc 01       	movw	r30, r24
    121a:	e2 0f       	add	r30, r18
    121c:	f3 1f       	adc	r31, r19
    121e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1220:	80 83       	st	Z, r24
}
    1222:	a0 96       	adiw	r28, 0x20	; 32
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <sendPassword>:

void sendPassword(uint8 *password){
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	00 d0       	rcall	.+0      	; 0x123a <sendPassword+0x6>
    123a:	0f 92       	push	r0
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	9b 83       	std	Y+3, r25	; 0x03
    1242:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    1244:	19 82       	std	Y+1, r1	; 0x01
    1246:	0e c0       	rjmp	.+28     	; 0x1264 <sendPassword+0x30>
	while(password[i]!= 13){
		UART_sendByte(password[i]);
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	9b 81       	ldd	r25, Y+3	; 0x03
    1252:	fc 01       	movw	r30, r24
    1254:	e2 0f       	add	r30, r18
    1256:	f3 1f       	adc	r31, r19
    1258:	80 81       	ld	r24, Z
    125a:	0e 94 e7 14 	call	0x29ce	; 0x29ce <UART_sendByte>
		i++;
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	8f 5f       	subi	r24, 0xFF	; 255
    1262:	89 83       	std	Y+1, r24	; 0x01
	password[i]=key;
}

void sendPassword(uint8 *password){
	uint8 i=0;
	while(password[i]!= 13){
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	9b 81       	ldd	r25, Y+3	; 0x03
    126e:	fc 01       	movw	r30, r24
    1270:	e2 0f       	add	r30, r18
    1272:	f3 1f       	adc	r31, r19
    1274:	80 81       	ld	r24, Z
    1276:	8d 30       	cpi	r24, 0x0D	; 13
    1278:	39 f7       	brne	.-50     	; 0x1248 <sendPassword+0x14>
		UART_sendByte(password[i]);
		i++;
	}
	UART_sendByte(password[i]);
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	9b 81       	ldd	r25, Y+3	; 0x03
    1284:	fc 01       	movw	r30, r24
    1286:	e2 0f       	add	r30, r18
    1288:	f3 1f       	adc	r31, r19
    128a:	80 81       	ld	r24, Z
    128c:	0e 94 e7 14 	call	0x29ce	; 0x29ce <UART_sendByte>
}
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <setPassword>:

void setPassword(uint8 *password)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	6e 97       	sbiw	r28, 0x1e	; 30
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	9e 8f       	std	Y+30, r25	; 0x1e
    12b2:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
	LCD_displayString("plz enter pass:");
    12ba:	87 ea       	ldi	r24, 0xA7	; 167
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
	LCD_moveCursor(1,0);
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_moveCursor>
	getPassword(password);
    12ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12ce:	0e 94 f6 07 	call	0xfec	; 0xfec <getPassword>
	sendPassword(password);
    12d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12d6:	0e 94 1a 09 	call	0x1234	; 0x1234 <sendPassword>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
	LCD_displayString("plz re-enter ps:");
    12e0:	82 ef       	ldi	r24, 0xF2	; 242
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
	LCD_moveCursor(1,0);
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_moveCursor>
	getPassword(password);
    12f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12f4:	0e 94 f6 07 	call	0xfec	; 0xfec <getPassword>
	sendPassword(password);
    12f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12fc:	0e 94 1a 09 	call	0x1234	; 0x1234 <sendPassword>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
	g_matchingCheck=UART_recieveByte();
    1306:	0e 94 fe 14 	call	0x29fc	; 0x29fc <UART_recieveByte>
    130a:	80 93 2e 01 	sts	0x012E, r24
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
    1314:	a3 c0       	rjmp	.+326    	; 0x145c <setPassword+0x1c0>
	/*Check from the Control ECU if 2 entered password is matched or not*/
	while(g_matchingCheck==UNMATCHED){
		/*as long as the 2 entered password is not matched display error on LCD
		 * and repeat setting password for first time*/
		LCD_displayString("Error Try again");
    1316:	83 e0       	ldi	r24, 0x03	; 3
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	a8 e4       	ldi	r26, 0x48	; 72
    1324:	b3 e4       	ldi	r27, 0x43	; 67
    1326:	89 8f       	std	Y+25, r24	; 0x19
    1328:	9a 8f       	std	Y+26, r25	; 0x1a
    132a:	ab 8f       	std	Y+27, r26	; 0x1b
    132c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    132e:	69 8d       	ldd	r22, Y+25	; 0x19
    1330:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1332:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1334:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	4a ef       	ldi	r20, 0xFA	; 250
    133c:	54 e4       	ldi	r21, 0x44	; 68
    133e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	8d 8b       	std	Y+21, r24	; 0x15
    1348:	9e 8b       	std	Y+22, r25	; 0x16
    134a:	af 8b       	std	Y+23, r26	; 0x17
    134c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    134e:	6d 89       	ldd	r22, Y+21	; 0x15
    1350:	7e 89       	ldd	r23, Y+22	; 0x16
    1352:	8f 89       	ldd	r24, Y+23	; 0x17
    1354:	98 8d       	ldd	r25, Y+24	; 0x18
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	40 e8       	ldi	r20, 0x80	; 128
    135c:	5f e3       	ldi	r21, 0x3F	; 63
    135e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1362:	88 23       	and	r24, r24
    1364:	2c f4       	brge	.+10     	; 0x1370 <setPassword+0xd4>
		__ticks = 1;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	9c 8b       	std	Y+20, r25	; 0x14
    136c:	8b 8b       	std	Y+19, r24	; 0x13
    136e:	3f c0       	rjmp	.+126    	; 0x13ee <setPassword+0x152>
	else if (__tmp > 65535)
    1370:	6d 89       	ldd	r22, Y+21	; 0x15
    1372:	7e 89       	ldd	r23, Y+22	; 0x16
    1374:	8f 89       	ldd	r24, Y+23	; 0x17
    1376:	98 8d       	ldd	r25, Y+24	; 0x18
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	3f ef       	ldi	r19, 0xFF	; 255
    137c:	4f e7       	ldi	r20, 0x7F	; 127
    137e:	57 e4       	ldi	r21, 0x47	; 71
    1380:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1384:	18 16       	cp	r1, r24
    1386:	4c f5       	brge	.+82     	; 0x13da <setPassword+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1388:	69 8d       	ldd	r22, Y+25	; 0x19
    138a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    138c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    138e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	40 e2       	ldi	r20, 0x20	; 32
    1396:	51 e4       	ldi	r21, 0x41	; 65
    1398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	bc 01       	movw	r22, r24
    13a2:	cd 01       	movw	r24, r26
    13a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	9c 8b       	std	Y+20, r25	; 0x14
    13ae:	8b 8b       	std	Y+19, r24	; 0x13
    13b0:	0f c0       	rjmp	.+30     	; 0x13d0 <setPassword+0x134>
    13b2:	88 ec       	ldi	r24, 0xC8	; 200
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	9a 8b       	std	Y+18, r25	; 0x12
    13b8:	89 8b       	std	Y+17, r24	; 0x11
    13ba:	89 89       	ldd	r24, Y+17	; 0x11
    13bc:	9a 89       	ldd	r25, Y+18	; 0x12
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	f1 f7       	brne	.-4      	; 0x13be <setPassword+0x122>
    13c2:	9a 8b       	std	Y+18, r25	; 0x12
    13c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c6:	8b 89       	ldd	r24, Y+19	; 0x13
    13c8:	9c 89       	ldd	r25, Y+20	; 0x14
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	9c 8b       	std	Y+20, r25	; 0x14
    13ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d0:	8b 89       	ldd	r24, Y+19	; 0x13
    13d2:	9c 89       	ldd	r25, Y+20	; 0x14
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	69 f7       	brne	.-38     	; 0x13b2 <setPassword+0x116>
    13d8:	14 c0       	rjmp	.+40     	; 0x1402 <setPassword+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13da:	6d 89       	ldd	r22, Y+21	; 0x15
    13dc:	7e 89       	ldd	r23, Y+22	; 0x16
    13de:	8f 89       	ldd	r24, Y+23	; 0x17
    13e0:	98 8d       	ldd	r25, Y+24	; 0x18
    13e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	9c 8b       	std	Y+20, r25	; 0x14
    13ec:	8b 8b       	std	Y+19, r24	; 0x13
    13ee:	8b 89       	ldd	r24, Y+19	; 0x13
    13f0:	9c 89       	ldd	r25, Y+20	; 0x14
    13f2:	98 8b       	std	Y+16, r25	; 0x10
    13f4:	8f 87       	std	Y+15, r24	; 0x0f
    13f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f8:	98 89       	ldd	r25, Y+16	; 0x10
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <setPassword+0x15e>
    13fe:	98 8b       	std	Y+16, r25	; 0x10
    1400:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);  /*Displaying time for error message*/
		LCD_sendCommand(LCD_CLEAR_COMMAND);
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
		LCD_displayString("plz enter pass:");
    1408:	87 ea       	ldi	r24, 0xA7	; 167
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
		LCD_moveCursor(1,0);
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_moveCursor>
		getPassword(password);
    1418:	8d 8d       	ldd	r24, Y+29	; 0x1d
    141a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    141c:	0e 94 f6 07 	call	0xfec	; 0xfec <getPassword>
		sendPassword(password);
    1420:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1422:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1424:	0e 94 1a 09 	call	0x1234	; 0x1234 <sendPassword>
		LCD_sendCommand(LCD_CLEAR_COMMAND);
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
		LCD_displayString("plz re-enter ps:");
    142e:	82 ef       	ldi	r24, 0xF2	; 242
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
		LCD_moveCursor(1,0);
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_moveCursor>
		getPassword(password);
    143e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1440:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1442:	0e 94 f6 07 	call	0xfec	; 0xfec <getPassword>
		sendPassword(password);
    1446:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1448:	9e 8d       	ldd	r25, Y+30	; 0x1e
    144a:	0e 94 1a 09 	call	0x1234	; 0x1234 <sendPassword>
		g_matchingCheck=UART_recieveByte();
    144e:	0e 94 fe 14 	call	0x29fc	; 0x29fc <UART_recieveByte>
    1452:	80 93 2e 01 	sts	0x012E, r24
		LCD_sendCommand(LCD_CLEAR_COMMAND);	}
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
	sendPassword(password);
	LCD_sendCommand(LCD_CLEAR_COMMAND);
	g_matchingCheck=UART_recieveByte();
	LCD_sendCommand(LCD_CLEAR_COMMAND);
	/*Check from the Control ECU if 2 entered password is matched or not*/
	while(g_matchingCheck==UNMATCHED){
    145c:	80 91 2e 01 	lds	r24, 0x012E
    1460:	81 30       	cpi	r24, 0x01	; 1
    1462:	09 f4       	brne	.+2      	; 0x1466 <setPassword+0x1ca>
    1464:	58 cf       	rjmp	.-336    	; 0x1316 <setPassword+0x7a>
		getPassword(password);
		sendPassword(password);
		g_matchingCheck=UART_recieveByte();
		LCD_sendCommand(LCD_CLEAR_COMMAND);	}
	/*If the 2 entered passwords are matched display successful */
	LCD_displayString("Successful !");
    1466:	83 e1       	ldi	r24, 0x13	; 19
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	a6 e9       	ldi	r26, 0x96	; 150
    1474:	b3 e4       	ldi	r27, 0x43	; 67
    1476:	8b 87       	std	Y+11, r24	; 0x0b
    1478:	9c 87       	std	Y+12, r25	; 0x0c
    147a:	ad 87       	std	Y+13, r26	; 0x0d
    147c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    147e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1480:	7c 85       	ldd	r23, Y+12	; 0x0c
    1482:	8d 85       	ldd	r24, Y+13	; 0x0d
    1484:	9e 85       	ldd	r25, Y+14	; 0x0e
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	4a ef       	ldi	r20, 0xFA	; 250
    148c:	54 e4       	ldi	r21, 0x44	; 68
    148e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	8f 83       	std	Y+7, r24	; 0x07
    1498:	98 87       	std	Y+8, r25	; 0x08
    149a:	a9 87       	std	Y+9, r26	; 0x09
    149c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    149e:	6f 81       	ldd	r22, Y+7	; 0x07
    14a0:	78 85       	ldd	r23, Y+8	; 0x08
    14a2:	89 85       	ldd	r24, Y+9	; 0x09
    14a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	40 e8       	ldi	r20, 0x80	; 128
    14ac:	5f e3       	ldi	r21, 0x3F	; 63
    14ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b2:	88 23       	and	r24, r24
    14b4:	2c f4       	brge	.+10     	; 0x14c0 <setPassword+0x224>
		__ticks = 1;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	9e 83       	std	Y+6, r25	; 0x06
    14bc:	8d 83       	std	Y+5, r24	; 0x05
    14be:	3f c0       	rjmp	.+126    	; 0x153e <setPassword+0x2a2>
	else if (__tmp > 65535)
    14c0:	6f 81       	ldd	r22, Y+7	; 0x07
    14c2:	78 85       	ldd	r23, Y+8	; 0x08
    14c4:	89 85       	ldd	r24, Y+9	; 0x09
    14c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	3f ef       	ldi	r19, 0xFF	; 255
    14cc:	4f e7       	ldi	r20, 0x7F	; 127
    14ce:	57 e4       	ldi	r21, 0x47	; 71
    14d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d4:	18 16       	cp	r1, r24
    14d6:	4c f5       	brge	.+82     	; 0x152a <setPassword+0x28e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14da:	7c 85       	ldd	r23, Y+12	; 0x0c
    14dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    14de:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 e2       	ldi	r20, 0x20	; 32
    14e6:	51 e4       	ldi	r21, 0x41	; 65
    14e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	bc 01       	movw	r22, r24
    14f2:	cd 01       	movw	r24, r26
    14f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	9e 83       	std	Y+6, r25	; 0x06
    14fe:	8d 83       	std	Y+5, r24	; 0x05
    1500:	0f c0       	rjmp	.+30     	; 0x1520 <setPassword+0x284>
    1502:	88 ec       	ldi	r24, 0xC8	; 200
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	9c 83       	std	Y+4, r25	; 0x04
    1508:	8b 83       	std	Y+3, r24	; 0x03
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	9c 81       	ldd	r25, Y+4	; 0x04
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	f1 f7       	brne	.-4      	; 0x150e <setPassword+0x272>
    1512:	9c 83       	std	Y+4, r25	; 0x04
    1514:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	9e 81       	ldd	r25, Y+6	; 0x06
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	9e 83       	std	Y+6, r25	; 0x06
    151e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	69 f7       	brne	.-38     	; 0x1502 <setPassword+0x266>
    1528:	14 c0       	rjmp	.+40     	; 0x1552 <setPassword+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152a:	6f 81       	ldd	r22, Y+7	; 0x07
    152c:	78 85       	ldd	r23, Y+8	; 0x08
    152e:	89 85       	ldd	r24, Y+9	; 0x09
    1530:	9a 85       	ldd	r25, Y+10	; 0x0a
    1532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	9e 83       	std	Y+6, r25	; 0x06
    153c:	8d 83       	std	Y+5, r24	; 0x05
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	9e 81       	ldd	r25, Y+6	; 0x06
    1542:	9a 83       	std	Y+2, r25	; 0x02
    1544:	89 83       	std	Y+1, r24	; 0x01
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	9a 81       	ldd	r25, Y+2	; 0x02
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <setPassword+0x2ae>
    154e:	9a 83       	std	Y+2, r25	; 0x02
    1550:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
}
    1558:	6e 96       	adiw	r28, 0x1e	; 30
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	00 d0       	rcall	.+0      	; 0x1570 <KEYPAD_getPressedKey+0x6>
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	40 e0       	ldi	r20, 0x00	; 0
    157a:	0e 94 ef 10 	call	0x21de	; 0x21de <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	61 e0       	ldi	r22, 0x01	; 1
    1582:	40 e0       	ldi	r20, 0x00	; 0
    1584:	0e 94 ef 10 	call	0x21de	; 0x21de <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	62 e0       	ldi	r22, 0x02	; 2
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	0e 94 ef 10 	call	0x21de	; 0x21de <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	63 e0       	ldi	r22, 0x03	; 3
    1596:	40 e0       	ldi	r20, 0x00	; 0
    1598:	0e 94 ef 10 	call	0x21de	; 0x21de <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	64 e0       	ldi	r22, 0x04	; 4
    15a0:	40 e0       	ldi	r20, 0x00	; 0
    15a2:	0e 94 ef 10 	call	0x21de	; 0x21de <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	65 e0       	ldi	r22, 0x05	; 5
    15aa:	40 e0       	ldi	r20, 0x00	; 0
    15ac:	0e 94 ef 10 	call	0x21de	; 0x21de <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	66 e0       	ldi	r22, 0x06	; 6
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	0e 94 ef 10 	call	0x21de	; 0x21de <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	67 e0       	ldi	r22, 0x07	; 7
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	0e 94 ef 10 	call	0x21de	; 0x21de <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    15c4:	19 82       	std	Y+1, r1	; 0x01
    15c6:	35 c0       	rjmp	.+106    	; 0x1632 <KEYPAD_getPressedKey+0xc8>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	69 81       	ldd	r22, Y+1	; 0x01
    15cc:	41 e0       	ldi	r20, 0x01	; 1
    15ce:	0e 94 ef 10 	call	0x21de	; 0x21de <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	69 81       	ldd	r22, Y+1	; 0x01
    15d6:	40 e0       	ldi	r20, 0x00	; 0
    15d8:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    15dc:	1a 82       	std	Y+2, r1	; 0x02
    15de:	1e c0       	rjmp	.+60     	; 0x161c <KEYPAD_getPressedKey+0xb2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	98 2f       	mov	r25, r24
    15e4:	9c 5f       	subi	r25, 0xFC	; 252
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	69 2f       	mov	r22, r25
    15ea:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <GPIO_readPin>
    15ee:	88 23       	and	r24, r24
    15f0:	91 f4       	brne	.+36     	; 0x1616 <KEYPAD_getPressedKey+0xac>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	88 2f       	mov	r24, r24
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	98 2f       	mov	r25, r24
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	89 0f       	add	r24, r25
    1606:	8f 5f       	subi	r24, 0xFF	; 255
    1608:	0e 94 1d 0b 	call	0x163a	; 0x163a <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	8f 5f       	subi	r24, 0xFF	; 255
    161a:	8a 83       	std	Y+2, r24	; 0x02
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	84 30       	cpi	r24, 0x04	; 4
    1620:	f8 f2       	brcs	.-66     	; 0x15e0 <KEYPAD_getPressedKey+0x76>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	69 81       	ldd	r22, Y+1	; 0x01
    1626:	40 e0       	ldi	r20, 0x00	; 0
    1628:	0e 94 ef 10 	call	0x21de	; 0x21de <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	8f 5f       	subi	r24, 0xFF	; 255
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	84 30       	cpi	r24, 0x04	; 4
    1636:	40 f2       	brcs	.-112    	; 0x15c8 <KEYPAD_getPressedKey+0x5e>
    1638:	c5 cf       	rjmp	.-118    	; 0x15c4 <KEYPAD_getPressedKey+0x5a>

0000163a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	00 d0       	rcall	.+0      	; 0x1640 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1640:	00 d0       	rcall	.+0      	; 0x1642 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1648:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	3c 83       	std	Y+4, r19	; 0x04
    1652:	2b 83       	std	Y+3, r18	; 0x03
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	9c 81       	ldd	r25, Y+4	; 0x04
    1658:	88 30       	cpi	r24, 0x08	; 8
    165a:	91 05       	cpc	r25, r1
    165c:	09 f4       	brne	.+2      	; 0x1660 <KEYPAD_4x4_adjustKeyNumber+0x26>
    165e:	70 c0       	rjmp	.+224    	; 0x1740 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1660:	2b 81       	ldd	r18, Y+3	; 0x03
    1662:	3c 81       	ldd	r19, Y+4	; 0x04
    1664:	29 30       	cpi	r18, 0x09	; 9
    1666:	31 05       	cpc	r19, r1
    1668:	5c f5       	brge	.+86     	; 0x16c0 <KEYPAD_4x4_adjustKeyNumber+0x86>
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	84 30       	cpi	r24, 0x04	; 4
    1670:	91 05       	cpc	r25, r1
    1672:	09 f4       	brne	.+2      	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1674:	59 c0       	rjmp	.+178    	; 0x1728 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1676:	2b 81       	ldd	r18, Y+3	; 0x03
    1678:	3c 81       	ldd	r19, Y+4	; 0x04
    167a:	25 30       	cpi	r18, 0x05	; 5
    167c:	31 05       	cpc	r19, r1
    167e:	9c f4       	brge	.+38     	; 0x16a6 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	9c 81       	ldd	r25, Y+4	; 0x04
    1684:	82 30       	cpi	r24, 0x02	; 2
    1686:	91 05       	cpc	r25, r1
    1688:	09 f4       	brne	.+2      	; 0x168c <KEYPAD_4x4_adjustKeyNumber+0x52>
    168a:	48 c0       	rjmp	.+144    	; 0x171c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    168c:	2b 81       	ldd	r18, Y+3	; 0x03
    168e:	3c 81       	ldd	r19, Y+4	; 0x04
    1690:	23 30       	cpi	r18, 0x03	; 3
    1692:	31 05       	cpc	r19, r1
    1694:	0c f0       	brlt	.+2      	; 0x1698 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1696:	45 c0       	rjmp	.+138    	; 0x1722 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	9c 81       	ldd	r25, Y+4	; 0x04
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	91 05       	cpc	r25, r1
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    16a2:	39 c0       	rjmp	.+114    	; 0x1716 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    16a4:	67 c0       	rjmp	.+206    	; 0x1774 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    16a6:	2b 81       	ldd	r18, Y+3	; 0x03
    16a8:	3c 81       	ldd	r19, Y+4	; 0x04
    16aa:	26 30       	cpi	r18, 0x06	; 6
    16ac:	31 05       	cpc	r19, r1
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <KEYPAD_4x4_adjustKeyNumber+0x78>
    16b0:	41 c0       	rjmp	.+130    	; 0x1734 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	87 30       	cpi	r24, 0x07	; 7
    16b8:	91 05       	cpc	r25, r1
    16ba:	0c f0       	brlt	.+2      	; 0x16be <KEYPAD_4x4_adjustKeyNumber+0x84>
    16bc:	3e c0       	rjmp	.+124    	; 0x173a <KEYPAD_4x4_adjustKeyNumber+0x100>
    16be:	37 c0       	rjmp	.+110    	; 0x172e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    16c0:	2b 81       	ldd	r18, Y+3	; 0x03
    16c2:	3c 81       	ldd	r19, Y+4	; 0x04
    16c4:	2c 30       	cpi	r18, 0x0C	; 12
    16c6:	31 05       	cpc	r19, r1
    16c8:	09 f4       	brne	.+2      	; 0x16cc <KEYPAD_4x4_adjustKeyNumber+0x92>
    16ca:	46 c0       	rjmp	.+140    	; 0x1758 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	9c 81       	ldd	r25, Y+4	; 0x04
    16d0:	8d 30       	cpi	r24, 0x0D	; 13
    16d2:	91 05       	cpc	r25, r1
    16d4:	5c f4       	brge	.+22     	; 0x16ec <KEYPAD_4x4_adjustKeyNumber+0xb2>
    16d6:	2b 81       	ldd	r18, Y+3	; 0x03
    16d8:	3c 81       	ldd	r19, Y+4	; 0x04
    16da:	2a 30       	cpi	r18, 0x0A	; 10
    16dc:	31 05       	cpc	r19, r1
    16de:	b1 f1       	breq	.+108    	; 0x174c <KEYPAD_4x4_adjustKeyNumber+0x112>
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	8b 30       	cpi	r24, 0x0B	; 11
    16e6:	91 05       	cpc	r25, r1
    16e8:	a4 f5       	brge	.+104    	; 0x1752 <KEYPAD_4x4_adjustKeyNumber+0x118>
    16ea:	2d c0       	rjmp	.+90     	; 0x1746 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    16ec:	2b 81       	ldd	r18, Y+3	; 0x03
    16ee:	3c 81       	ldd	r19, Y+4	; 0x04
    16f0:	2e 30       	cpi	r18, 0x0E	; 14
    16f2:	31 05       	cpc	r19, r1
    16f4:	b9 f1       	breq	.+110    	; 0x1764 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	8e 30       	cpi	r24, 0x0E	; 14
    16fc:	91 05       	cpc	r25, r1
    16fe:	7c f1       	brlt	.+94     	; 0x175e <KEYPAD_4x4_adjustKeyNumber+0x124>
    1700:	2b 81       	ldd	r18, Y+3	; 0x03
    1702:	3c 81       	ldd	r19, Y+4	; 0x04
    1704:	2f 30       	cpi	r18, 0x0F	; 15
    1706:	31 05       	cpc	r19, r1
    1708:	79 f1       	breq	.+94     	; 0x1768 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	9c 81       	ldd	r25, Y+4	; 0x04
    170e:	80 31       	cpi	r24, 0x10	; 16
    1710:	91 05       	cpc	r25, r1
    1712:	69 f1       	breq	.+90     	; 0x176e <KEYPAD_4x4_adjustKeyNumber+0x134>
    1714:	2f c0       	rjmp	.+94     	; 0x1774 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1716:	87 e0       	ldi	r24, 0x07	; 7
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	2e c0       	rjmp	.+92     	; 0x1778 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    171c:	88 e0       	ldi	r24, 0x08	; 8
    171e:	89 83       	std	Y+1, r24	; 0x01
    1720:	2b c0       	rjmp	.+86     	; 0x1778 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1722:	89 e0       	ldi	r24, 0x09	; 9
    1724:	89 83       	std	Y+1, r24	; 0x01
    1726:	28 c0       	rjmp	.+80     	; 0x1778 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1728:	85 e2       	ldi	r24, 0x25	; 37
    172a:	89 83       	std	Y+1, r24	; 0x01
    172c:	25 c0       	rjmp	.+74     	; 0x1778 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    172e:	84 e0       	ldi	r24, 0x04	; 4
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	22 c0       	rjmp	.+68     	; 0x1778 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1734:	85 e0       	ldi	r24, 0x05	; 5
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	1f c0       	rjmp	.+62     	; 0x1778 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    173a:	86 e0       	ldi	r24, 0x06	; 6
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	1c c0       	rjmp	.+56     	; 0x1778 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1740:	8a e2       	ldi	r24, 0x2A	; 42
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	19 c0       	rjmp	.+50     	; 0x1778 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	16 c0       	rjmp	.+44     	; 0x1778 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    174c:	82 e0       	ldi	r24, 0x02	; 2
    174e:	89 83       	std	Y+1, r24	; 0x01
    1750:	13 c0       	rjmp	.+38     	; 0x1778 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1752:	83 e0       	ldi	r24, 0x03	; 3
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	10 c0       	rjmp	.+32     	; 0x1778 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1758:	8d e2       	ldi	r24, 0x2D	; 45
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	0d c0       	rjmp	.+26     	; 0x1778 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    175e:	8d e0       	ldi	r24, 0x0D	; 13
    1760:	89 83       	std	Y+1, r24	; 0x01
    1762:	0a c0       	rjmp	.+20     	; 0x1778 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1764:	19 82       	std	Y+1, r1	; 0x01
    1766:	08 c0       	rjmp	.+16     	; 0x1778 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1768:	8d e3       	ldi	r24, 0x3D	; 61
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	05 c0       	rjmp	.+10     	; 0x1778 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    176e:	8b e2       	ldi	r24, 0x2B	; 43
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1778:	89 81       	ldd	r24, Y+1	; 0x01
} 
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	2e 97       	sbiw	r28, 0x0e	; 14
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    179c:	82 e0       	ldi	r24, 0x02	; 2
    179e:	62 e0       	ldi	r22, 0x02	; 2
    17a0:	41 e0       	ldi	r20, 0x01	; 1
    17a2:	0e 94 ef 10 	call	0x21de	; 0x21de <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    17a6:	82 e0       	ldi	r24, 0x02	; 2
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	0e 94 ef 10 	call	0x21de	; 0x21de <GPIO_setupPinDirection>
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	a0 ea       	ldi	r26, 0xA0	; 160
    17b6:	b1 e4       	ldi	r27, 0x41	; 65
    17b8:	8b 87       	std	Y+11, r24	; 0x0b
    17ba:	9c 87       	std	Y+12, r25	; 0x0c
    17bc:	ad 87       	std	Y+13, r26	; 0x0d
    17be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	4a ef       	ldi	r20, 0xFA	; 250
    17ce:	54 e4       	ldi	r21, 0x44	; 68
    17d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	8f 83       	std	Y+7, r24	; 0x07
    17da:	98 87       	std	Y+8, r25	; 0x08
    17dc:	a9 87       	std	Y+9, r26	; 0x09
    17de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17e0:	6f 81       	ldd	r22, Y+7	; 0x07
    17e2:	78 85       	ldd	r23, Y+8	; 0x08
    17e4:	89 85       	ldd	r24, Y+9	; 0x09
    17e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e8       	ldi	r20, 0x80	; 128
    17ee:	5f e3       	ldi	r21, 0x3F	; 63
    17f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17f4:	88 23       	and	r24, r24
    17f6:	2c f4       	brge	.+10     	; 0x1802 <LCD_init+0x7a>
		__ticks = 1;
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	9e 83       	std	Y+6, r25	; 0x06
    17fe:	8d 83       	std	Y+5, r24	; 0x05
    1800:	3f c0       	rjmp	.+126    	; 0x1880 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1802:	6f 81       	ldd	r22, Y+7	; 0x07
    1804:	78 85       	ldd	r23, Y+8	; 0x08
    1806:	89 85       	ldd	r24, Y+9	; 0x09
    1808:	9a 85       	ldd	r25, Y+10	; 0x0a
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	3f ef       	ldi	r19, 0xFF	; 255
    180e:	4f e7       	ldi	r20, 0x7F	; 127
    1810:	57 e4       	ldi	r21, 0x47	; 71
    1812:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1816:	18 16       	cp	r1, r24
    1818:	4c f5       	brge	.+82     	; 0x186c <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181a:	6b 85       	ldd	r22, Y+11	; 0x0b
    181c:	7c 85       	ldd	r23, Y+12	; 0x0c
    181e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1820:	9e 85       	ldd	r25, Y+14	; 0x0e
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e2       	ldi	r20, 0x20	; 32
    1828:	51 e4       	ldi	r21, 0x41	; 65
    182a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	bc 01       	movw	r22, r24
    1834:	cd 01       	movw	r24, r26
    1836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	9e 83       	std	Y+6, r25	; 0x06
    1840:	8d 83       	std	Y+5, r24	; 0x05
    1842:	0f c0       	rjmp	.+30     	; 0x1862 <LCD_init+0xda>
    1844:	88 ec       	ldi	r24, 0xC8	; 200
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	9c 83       	std	Y+4, r25	; 0x04
    184a:	8b 83       	std	Y+3, r24	; 0x03
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	9c 81       	ldd	r25, Y+4	; 0x04
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <LCD_init+0xc8>
    1854:	9c 83       	std	Y+4, r25	; 0x04
    1856:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1858:	8d 81       	ldd	r24, Y+5	; 0x05
    185a:	9e 81       	ldd	r25, Y+6	; 0x06
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	9e 83       	std	Y+6, r25	; 0x06
    1860:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1862:	8d 81       	ldd	r24, Y+5	; 0x05
    1864:	9e 81       	ldd	r25, Y+6	; 0x06
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	69 f7       	brne	.-38     	; 0x1844 <LCD_init+0xbc>
    186a:	14 c0       	rjmp	.+40     	; 0x1894 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186c:	6f 81       	ldd	r22, Y+7	; 0x07
    186e:	78 85       	ldd	r23, Y+8	; 0x08
    1870:	89 85       	ldd	r24, Y+9	; 0x09
    1872:	9a 85       	ldd	r25, Y+10	; 0x0a
    1874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	9e 83       	std	Y+6, r25	; 0x06
    187e:	8d 83       	std	Y+5, r24	; 0x05
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	9e 81       	ldd	r25, Y+6	; 0x06
    1884:	9a 83       	std	Y+2, r25	; 0x02
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	9a 81       	ldd	r25, Y+2	; 0x02
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	f1 f7       	brne	.-4      	; 0x188c <LCD_init+0x104>
    1890:	9a 83       	std	Y+2, r25	; 0x02
    1892:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	6f ef       	ldi	r22, 0xFF	; 255
    1898:	0e 94 7e 13 	call	0x26fc	; 0x26fc <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    189c:	88 e3       	ldi	r24, 0x38	; 56
    189e:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    18a2:	8c e0       	ldi	r24, 0x0C	; 12
    18a4:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
}
    18ae:	2e 96       	adiw	r28, 0x0e	; 14
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	f8 94       	cli
    18b4:	de bf       	out	0x3e, r29	; 62
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	cd bf       	out	0x3d, r28	; 61
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	e9 97       	sbiw	r28, 0x39	; 57
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	f8 94       	cli
    18ce:	de bf       	out	0x3e, r29	; 62
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	cd bf       	out	0x3d, r28	; 61
    18d4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    18d6:	82 e0       	ldi	r24, 0x02	; 2
    18d8:	62 e0       	ldi	r22, 0x02	; 2
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <GPIO_writePin>
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	a0 e8       	ldi	r26, 0x80	; 128
    18e6:	bf e3       	ldi	r27, 0x3F	; 63
    18e8:	8d ab       	std	Y+53, r24	; 0x35
    18ea:	9e ab       	std	Y+54, r25	; 0x36
    18ec:	af ab       	std	Y+55, r26	; 0x37
    18ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f0:	6d a9       	ldd	r22, Y+53	; 0x35
    18f2:	7e a9       	ldd	r23, Y+54	; 0x36
    18f4:	8f a9       	ldd	r24, Y+55	; 0x37
    18f6:	98 ad       	ldd	r25, Y+56	; 0x38
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	4a ef       	ldi	r20, 0xFA	; 250
    18fe:	54 e4       	ldi	r21, 0x44	; 68
    1900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	89 ab       	std	Y+49, r24	; 0x31
    190a:	9a ab       	std	Y+50, r25	; 0x32
    190c:	ab ab       	std	Y+51, r26	; 0x33
    190e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1910:	69 a9       	ldd	r22, Y+49	; 0x31
    1912:	7a a9       	ldd	r23, Y+50	; 0x32
    1914:	8b a9       	ldd	r24, Y+51	; 0x33
    1916:	9c a9       	ldd	r25, Y+52	; 0x34
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e8       	ldi	r20, 0x80	; 128
    191e:	5f e3       	ldi	r21, 0x3F	; 63
    1920:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1924:	88 23       	and	r24, r24
    1926:	2c f4       	brge	.+10     	; 0x1932 <LCD_sendCommand+0x72>
		__ticks = 1;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	98 ab       	std	Y+48, r25	; 0x30
    192e:	8f a7       	std	Y+47, r24	; 0x2f
    1930:	3f c0       	rjmp	.+126    	; 0x19b0 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1932:	69 a9       	ldd	r22, Y+49	; 0x31
    1934:	7a a9       	ldd	r23, Y+50	; 0x32
    1936:	8b a9       	ldd	r24, Y+51	; 0x33
    1938:	9c a9       	ldd	r25, Y+52	; 0x34
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	3f ef       	ldi	r19, 0xFF	; 255
    193e:	4f e7       	ldi	r20, 0x7F	; 127
    1940:	57 e4       	ldi	r21, 0x47	; 71
    1942:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1946:	18 16       	cp	r1, r24
    1948:	4c f5       	brge	.+82     	; 0x199c <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194a:	6d a9       	ldd	r22, Y+53	; 0x35
    194c:	7e a9       	ldd	r23, Y+54	; 0x36
    194e:	8f a9       	ldd	r24, Y+55	; 0x37
    1950:	98 ad       	ldd	r25, Y+56	; 0x38
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e2       	ldi	r20, 0x20	; 32
    1958:	51 e4       	ldi	r21, 0x41	; 65
    195a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	bc 01       	movw	r22, r24
    1964:	cd 01       	movw	r24, r26
    1966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	98 ab       	std	Y+48, r25	; 0x30
    1970:	8f a7       	std	Y+47, r24	; 0x2f
    1972:	0f c0       	rjmp	.+30     	; 0x1992 <LCD_sendCommand+0xd2>
    1974:	88 ec       	ldi	r24, 0xC8	; 200
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	9e a7       	std	Y+46, r25	; 0x2e
    197a:	8d a7       	std	Y+45, r24	; 0x2d
    197c:	8d a5       	ldd	r24, Y+45	; 0x2d
    197e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	f1 f7       	brne	.-4      	; 0x1980 <LCD_sendCommand+0xc0>
    1984:	9e a7       	std	Y+46, r25	; 0x2e
    1986:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1988:	8f a5       	ldd	r24, Y+47	; 0x2f
    198a:	98 a9       	ldd	r25, Y+48	; 0x30
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	98 ab       	std	Y+48, r25	; 0x30
    1990:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1992:	8f a5       	ldd	r24, Y+47	; 0x2f
    1994:	98 a9       	ldd	r25, Y+48	; 0x30
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	69 f7       	brne	.-38     	; 0x1974 <LCD_sendCommand+0xb4>
    199a:	14 c0       	rjmp	.+40     	; 0x19c4 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199c:	69 a9       	ldd	r22, Y+49	; 0x31
    199e:	7a a9       	ldd	r23, Y+50	; 0x32
    19a0:	8b a9       	ldd	r24, Y+51	; 0x33
    19a2:	9c a9       	ldd	r25, Y+52	; 0x34
    19a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	98 ab       	std	Y+48, r25	; 0x30
    19ae:	8f a7       	std	Y+47, r24	; 0x2f
    19b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    19b2:	98 a9       	ldd	r25, Y+48	; 0x30
    19b4:	9c a7       	std	Y+44, r25	; 0x2c
    19b6:	8b a7       	std	Y+43, r24	; 0x2b
    19b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    19ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    19bc:	01 97       	sbiw	r24, 0x01	; 1
    19be:	f1 f7       	brne	.-4      	; 0x19bc <LCD_sendCommand+0xfc>
    19c0:	9c a7       	std	Y+44, r25	; 0x2c
    19c2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    19c4:	82 e0       	ldi	r24, 0x02	; 2
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	41 e0       	ldi	r20, 0x01	; 1
    19ca:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <GPIO_writePin>
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a0 e8       	ldi	r26, 0x80	; 128
    19d4:	bf e3       	ldi	r27, 0x3F	; 63
    19d6:	8f a3       	std	Y+39, r24	; 0x27
    19d8:	98 a7       	std	Y+40, r25	; 0x28
    19da:	a9 a7       	std	Y+41, r26	; 0x29
    19dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19de:	6f a1       	ldd	r22, Y+39	; 0x27
    19e0:	78 a5       	ldd	r23, Y+40	; 0x28
    19e2:	89 a5       	ldd	r24, Y+41	; 0x29
    19e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	4a ef       	ldi	r20, 0xFA	; 250
    19ec:	54 e4       	ldi	r21, 0x44	; 68
    19ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	8b a3       	std	Y+35, r24	; 0x23
    19f8:	9c a3       	std	Y+36, r25	; 0x24
    19fa:	ad a3       	std	Y+37, r26	; 0x25
    19fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1a00:	7c a1       	ldd	r23, Y+36	; 0x24
    1a02:	8d a1       	ldd	r24, Y+37	; 0x25
    1a04:	9e a1       	ldd	r25, Y+38	; 0x26
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e8       	ldi	r20, 0x80	; 128
    1a0c:	5f e3       	ldi	r21, 0x3F	; 63
    1a0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a12:	88 23       	and	r24, r24
    1a14:	2c f4       	brge	.+10     	; 0x1a20 <LCD_sendCommand+0x160>
		__ticks = 1;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9a a3       	std	Y+34, r25	; 0x22
    1a1c:	89 a3       	std	Y+33, r24	; 0x21
    1a1e:	3f c0       	rjmp	.+126    	; 0x1a9e <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1a20:	6b a1       	ldd	r22, Y+35	; 0x23
    1a22:	7c a1       	ldd	r23, Y+36	; 0x24
    1a24:	8d a1       	ldd	r24, Y+37	; 0x25
    1a26:	9e a1       	ldd	r25, Y+38	; 0x26
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	3f ef       	ldi	r19, 0xFF	; 255
    1a2c:	4f e7       	ldi	r20, 0x7F	; 127
    1a2e:	57 e4       	ldi	r21, 0x47	; 71
    1a30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a34:	18 16       	cp	r1, r24
    1a36:	4c f5       	brge	.+82     	; 0x1a8a <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a38:	6f a1       	ldd	r22, Y+39	; 0x27
    1a3a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e2       	ldi	r20, 0x20	; 32
    1a46:	51 e4       	ldi	r21, 0x41	; 65
    1a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	bc 01       	movw	r22, r24
    1a52:	cd 01       	movw	r24, r26
    1a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	9a a3       	std	Y+34, r25	; 0x22
    1a5e:	89 a3       	std	Y+33, r24	; 0x21
    1a60:	0f c0       	rjmp	.+30     	; 0x1a80 <LCD_sendCommand+0x1c0>
    1a62:	88 ec       	ldi	r24, 0xC8	; 200
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	98 a3       	std	Y+32, r25	; 0x20
    1a68:	8f 8f       	std	Y+31, r24	; 0x1f
    1a6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a6c:	98 a1       	ldd	r25, Y+32	; 0x20
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <LCD_sendCommand+0x1ae>
    1a72:	98 a3       	std	Y+32, r25	; 0x20
    1a74:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a76:	89 a1       	ldd	r24, Y+33	; 0x21
    1a78:	9a a1       	ldd	r25, Y+34	; 0x22
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	9a a3       	std	Y+34, r25	; 0x22
    1a7e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a80:	89 a1       	ldd	r24, Y+33	; 0x21
    1a82:	9a a1       	ldd	r25, Y+34	; 0x22
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	69 f7       	brne	.-38     	; 0x1a62 <LCD_sendCommand+0x1a2>
    1a88:	14 c0       	rjmp	.+40     	; 0x1ab2 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a90:	9e a1       	ldd	r25, Y+38	; 0x26
    1a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	9a a3       	std	Y+34, r25	; 0x22
    1a9c:	89 a3       	std	Y+33, r24	; 0x21
    1a9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1aa0:	9a a1       	ldd	r25, Y+34	; 0x22
    1aa2:	9e 8f       	std	Y+30, r25	; 0x1e
    1aa4:	8d 8f       	std	Y+29, r24	; 0x1d
    1aa6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aa8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <LCD_sendCommand+0x1ea>
    1aae:	9e 8f       	std	Y+30, r25	; 0x1e
    1ab0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	69 ad       	ldd	r22, Y+57	; 0x39
    1ab6:	0e 94 c2 13 	call	0x2784	; 0x2784 <GPIO_writePort>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	a0 e8       	ldi	r26, 0x80	; 128
    1ac0:	bf e3       	ldi	r27, 0x3F	; 63
    1ac2:	89 8f       	std	Y+25, r24	; 0x19
    1ac4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ac6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ac8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aca:	69 8d       	ldd	r22, Y+25	; 0x19
    1acc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ace:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ad0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	4a ef       	ldi	r20, 0xFA	; 250
    1ad8:	54 e4       	ldi	r21, 0x44	; 68
    1ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	8d 8b       	std	Y+21, r24	; 0x15
    1ae4:	9e 8b       	std	Y+22, r25	; 0x16
    1ae6:	af 8b       	std	Y+23, r26	; 0x17
    1ae8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1aea:	6d 89       	ldd	r22, Y+21	; 0x15
    1aec:	7e 89       	ldd	r23, Y+22	; 0x16
    1aee:	8f 89       	ldd	r24, Y+23	; 0x17
    1af0:	98 8d       	ldd	r25, Y+24	; 0x18
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e8       	ldi	r20, 0x80	; 128
    1af8:	5f e3       	ldi	r21, 0x3F	; 63
    1afa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1afe:	88 23       	and	r24, r24
    1b00:	2c f4       	brge	.+10     	; 0x1b0c <LCD_sendCommand+0x24c>
		__ticks = 1;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	9c 8b       	std	Y+20, r25	; 0x14
    1b08:	8b 8b       	std	Y+19, r24	; 0x13
    1b0a:	3f c0       	rjmp	.+126    	; 0x1b8a <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1b0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b10:	8f 89       	ldd	r24, Y+23	; 0x17
    1b12:	98 8d       	ldd	r25, Y+24	; 0x18
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	3f ef       	ldi	r19, 0xFF	; 255
    1b18:	4f e7       	ldi	r20, 0x7F	; 127
    1b1a:	57 e4       	ldi	r21, 0x47	; 71
    1b1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b20:	18 16       	cp	r1, r24
    1b22:	4c f5       	brge	.+82     	; 0x1b76 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b24:	69 8d       	ldd	r22, Y+25	; 0x19
    1b26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e2       	ldi	r20, 0x20	; 32
    1b32:	51 e4       	ldi	r21, 0x41	; 65
    1b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	bc 01       	movw	r22, r24
    1b3e:	cd 01       	movw	r24, r26
    1b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	9c 8b       	std	Y+20, r25	; 0x14
    1b4a:	8b 8b       	std	Y+19, r24	; 0x13
    1b4c:	0f c0       	rjmp	.+30     	; 0x1b6c <LCD_sendCommand+0x2ac>
    1b4e:	88 ec       	ldi	r24, 0xC8	; 200
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	9a 8b       	std	Y+18, r25	; 0x12
    1b54:	89 8b       	std	Y+17, r24	; 0x11
    1b56:	89 89       	ldd	r24, Y+17	; 0x11
    1b58:	9a 89       	ldd	r25, Y+18	; 0x12
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <LCD_sendCommand+0x29a>
    1b5e:	9a 8b       	std	Y+18, r25	; 0x12
    1b60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b62:	8b 89       	ldd	r24, Y+19	; 0x13
    1b64:	9c 89       	ldd	r25, Y+20	; 0x14
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	9c 8b       	std	Y+20, r25	; 0x14
    1b6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	69 f7       	brne	.-38     	; 0x1b4e <LCD_sendCommand+0x28e>
    1b74:	14 c0       	rjmp	.+40     	; 0x1b9e <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b76:	6d 89       	ldd	r22, Y+21	; 0x15
    1b78:	7e 89       	ldd	r23, Y+22	; 0x16
    1b7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	9c 8b       	std	Y+20, r25	; 0x14
    1b88:	8b 8b       	std	Y+19, r24	; 0x13
    1b8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8e:	98 8b       	std	Y+16, r25	; 0x10
    1b90:	8f 87       	std	Y+15, r24	; 0x0f
    1b92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b94:	98 89       	ldd	r25, Y+16	; 0x10
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <LCD_sendCommand+0x2d6>
    1b9a:	98 8b       	std	Y+16, r25	; 0x10
    1b9c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b9e:	82 e0       	ldi	r24, 0x02	; 2
    1ba0:	60 e0       	ldi	r22, 0x00	; 0
    1ba2:	40 e0       	ldi	r20, 0x00	; 0
    1ba4:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <GPIO_writePin>
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	a0 e8       	ldi	r26, 0x80	; 128
    1bae:	bf e3       	ldi	r27, 0x3F	; 63
    1bb0:	8b 87       	std	Y+11, r24	; 0x0b
    1bb2:	9c 87       	std	Y+12, r25	; 0x0c
    1bb4:	ad 87       	std	Y+13, r26	; 0x0d
    1bb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	4a ef       	ldi	r20, 0xFA	; 250
    1bc6:	54 e4       	ldi	r21, 0x44	; 68
    1bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	8f 83       	std	Y+7, r24	; 0x07
    1bd2:	98 87       	std	Y+8, r25	; 0x08
    1bd4:	a9 87       	std	Y+9, r26	; 0x09
    1bd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bda:	78 85       	ldd	r23, Y+8	; 0x08
    1bdc:	89 85       	ldd	r24, Y+9	; 0x09
    1bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e8       	ldi	r20, 0x80	; 128
    1be6:	5f e3       	ldi	r21, 0x3F	; 63
    1be8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bec:	88 23       	and	r24, r24
    1bee:	2c f4       	brge	.+10     	; 0x1bfa <LCD_sendCommand+0x33a>
		__ticks = 1;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	9e 83       	std	Y+6, r25	; 0x06
    1bf6:	8d 83       	std	Y+5, r24	; 0x05
    1bf8:	3f c0       	rjmp	.+126    	; 0x1c78 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1bfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfc:	78 85       	ldd	r23, Y+8	; 0x08
    1bfe:	89 85       	ldd	r24, Y+9	; 0x09
    1c00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	3f ef       	ldi	r19, 0xFF	; 255
    1c06:	4f e7       	ldi	r20, 0x7F	; 127
    1c08:	57 e4       	ldi	r21, 0x47	; 71
    1c0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c0e:	18 16       	cp	r1, r24
    1c10:	4c f5       	brge	.+82     	; 0x1c64 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e2       	ldi	r20, 0x20	; 32
    1c20:	51 e4       	ldi	r21, 0x41	; 65
    1c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	9e 83       	std	Y+6, r25	; 0x06
    1c38:	8d 83       	std	Y+5, r24	; 0x05
    1c3a:	0f c0       	rjmp	.+30     	; 0x1c5a <LCD_sendCommand+0x39a>
    1c3c:	88 ec       	ldi	r24, 0xC8	; 200
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	9c 83       	std	Y+4, r25	; 0x04
    1c42:	8b 83       	std	Y+3, r24	; 0x03
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	9c 81       	ldd	r25, Y+4	; 0x04
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <LCD_sendCommand+0x388>
    1c4c:	9c 83       	std	Y+4, r25	; 0x04
    1c4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	9e 81       	ldd	r25, Y+6	; 0x06
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	9e 83       	std	Y+6, r25	; 0x06
    1c58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	69 f7       	brne	.-38     	; 0x1c3c <LCD_sendCommand+0x37c>
    1c62:	14 c0       	rjmp	.+40     	; 0x1c8c <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c64:	6f 81       	ldd	r22, Y+7	; 0x07
    1c66:	78 85       	ldd	r23, Y+8	; 0x08
    1c68:	89 85       	ldd	r24, Y+9	; 0x09
    1c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	9e 83       	std	Y+6, r25	; 0x06
    1c76:	8d 83       	std	Y+5, r24	; 0x05
    1c78:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7c:	9a 83       	std	Y+2, r25	; 0x02
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	9a 81       	ldd	r25, Y+2	; 0x02
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <LCD_sendCommand+0x3c4>
    1c88:	9a 83       	std	Y+2, r25	; 0x02
    1c8a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1c8c:	e9 96       	adiw	r28, 0x39	; 57
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	e9 97       	sbiw	r28, 0x39	; 57
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
    1cb2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1cb4:	82 e0       	ldi	r24, 0x02	; 2
    1cb6:	62 e0       	ldi	r22, 0x02	; 2
    1cb8:	41 e0       	ldi	r20, 0x01	; 1
    1cba:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <GPIO_writePin>
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	a0 e8       	ldi	r26, 0x80	; 128
    1cc4:	bf e3       	ldi	r27, 0x3F	; 63
    1cc6:	8d ab       	std	Y+53, r24	; 0x35
    1cc8:	9e ab       	std	Y+54, r25	; 0x36
    1cca:	af ab       	std	Y+55, r26	; 0x37
    1ccc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cce:	6d a9       	ldd	r22, Y+53	; 0x35
    1cd0:	7e a9       	ldd	r23, Y+54	; 0x36
    1cd2:	8f a9       	ldd	r24, Y+55	; 0x37
    1cd4:	98 ad       	ldd	r25, Y+56	; 0x38
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	4a ef       	ldi	r20, 0xFA	; 250
    1cdc:	54 e4       	ldi	r21, 0x44	; 68
    1cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	89 ab       	std	Y+49, r24	; 0x31
    1ce8:	9a ab       	std	Y+50, r25	; 0x32
    1cea:	ab ab       	std	Y+51, r26	; 0x33
    1cec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cee:	69 a9       	ldd	r22, Y+49	; 0x31
    1cf0:	7a a9       	ldd	r23, Y+50	; 0x32
    1cf2:	8b a9       	ldd	r24, Y+51	; 0x33
    1cf4:	9c a9       	ldd	r25, Y+52	; 0x34
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e8       	ldi	r20, 0x80	; 128
    1cfc:	5f e3       	ldi	r21, 0x3F	; 63
    1cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d02:	88 23       	and	r24, r24
    1d04:	2c f4       	brge	.+10     	; 0x1d10 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	98 ab       	std	Y+48, r25	; 0x30
    1d0c:	8f a7       	std	Y+47, r24	; 0x2f
    1d0e:	3f c0       	rjmp	.+126    	; 0x1d8e <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1d10:	69 a9       	ldd	r22, Y+49	; 0x31
    1d12:	7a a9       	ldd	r23, Y+50	; 0x32
    1d14:	8b a9       	ldd	r24, Y+51	; 0x33
    1d16:	9c a9       	ldd	r25, Y+52	; 0x34
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	3f ef       	ldi	r19, 0xFF	; 255
    1d1c:	4f e7       	ldi	r20, 0x7F	; 127
    1d1e:	57 e4       	ldi	r21, 0x47	; 71
    1d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d24:	18 16       	cp	r1, r24
    1d26:	4c f5       	brge	.+82     	; 0x1d7a <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d28:	6d a9       	ldd	r22, Y+53	; 0x35
    1d2a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d2c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d2e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e2       	ldi	r20, 0x20	; 32
    1d36:	51 e4       	ldi	r21, 0x41	; 65
    1d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	bc 01       	movw	r22, r24
    1d42:	cd 01       	movw	r24, r26
    1d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	98 ab       	std	Y+48, r25	; 0x30
    1d4e:	8f a7       	std	Y+47, r24	; 0x2f
    1d50:	0f c0       	rjmp	.+30     	; 0x1d70 <LCD_displayCharacter+0xd2>
    1d52:	88 ec       	ldi	r24, 0xC8	; 200
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	9e a7       	std	Y+46, r25	; 0x2e
    1d58:	8d a7       	std	Y+45, r24	; 0x2d
    1d5a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d5c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <LCD_displayCharacter+0xc0>
    1d62:	9e a7       	std	Y+46, r25	; 0x2e
    1d64:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d68:	98 a9       	ldd	r25, Y+48	; 0x30
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	98 ab       	std	Y+48, r25	; 0x30
    1d6e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d70:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d72:	98 a9       	ldd	r25, Y+48	; 0x30
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	69 f7       	brne	.-38     	; 0x1d52 <LCD_displayCharacter+0xb4>
    1d78:	14 c0       	rjmp	.+40     	; 0x1da2 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d7c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d7e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d80:	9c a9       	ldd	r25, Y+52	; 0x34
    1d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	98 ab       	std	Y+48, r25	; 0x30
    1d8c:	8f a7       	std	Y+47, r24	; 0x2f
    1d8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d90:	98 a9       	ldd	r25, Y+48	; 0x30
    1d92:	9c a7       	std	Y+44, r25	; 0x2c
    1d94:	8b a7       	std	Y+43, r24	; 0x2b
    1d96:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d98:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <LCD_displayCharacter+0xfc>
    1d9e:	9c a7       	std	Y+44, r25	; 0x2c
    1da0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1da2:	82 e0       	ldi	r24, 0x02	; 2
    1da4:	60 e0       	ldi	r22, 0x00	; 0
    1da6:	41 e0       	ldi	r20, 0x01	; 1
    1da8:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <GPIO_writePin>
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	a0 e8       	ldi	r26, 0x80	; 128
    1db2:	bf e3       	ldi	r27, 0x3F	; 63
    1db4:	8f a3       	std	Y+39, r24	; 0x27
    1db6:	98 a7       	std	Y+40, r25	; 0x28
    1db8:	a9 a7       	std	Y+41, r26	; 0x29
    1dba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbc:	6f a1       	ldd	r22, Y+39	; 0x27
    1dbe:	78 a5       	ldd	r23, Y+40	; 0x28
    1dc0:	89 a5       	ldd	r24, Y+41	; 0x29
    1dc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	4a ef       	ldi	r20, 0xFA	; 250
    1dca:	54 e4       	ldi	r21, 0x44	; 68
    1dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	8b a3       	std	Y+35, r24	; 0x23
    1dd6:	9c a3       	std	Y+36, r25	; 0x24
    1dd8:	ad a3       	std	Y+37, r26	; 0x25
    1dda:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ddc:	6b a1       	ldd	r22, Y+35	; 0x23
    1dde:	7c a1       	ldd	r23, Y+36	; 0x24
    1de0:	8d a1       	ldd	r24, Y+37	; 0x25
    1de2:	9e a1       	ldd	r25, Y+38	; 0x26
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e8       	ldi	r20, 0x80	; 128
    1dea:	5f e3       	ldi	r21, 0x3F	; 63
    1dec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df0:	88 23       	and	r24, r24
    1df2:	2c f4       	brge	.+10     	; 0x1dfe <LCD_displayCharacter+0x160>
		__ticks = 1;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	9a a3       	std	Y+34, r25	; 0x22
    1dfa:	89 a3       	std	Y+33, r24	; 0x21
    1dfc:	3f c0       	rjmp	.+126    	; 0x1e7c <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1dfe:	6b a1       	ldd	r22, Y+35	; 0x23
    1e00:	7c a1       	ldd	r23, Y+36	; 0x24
    1e02:	8d a1       	ldd	r24, Y+37	; 0x25
    1e04:	9e a1       	ldd	r25, Y+38	; 0x26
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	3f ef       	ldi	r19, 0xFF	; 255
    1e0a:	4f e7       	ldi	r20, 0x7F	; 127
    1e0c:	57 e4       	ldi	r21, 0x47	; 71
    1e0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e12:	18 16       	cp	r1, r24
    1e14:	4c f5       	brge	.+82     	; 0x1e68 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e16:	6f a1       	ldd	r22, Y+39	; 0x27
    1e18:	78 a5       	ldd	r23, Y+40	; 0x28
    1e1a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e2       	ldi	r20, 0x20	; 32
    1e24:	51 e4       	ldi	r21, 0x41	; 65
    1e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	bc 01       	movw	r22, r24
    1e30:	cd 01       	movw	r24, r26
    1e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	9a a3       	std	Y+34, r25	; 0x22
    1e3c:	89 a3       	std	Y+33, r24	; 0x21
    1e3e:	0f c0       	rjmp	.+30     	; 0x1e5e <LCD_displayCharacter+0x1c0>
    1e40:	88 ec       	ldi	r24, 0xC8	; 200
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	98 a3       	std	Y+32, r25	; 0x20
    1e46:	8f 8f       	std	Y+31, r24	; 0x1f
    1e48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e4a:	98 a1       	ldd	r25, Y+32	; 0x20
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <LCD_displayCharacter+0x1ae>
    1e50:	98 a3       	std	Y+32, r25	; 0x20
    1e52:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e54:	89 a1       	ldd	r24, Y+33	; 0x21
    1e56:	9a a1       	ldd	r25, Y+34	; 0x22
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	9a a3       	std	Y+34, r25	; 0x22
    1e5c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e60:	9a a1       	ldd	r25, Y+34	; 0x22
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	69 f7       	brne	.-38     	; 0x1e40 <LCD_displayCharacter+0x1a2>
    1e66:	14 c0       	rjmp	.+40     	; 0x1e90 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e68:	6b a1       	ldd	r22, Y+35	; 0x23
    1e6a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e6c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e6e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	9a a3       	std	Y+34, r25	; 0x22
    1e7a:	89 a3       	std	Y+33, r24	; 0x21
    1e7c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e7e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e80:	9e 8f       	std	Y+30, r25	; 0x1e
    1e82:	8d 8f       	std	Y+29, r24	; 0x1d
    1e84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <LCD_displayCharacter+0x1ea>
    1e8c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e8e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	69 ad       	ldd	r22, Y+57	; 0x39
    1e94:	0e 94 c2 13 	call	0x2784	; 0x2784 <GPIO_writePort>
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	a0 e8       	ldi	r26, 0x80	; 128
    1e9e:	bf e3       	ldi	r27, 0x3F	; 63
    1ea0:	89 8f       	std	Y+25, r24	; 0x19
    1ea2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ea4:	ab 8f       	std	Y+27, r26	; 0x1b
    1ea6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea8:	69 8d       	ldd	r22, Y+25	; 0x19
    1eaa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	4a ef       	ldi	r20, 0xFA	; 250
    1eb6:	54 e4       	ldi	r21, 0x44	; 68
    1eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	8d 8b       	std	Y+21, r24	; 0x15
    1ec2:	9e 8b       	std	Y+22, r25	; 0x16
    1ec4:	af 8b       	std	Y+23, r26	; 0x17
    1ec6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ec8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eca:	7e 89       	ldd	r23, Y+22	; 0x16
    1ecc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ece:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e8       	ldi	r20, 0x80	; 128
    1ed6:	5f e3       	ldi	r21, 0x3F	; 63
    1ed8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1edc:	88 23       	and	r24, r24
    1ede:	2c f4       	brge	.+10     	; 0x1eea <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9c 8b       	std	Y+20, r25	; 0x14
    1ee6:	8b 8b       	std	Y+19, r24	; 0x13
    1ee8:	3f c0       	rjmp	.+126    	; 0x1f68 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1eea:	6d 89       	ldd	r22, Y+21	; 0x15
    1eec:	7e 89       	ldd	r23, Y+22	; 0x16
    1eee:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	3f ef       	ldi	r19, 0xFF	; 255
    1ef6:	4f e7       	ldi	r20, 0x7F	; 127
    1ef8:	57 e4       	ldi	r21, 0x47	; 71
    1efa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1efe:	18 16       	cp	r1, r24
    1f00:	4c f5       	brge	.+82     	; 0x1f54 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f02:	69 8d       	ldd	r22, Y+25	; 0x19
    1f04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e2       	ldi	r20, 0x20	; 32
    1f10:	51 e4       	ldi	r21, 0x41	; 65
    1f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	9c 8b       	std	Y+20, r25	; 0x14
    1f28:	8b 8b       	std	Y+19, r24	; 0x13
    1f2a:	0f c0       	rjmp	.+30     	; 0x1f4a <LCD_displayCharacter+0x2ac>
    1f2c:	88 ec       	ldi	r24, 0xC8	; 200
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	9a 8b       	std	Y+18, r25	; 0x12
    1f32:	89 8b       	std	Y+17, r24	; 0x11
    1f34:	89 89       	ldd	r24, Y+17	; 0x11
    1f36:	9a 89       	ldd	r25, Y+18	; 0x12
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <LCD_displayCharacter+0x29a>
    1f3c:	9a 8b       	std	Y+18, r25	; 0x12
    1f3e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f40:	8b 89       	ldd	r24, Y+19	; 0x13
    1f42:	9c 89       	ldd	r25, Y+20	; 0x14
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	9c 8b       	std	Y+20, r25	; 0x14
    1f48:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	69 f7       	brne	.-38     	; 0x1f2c <LCD_displayCharacter+0x28e>
    1f52:	14 c0       	rjmp	.+40     	; 0x1f7c <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f54:	6d 89       	ldd	r22, Y+21	; 0x15
    1f56:	7e 89       	ldd	r23, Y+22	; 0x16
    1f58:	8f 89       	ldd	r24, Y+23	; 0x17
    1f5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	9c 8b       	std	Y+20, r25	; 0x14
    1f66:	8b 8b       	std	Y+19, r24	; 0x13
    1f68:	8b 89       	ldd	r24, Y+19	; 0x13
    1f6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f6c:	98 8b       	std	Y+16, r25	; 0x10
    1f6e:	8f 87       	std	Y+15, r24	; 0x0f
    1f70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f72:	98 89       	ldd	r25, Y+16	; 0x10
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <LCD_displayCharacter+0x2d6>
    1f78:	98 8b       	std	Y+16, r25	; 0x10
    1f7a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	40 e0       	ldi	r20, 0x00	; 0
    1f82:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <GPIO_writePin>
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	a0 e8       	ldi	r26, 0x80	; 128
    1f8c:	bf e3       	ldi	r27, 0x3F	; 63
    1f8e:	8b 87       	std	Y+11, r24	; 0x0b
    1f90:	9c 87       	std	Y+12, r25	; 0x0c
    1f92:	ad 87       	std	Y+13, r26	; 0x0d
    1f94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	4a ef       	ldi	r20, 0xFA	; 250
    1fa4:	54 e4       	ldi	r21, 0x44	; 68
    1fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	8f 83       	std	Y+7, r24	; 0x07
    1fb0:	98 87       	std	Y+8, r25	; 0x08
    1fb2:	a9 87       	std	Y+9, r26	; 0x09
    1fb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb8:	78 85       	ldd	r23, Y+8	; 0x08
    1fba:	89 85       	ldd	r24, Y+9	; 0x09
    1fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e8       	ldi	r20, 0x80	; 128
    1fc4:	5f e3       	ldi	r21, 0x3F	; 63
    1fc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fca:	88 23       	and	r24, r24
    1fcc:	2c f4       	brge	.+10     	; 0x1fd8 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9e 83       	std	Y+6, r25	; 0x06
    1fd4:	8d 83       	std	Y+5, r24	; 0x05
    1fd6:	3f c0       	rjmp	.+126    	; 0x2056 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fda:	78 85       	ldd	r23, Y+8	; 0x08
    1fdc:	89 85       	ldd	r24, Y+9	; 0x09
    1fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	3f ef       	ldi	r19, 0xFF	; 255
    1fe4:	4f e7       	ldi	r20, 0x7F	; 127
    1fe6:	57 e4       	ldi	r21, 0x47	; 71
    1fe8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fec:	18 16       	cp	r1, r24
    1fee:	4c f5       	brge	.+82     	; 0x2042 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e2       	ldi	r20, 0x20	; 32
    1ffe:	51 e4       	ldi	r21, 0x41	; 65
    2000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	bc 01       	movw	r22, r24
    200a:	cd 01       	movw	r24, r26
    200c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	9e 83       	std	Y+6, r25	; 0x06
    2016:	8d 83       	std	Y+5, r24	; 0x05
    2018:	0f c0       	rjmp	.+30     	; 0x2038 <LCD_displayCharacter+0x39a>
    201a:	88 ec       	ldi	r24, 0xC8	; 200
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	9c 83       	std	Y+4, r25	; 0x04
    2020:	8b 83       	std	Y+3, r24	; 0x03
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	9c 81       	ldd	r25, Y+4	; 0x04
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <LCD_displayCharacter+0x388>
    202a:	9c 83       	std	Y+4, r25	; 0x04
    202c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202e:	8d 81       	ldd	r24, Y+5	; 0x05
    2030:	9e 81       	ldd	r25, Y+6	; 0x06
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	9e 83       	std	Y+6, r25	; 0x06
    2036:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2038:	8d 81       	ldd	r24, Y+5	; 0x05
    203a:	9e 81       	ldd	r25, Y+6	; 0x06
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	69 f7       	brne	.-38     	; 0x201a <LCD_displayCharacter+0x37c>
    2040:	14 c0       	rjmp	.+40     	; 0x206a <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2042:	6f 81       	ldd	r22, Y+7	; 0x07
    2044:	78 85       	ldd	r23, Y+8	; 0x08
    2046:	89 85       	ldd	r24, Y+9	; 0x09
    2048:	9a 85       	ldd	r25, Y+10	; 0x0a
    204a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	9e 83       	std	Y+6, r25	; 0x06
    2054:	8d 83       	std	Y+5, r24	; 0x05
    2056:	8d 81       	ldd	r24, Y+5	; 0x05
    2058:	9e 81       	ldd	r25, Y+6	; 0x06
    205a:	9a 83       	std	Y+2, r25	; 0x02
    205c:	89 83       	std	Y+1, r24	; 0x01
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	9a 81       	ldd	r25, Y+2	; 0x02
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_displayCharacter+0x3c4>
    2066:	9a 83       	std	Y+2, r25	; 0x02
    2068:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    206a:	e9 96       	adiw	r28, 0x39	; 57
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	00 d0       	rcall	.+0      	; 0x2082 <LCD_displayString+0x6>
    2082:	0f 92       	push	r0
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	9b 83       	std	Y+3, r25	; 0x03
    208a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    208c:	19 82       	std	Y+1, r1	; 0x01
    208e:	0e c0       	rjmp	.+28     	; 0x20ac <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	28 2f       	mov	r18, r24
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	9b 81       	ldd	r25, Y+3	; 0x03
    209a:	fc 01       	movw	r30, r24
    209c:	e2 0f       	add	r30, r18
    209e:	f3 1f       	adc	r31, r19
    20a0:	80 81       	ld	r24, Z
    20a2:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <LCD_displayCharacter>
		i++;
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	8f 5f       	subi	r24, 0xFF	; 255
    20aa:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	9b 81       	ldd	r25, Y+3	; 0x03
    20b6:	fc 01       	movw	r30, r24
    20b8:	e2 0f       	add	r30, r18
    20ba:	f3 1f       	adc	r31, r19
    20bc:	80 81       	ld	r24, Z
    20be:	88 23       	and	r24, r24
    20c0:	39 f7       	brne	.-50     	; 0x2090 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <LCD_moveCursor+0x6>
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <LCD_moveCursor+0x8>
    20d6:	0f 92       	push	r0
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	8a 83       	std	Y+2, r24	; 0x02
    20de:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	3d 83       	std	Y+5, r19	; 0x05
    20e8:	2c 83       	std	Y+4, r18	; 0x04
    20ea:	8c 81       	ldd	r24, Y+4	; 0x04
    20ec:	9d 81       	ldd	r25, Y+5	; 0x05
    20ee:	81 30       	cpi	r24, 0x01	; 1
    20f0:	91 05       	cpc	r25, r1
    20f2:	c1 f0       	breq	.+48     	; 0x2124 <LCD_moveCursor+0x56>
    20f4:	2c 81       	ldd	r18, Y+4	; 0x04
    20f6:	3d 81       	ldd	r19, Y+5	; 0x05
    20f8:	22 30       	cpi	r18, 0x02	; 2
    20fa:	31 05       	cpc	r19, r1
    20fc:	2c f4       	brge	.+10     	; 0x2108 <LCD_moveCursor+0x3a>
    20fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2100:	9d 81       	ldd	r25, Y+5	; 0x05
    2102:	00 97       	sbiw	r24, 0x00	; 0
    2104:	61 f0       	breq	.+24     	; 0x211e <LCD_moveCursor+0x50>
    2106:	19 c0       	rjmp	.+50     	; 0x213a <LCD_moveCursor+0x6c>
    2108:	2c 81       	ldd	r18, Y+4	; 0x04
    210a:	3d 81       	ldd	r19, Y+5	; 0x05
    210c:	22 30       	cpi	r18, 0x02	; 2
    210e:	31 05       	cpc	r19, r1
    2110:	69 f0       	breq	.+26     	; 0x212c <LCD_moveCursor+0x5e>
    2112:	8c 81       	ldd	r24, Y+4	; 0x04
    2114:	9d 81       	ldd	r25, Y+5	; 0x05
    2116:	83 30       	cpi	r24, 0x03	; 3
    2118:	91 05       	cpc	r25, r1
    211a:	61 f0       	breq	.+24     	; 0x2134 <LCD_moveCursor+0x66>
    211c:	0e c0       	rjmp	.+28     	; 0x213a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	89 83       	std	Y+1, r24	; 0x01
    2122:	0b c0       	rjmp	.+22     	; 0x213a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	80 5c       	subi	r24, 0xC0	; 192
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	07 c0       	rjmp	.+14     	; 0x213a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	80 5f       	subi	r24, 0xF0	; 240
    2130:	89 83       	std	Y+1, r24	; 0x01
    2132:	03 c0       	rjmp	.+6      	; 0x213a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	80 5b       	subi	r24, 0xB0	; 176
    2138:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	80 68       	ori	r24, 0x80	; 128
    213e:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
}
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	00 d0       	rcall	.+0      	; 0x2158 <LCD_displayStringRowColumn+0x6>
    2158:	00 d0       	rcall	.+0      	; 0x215a <LCD_displayStringRowColumn+0x8>
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	6a 83       	std	Y+2, r22	; 0x02
    2162:	5c 83       	std	Y+4, r21	; 0x04
    2164:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	6a 81       	ldd	r22, Y+2	; 0x02
    216a:	0e 94 67 10 	call	0x20ce	; 0x20ce <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	9c 81       	ldd	r25, Y+4	; 0x04
    2172:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
}
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret

00002184 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	62 97       	sbiw	r28, 0x12	; 18
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61
    2198:	9a 8b       	std	Y+18, r25	; 0x12
    219a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    219c:	89 89       	ldd	r24, Y+17	; 0x11
    219e:	9a 89       	ldd	r25, Y+18	; 0x12
    21a0:	9e 01       	movw	r18, r28
    21a2:	2f 5f       	subi	r18, 0xFF	; 255
    21a4:	3f 4f       	sbci	r19, 0xFF	; 255
    21a6:	b9 01       	movw	r22, r18
    21a8:	4a e0       	ldi	r20, 0x0A	; 10
    21aa:	50 e0       	ldi	r21, 0x00	; 0
    21ac:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <itoa>
   LCD_displayString(buff); /* Display the string */
    21b0:	ce 01       	movw	r24, r28
    21b2:	01 96       	adiw	r24, 0x01	; 1
    21b4:	0e 94 3e 10 	call	0x207c	; 0x207c <LCD_displayString>
}
    21b8:	62 96       	adiw	r28, 0x12	; 18
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	f8 94       	cli
    21be:	de bf       	out	0x3e, r29	; 62
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	cd bf       	out	0x3d, r28	; 61
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <LCD_sendCommand>
}
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret

000021de <GPIO_setupPinDirection>:
#include<avr/io.h>
#include"m_gpio.h"
#include"common_macros.h"

void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	00 d0       	rcall	.+0      	; 0x21e4 <GPIO_setupPinDirection+0x6>
    21e4:	00 d0       	rcall	.+0      	; 0x21e6 <GPIO_setupPinDirection+0x8>
    21e6:	0f 92       	push	r0
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
    21ec:	89 83       	std	Y+1, r24	; 0x01
    21ee:	6a 83       	std	Y+2, r22	; 0x02
    21f0:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num > 3) || (pin_num > 7) )
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	84 30       	cpi	r24, 0x04	; 4
    21f6:	08 f0       	brcs	.+2      	; 0x21fa <GPIO_setupPinDirection+0x1c>
    21f8:	e4 c0       	rjmp	.+456    	; 0x23c2 <GPIO_setupPinDirection+0x1e4>
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
    21fc:	88 30       	cpi	r24, 0x08	; 8
    21fe:	08 f0       	brcs	.+2      	; 0x2202 <GPIO_setupPinDirection+0x24>
    2200:	e0 c0       	rjmp	.+448    	; 0x23c2 <GPIO_setupPinDirection+0x1e4>
	{
		/*Do nothing*/
	}
	else
	{
		switch(port_num)
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	28 2f       	mov	r18, r24
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	3d 83       	std	Y+5, r19	; 0x05
    220a:	2c 83       	std	Y+4, r18	; 0x04
    220c:	8c 81       	ldd	r24, Y+4	; 0x04
    220e:	9d 81       	ldd	r25, Y+5	; 0x05
    2210:	81 30       	cpi	r24, 0x01	; 1
    2212:	91 05       	cpc	r25, r1
    2214:	09 f4       	brne	.+2      	; 0x2218 <GPIO_setupPinDirection+0x3a>
    2216:	47 c0       	rjmp	.+142    	; 0x22a6 <GPIO_setupPinDirection+0xc8>
    2218:	2c 81       	ldd	r18, Y+4	; 0x04
    221a:	3d 81       	ldd	r19, Y+5	; 0x05
    221c:	22 30       	cpi	r18, 0x02	; 2
    221e:	31 05       	cpc	r19, r1
    2220:	2c f4       	brge	.+10     	; 0x222c <GPIO_setupPinDirection+0x4e>
    2222:	8c 81       	ldd	r24, Y+4	; 0x04
    2224:	9d 81       	ldd	r25, Y+5	; 0x05
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	71 f0       	breq	.+28     	; 0x2246 <GPIO_setupPinDirection+0x68>
    222a:	cb c0       	rjmp	.+406    	; 0x23c2 <GPIO_setupPinDirection+0x1e4>
    222c:	2c 81       	ldd	r18, Y+4	; 0x04
    222e:	3d 81       	ldd	r19, Y+5	; 0x05
    2230:	22 30       	cpi	r18, 0x02	; 2
    2232:	31 05       	cpc	r19, r1
    2234:	09 f4       	brne	.+2      	; 0x2238 <GPIO_setupPinDirection+0x5a>
    2236:	67 c0       	rjmp	.+206    	; 0x2306 <GPIO_setupPinDirection+0x128>
    2238:	8c 81       	ldd	r24, Y+4	; 0x04
    223a:	9d 81       	ldd	r25, Y+5	; 0x05
    223c:	83 30       	cpi	r24, 0x03	; 3
    223e:	91 05       	cpc	r25, r1
    2240:	09 f4       	brne	.+2      	; 0x2244 <GPIO_setupPinDirection+0x66>
    2242:	91 c0       	rjmp	.+290    	; 0x2366 <GPIO_setupPinDirection+0x188>
    2244:	be c0       	rjmp	.+380    	; 0x23c2 <GPIO_setupPinDirection+0x1e4>
		{
		case PORTA_ID :
			if(direction == PIN_OUTPUT)
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	81 30       	cpi	r24, 0x01	; 1
    224a:	a1 f4       	brne	.+40     	; 0x2274 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    224c:	aa e3       	ldi	r26, 0x3A	; 58
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	ea e3       	ldi	r30, 0x3A	; 58
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	48 2f       	mov	r20, r24
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	02 2e       	mov	r0, r18
    2264:	02 c0       	rjmp	.+4      	; 0x226a <GPIO_setupPinDirection+0x8c>
    2266:	88 0f       	add	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	0a 94       	dec	r0
    226c:	e2 f7       	brpl	.-8      	; 0x2266 <GPIO_setupPinDirection+0x88>
    226e:	84 2b       	or	r24, r20
    2270:	8c 93       	st	X, r24
    2272:	a7 c0       	rjmp	.+334    	; 0x23c2 <GPIO_setupPinDirection+0x1e4>
			}
			else if (direction == PIN_INPUT)
    2274:	8b 81       	ldd	r24, Y+3	; 0x03
    2276:	88 23       	and	r24, r24
    2278:	09 f0       	breq	.+2      	; 0x227c <GPIO_setupPinDirection+0x9e>
    227a:	a3 c0       	rjmp	.+326    	; 0x23c2 <GPIO_setupPinDirection+0x1e4>
			{
				CLEAR_BIT(DDRA,pin_num);
    227c:	aa e3       	ldi	r26, 0x3A	; 58
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	ea e3       	ldi	r30, 0x3A	; 58
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	48 2f       	mov	r20, r24
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	28 2f       	mov	r18, r24
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	02 2e       	mov	r0, r18
    2294:	02 c0       	rjmp	.+4      	; 0x229a <GPIO_setupPinDirection+0xbc>
    2296:	88 0f       	add	r24, r24
    2298:	99 1f       	adc	r25, r25
    229a:	0a 94       	dec	r0
    229c:	e2 f7       	brpl	.-8      	; 0x2296 <GPIO_setupPinDirection+0xb8>
    229e:	80 95       	com	r24
    22a0:	84 23       	and	r24, r20
    22a2:	8c 93       	st	X, r24
    22a4:	8e c0       	rjmp	.+284    	; 0x23c2 <GPIO_setupPinDirection+0x1e4>
			}
			break;
		case PORTB_ID :
			if(direction == PIN_OUTPUT)
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	81 30       	cpi	r24, 0x01	; 1
    22aa:	a1 f4       	brne	.+40     	; 0x22d4 <GPIO_setupPinDirection+0xf6>
			{
				SET_BIT(DDRB,pin_num);
    22ac:	a7 e3       	ldi	r26, 0x37	; 55
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e7 e3       	ldi	r30, 0x37	; 55
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	48 2f       	mov	r20, r24
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	02 2e       	mov	r0, r18
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <GPIO_setupPinDirection+0xec>
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	0a 94       	dec	r0
    22cc:	e2 f7       	brpl	.-8      	; 0x22c6 <GPIO_setupPinDirection+0xe8>
    22ce:	84 2b       	or	r24, r20
    22d0:	8c 93       	st	X, r24
    22d2:	77 c0       	rjmp	.+238    	; 0x23c2 <GPIO_setupPinDirection+0x1e4>
			}
			else if (direction == PIN_INPUT)
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	88 23       	and	r24, r24
    22d8:	09 f0       	breq	.+2      	; 0x22dc <GPIO_setupPinDirection+0xfe>
    22da:	73 c0       	rjmp	.+230    	; 0x23c2 <GPIO_setupPinDirection+0x1e4>
			{
				CLEAR_BIT(DDRB,pin_num);
    22dc:	a7 e3       	ldi	r26, 0x37	; 55
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e7 e3       	ldi	r30, 0x37	; 55
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	48 2f       	mov	r20, r24
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	02 2e       	mov	r0, r18
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <GPIO_setupPinDirection+0x11c>
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	0a 94       	dec	r0
    22fc:	e2 f7       	brpl	.-8      	; 0x22f6 <GPIO_setupPinDirection+0x118>
    22fe:	80 95       	com	r24
    2300:	84 23       	and	r24, r20
    2302:	8c 93       	st	X, r24
    2304:	5e c0       	rjmp	.+188    	; 0x23c2 <GPIO_setupPinDirection+0x1e4>
			}
			break;
		case PORTC_ID :
			if(direction == PIN_OUTPUT)
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	81 30       	cpi	r24, 0x01	; 1
    230a:	a1 f4       	brne	.+40     	; 0x2334 <GPIO_setupPinDirection+0x156>
			{
				SET_BIT(DDRC,pin_num);
    230c:	a4 e3       	ldi	r26, 0x34	; 52
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	e4 e3       	ldi	r30, 0x34	; 52
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	48 2f       	mov	r20, r24
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	02 2e       	mov	r0, r18
    2324:	02 c0       	rjmp	.+4      	; 0x232a <GPIO_setupPinDirection+0x14c>
    2326:	88 0f       	add	r24, r24
    2328:	99 1f       	adc	r25, r25
    232a:	0a 94       	dec	r0
    232c:	e2 f7       	brpl	.-8      	; 0x2326 <GPIO_setupPinDirection+0x148>
    232e:	84 2b       	or	r24, r20
    2330:	8c 93       	st	X, r24
    2332:	47 c0       	rjmp	.+142    	; 0x23c2 <GPIO_setupPinDirection+0x1e4>
			}
			else if (direction == PIN_INPUT)
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	88 23       	and	r24, r24
    2338:	09 f0       	breq	.+2      	; 0x233c <GPIO_setupPinDirection+0x15e>
    233a:	43 c0       	rjmp	.+134    	; 0x23c2 <GPIO_setupPinDirection+0x1e4>
			{
				CLEAR_BIT(DDRC,pin_num);
    233c:	a4 e3       	ldi	r26, 0x34	; 52
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	e4 e3       	ldi	r30, 0x34	; 52
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	48 2f       	mov	r20, r24
    2348:	8a 81       	ldd	r24, Y+2	; 0x02
    234a:	28 2f       	mov	r18, r24
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	02 2e       	mov	r0, r18
    2354:	02 c0       	rjmp	.+4      	; 0x235a <GPIO_setupPinDirection+0x17c>
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	0a 94       	dec	r0
    235c:	e2 f7       	brpl	.-8      	; 0x2356 <GPIO_setupPinDirection+0x178>
    235e:	80 95       	com	r24
    2360:	84 23       	and	r24, r20
    2362:	8c 93       	st	X, r24
    2364:	2e c0       	rjmp	.+92     	; 0x23c2 <GPIO_setupPinDirection+0x1e4>
			}
			break;
		case PORTD_ID :
			if(direction == PIN_OUTPUT)
    2366:	8b 81       	ldd	r24, Y+3	; 0x03
    2368:	81 30       	cpi	r24, 0x01	; 1
    236a:	a1 f4       	brne	.+40     	; 0x2394 <GPIO_setupPinDirection+0x1b6>
			{
				SET_BIT(DDRD,pin_num);
    236c:	a1 e3       	ldi	r26, 0x31	; 49
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e1 e3       	ldi	r30, 0x31	; 49
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	48 2f       	mov	r20, r24
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	02 2e       	mov	r0, r18
    2384:	02 c0       	rjmp	.+4      	; 0x238a <GPIO_setupPinDirection+0x1ac>
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	0a 94       	dec	r0
    238c:	e2 f7       	brpl	.-8      	; 0x2386 <GPIO_setupPinDirection+0x1a8>
    238e:	84 2b       	or	r24, r20
    2390:	8c 93       	st	X, r24
    2392:	17 c0       	rjmp	.+46     	; 0x23c2 <GPIO_setupPinDirection+0x1e4>
			}
			else if (direction == PIN_INPUT)
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	88 23       	and	r24, r24
    2398:	a1 f4       	brne	.+40     	; 0x23c2 <GPIO_setupPinDirection+0x1e4>
			{
				CLEAR_BIT(DDRD,pin_num);
    239a:	a1 e3       	ldi	r26, 0x31	; 49
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e1 e3       	ldi	r30, 0x31	; 49
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	48 2f       	mov	r20, r24
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	02 2e       	mov	r0, r18
    23b2:	02 c0       	rjmp	.+4      	; 0x23b8 <GPIO_setupPinDirection+0x1da>
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	0a 94       	dec	r0
    23ba:	e2 f7       	brpl	.-8      	; 0x23b4 <GPIO_setupPinDirection+0x1d6>
    23bc:	80 95       	com	r24
    23be:	84 23       	and	r24, r20
    23c0:	8c 93       	st	X, r24
			}
			break;
		}

	}
}
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <GPIO_writePin>:



void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	00 d0       	rcall	.+0      	; 0x23d8 <GPIO_writePin+0x6>
    23d8:	00 d0       	rcall	.+0      	; 0x23da <GPIO_writePin+0x8>
    23da:	0f 92       	push	r0
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	89 83       	std	Y+1, r24	; 0x01
    23e2:	6a 83       	std	Y+2, r22	; 0x02
    23e4:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num > 3) || (pin_num > 7))
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	84 30       	cpi	r24, 0x04	; 4
    23ea:	08 f0       	brcs	.+2      	; 0x23ee <GPIO_writePin+0x1c>
    23ec:	e4 c0       	rjmp	.+456    	; 0x25b6 <GPIO_writePin+0x1e4>
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	88 30       	cpi	r24, 0x08	; 8
    23f2:	08 f0       	brcs	.+2      	; 0x23f6 <GPIO_writePin+0x24>
    23f4:	e0 c0       	rjmp	.+448    	; 0x25b6 <GPIO_writePin+0x1e4>
	{
		/*Do nothing*/
	}
	else
	{
		switch(port_num)
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	3d 83       	std	Y+5, r19	; 0x05
    23fe:	2c 83       	std	Y+4, r18	; 0x04
    2400:	8c 81       	ldd	r24, Y+4	; 0x04
    2402:	9d 81       	ldd	r25, Y+5	; 0x05
    2404:	81 30       	cpi	r24, 0x01	; 1
    2406:	91 05       	cpc	r25, r1
    2408:	09 f4       	brne	.+2      	; 0x240c <GPIO_writePin+0x3a>
    240a:	47 c0       	rjmp	.+142    	; 0x249a <GPIO_writePin+0xc8>
    240c:	2c 81       	ldd	r18, Y+4	; 0x04
    240e:	3d 81       	ldd	r19, Y+5	; 0x05
    2410:	22 30       	cpi	r18, 0x02	; 2
    2412:	31 05       	cpc	r19, r1
    2414:	2c f4       	brge	.+10     	; 0x2420 <GPIO_writePin+0x4e>
    2416:	8c 81       	ldd	r24, Y+4	; 0x04
    2418:	9d 81       	ldd	r25, Y+5	; 0x05
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	71 f0       	breq	.+28     	; 0x243a <GPIO_writePin+0x68>
    241e:	cb c0       	rjmp	.+406    	; 0x25b6 <GPIO_writePin+0x1e4>
    2420:	2c 81       	ldd	r18, Y+4	; 0x04
    2422:	3d 81       	ldd	r19, Y+5	; 0x05
    2424:	22 30       	cpi	r18, 0x02	; 2
    2426:	31 05       	cpc	r19, r1
    2428:	09 f4       	brne	.+2      	; 0x242c <GPIO_writePin+0x5a>
    242a:	67 c0       	rjmp	.+206    	; 0x24fa <GPIO_writePin+0x128>
    242c:	8c 81       	ldd	r24, Y+4	; 0x04
    242e:	9d 81       	ldd	r25, Y+5	; 0x05
    2430:	83 30       	cpi	r24, 0x03	; 3
    2432:	91 05       	cpc	r25, r1
    2434:	09 f4       	brne	.+2      	; 0x2438 <GPIO_writePin+0x66>
    2436:	91 c0       	rjmp	.+290    	; 0x255a <GPIO_writePin+0x188>
    2438:	be c0       	rjmp	.+380    	; 0x25b6 <GPIO_writePin+0x1e4>
		{
		case PORTA_ID :
			if(value == LOGIC_HIGH)
    243a:	8b 81       	ldd	r24, Y+3	; 0x03
    243c:	81 30       	cpi	r24, 0x01	; 1
    243e:	a1 f4       	brne	.+40     	; 0x2468 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2440:	ab e3       	ldi	r26, 0x3B	; 59
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	eb e3       	ldi	r30, 0x3B	; 59
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	48 2f       	mov	r20, r24
    244c:	8a 81       	ldd	r24, Y+2	; 0x02
    244e:	28 2f       	mov	r18, r24
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	02 2e       	mov	r0, r18
    2458:	02 c0       	rjmp	.+4      	; 0x245e <GPIO_writePin+0x8c>
    245a:	88 0f       	add	r24, r24
    245c:	99 1f       	adc	r25, r25
    245e:	0a 94       	dec	r0
    2460:	e2 f7       	brpl	.-8      	; 0x245a <GPIO_writePin+0x88>
    2462:	84 2b       	or	r24, r20
    2464:	8c 93       	st	X, r24
    2466:	a7 c0       	rjmp	.+334    	; 0x25b6 <GPIO_writePin+0x1e4>
			}
			else if (value == LOGIC_LOW)
    2468:	8b 81       	ldd	r24, Y+3	; 0x03
    246a:	88 23       	and	r24, r24
    246c:	09 f0       	breq	.+2      	; 0x2470 <GPIO_writePin+0x9e>
    246e:	a3 c0       	rjmp	.+326    	; 0x25b6 <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTA,pin_num);
    2470:	ab e3       	ldi	r26, 0x3B	; 59
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	eb e3       	ldi	r30, 0x3B	; 59
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	48 2f       	mov	r20, r24
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	28 2f       	mov	r18, r24
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	02 2e       	mov	r0, r18
    2488:	02 c0       	rjmp	.+4      	; 0x248e <GPIO_writePin+0xbc>
    248a:	88 0f       	add	r24, r24
    248c:	99 1f       	adc	r25, r25
    248e:	0a 94       	dec	r0
    2490:	e2 f7       	brpl	.-8      	; 0x248a <GPIO_writePin+0xb8>
    2492:	80 95       	com	r24
    2494:	84 23       	and	r24, r20
    2496:	8c 93       	st	X, r24
    2498:	8e c0       	rjmp	.+284    	; 0x25b6 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTB_ID :
			if(value == LOGIC_HIGH)
    249a:	8b 81       	ldd	r24, Y+3	; 0x03
    249c:	81 30       	cpi	r24, 0x01	; 1
    249e:	a1 f4       	brne	.+40     	; 0x24c8 <GPIO_writePin+0xf6>
			{
				SET_BIT(PORTB,pin_num);
    24a0:	a8 e3       	ldi	r26, 0x38	; 56
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	e8 e3       	ldi	r30, 0x38	; 56
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	48 2f       	mov	r20, r24
    24ac:	8a 81       	ldd	r24, Y+2	; 0x02
    24ae:	28 2f       	mov	r18, r24
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	02 2e       	mov	r0, r18
    24b8:	02 c0       	rjmp	.+4      	; 0x24be <GPIO_writePin+0xec>
    24ba:	88 0f       	add	r24, r24
    24bc:	99 1f       	adc	r25, r25
    24be:	0a 94       	dec	r0
    24c0:	e2 f7       	brpl	.-8      	; 0x24ba <GPIO_writePin+0xe8>
    24c2:	84 2b       	or	r24, r20
    24c4:	8c 93       	st	X, r24
    24c6:	77 c0       	rjmp	.+238    	; 0x25b6 <GPIO_writePin+0x1e4>
			}
			else if (value == LOGIC_LOW)
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	88 23       	and	r24, r24
    24cc:	09 f0       	breq	.+2      	; 0x24d0 <GPIO_writePin+0xfe>
    24ce:	73 c0       	rjmp	.+230    	; 0x25b6 <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTB,pin_num);
    24d0:	a8 e3       	ldi	r26, 0x38	; 56
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	e8 e3       	ldi	r30, 0x38	; 56
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	48 2f       	mov	r20, r24
    24dc:	8a 81       	ldd	r24, Y+2	; 0x02
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	02 2e       	mov	r0, r18
    24e8:	02 c0       	rjmp	.+4      	; 0x24ee <GPIO_writePin+0x11c>
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	0a 94       	dec	r0
    24f0:	e2 f7       	brpl	.-8      	; 0x24ea <GPIO_writePin+0x118>
    24f2:	80 95       	com	r24
    24f4:	84 23       	and	r24, r20
    24f6:	8c 93       	st	X, r24
    24f8:	5e c0       	rjmp	.+188    	; 0x25b6 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTC_ID :
			if(value == LOGIC_HIGH)
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	81 30       	cpi	r24, 0x01	; 1
    24fe:	a1 f4       	brne	.+40     	; 0x2528 <GPIO_writePin+0x156>
			{
				SET_BIT(PORTC,pin_num);
    2500:	a5 e3       	ldi	r26, 0x35	; 53
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	e5 e3       	ldi	r30, 0x35	; 53
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	48 2f       	mov	r20, r24
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
    250e:	28 2f       	mov	r18, r24
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	02 2e       	mov	r0, r18
    2518:	02 c0       	rjmp	.+4      	; 0x251e <GPIO_writePin+0x14c>
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	0a 94       	dec	r0
    2520:	e2 f7       	brpl	.-8      	; 0x251a <GPIO_writePin+0x148>
    2522:	84 2b       	or	r24, r20
    2524:	8c 93       	st	X, r24
    2526:	47 c0       	rjmp	.+142    	; 0x25b6 <GPIO_writePin+0x1e4>
			}
			else if (value == LOGIC_LOW)
    2528:	8b 81       	ldd	r24, Y+3	; 0x03
    252a:	88 23       	and	r24, r24
    252c:	09 f0       	breq	.+2      	; 0x2530 <GPIO_writePin+0x15e>
    252e:	43 c0       	rjmp	.+134    	; 0x25b6 <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTC,pin_num);
    2530:	a5 e3       	ldi	r26, 0x35	; 53
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	e5 e3       	ldi	r30, 0x35	; 53
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	48 2f       	mov	r20, r24
    253c:	8a 81       	ldd	r24, Y+2	; 0x02
    253e:	28 2f       	mov	r18, r24
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	02 2e       	mov	r0, r18
    2548:	02 c0       	rjmp	.+4      	; 0x254e <GPIO_writePin+0x17c>
    254a:	88 0f       	add	r24, r24
    254c:	99 1f       	adc	r25, r25
    254e:	0a 94       	dec	r0
    2550:	e2 f7       	brpl	.-8      	; 0x254a <GPIO_writePin+0x178>
    2552:	80 95       	com	r24
    2554:	84 23       	and	r24, r20
    2556:	8c 93       	st	X, r24
    2558:	2e c0       	rjmp	.+92     	; 0x25b6 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTD_ID :
			if(value == LOGIC_HIGH)
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	81 30       	cpi	r24, 0x01	; 1
    255e:	a1 f4       	brne	.+40     	; 0x2588 <GPIO_writePin+0x1b6>
			{
				SET_BIT(PORTD,pin_num);
    2560:	a2 e3       	ldi	r26, 0x32	; 50
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	e2 e3       	ldi	r30, 0x32	; 50
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	48 2f       	mov	r20, r24
    256c:	8a 81       	ldd	r24, Y+2	; 0x02
    256e:	28 2f       	mov	r18, r24
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	02 2e       	mov	r0, r18
    2578:	02 c0       	rjmp	.+4      	; 0x257e <GPIO_writePin+0x1ac>
    257a:	88 0f       	add	r24, r24
    257c:	99 1f       	adc	r25, r25
    257e:	0a 94       	dec	r0
    2580:	e2 f7       	brpl	.-8      	; 0x257a <GPIO_writePin+0x1a8>
    2582:	84 2b       	or	r24, r20
    2584:	8c 93       	st	X, r24
    2586:	17 c0       	rjmp	.+46     	; 0x25b6 <GPIO_writePin+0x1e4>
			}
			else if (value == LOGIC_LOW)
    2588:	8b 81       	ldd	r24, Y+3	; 0x03
    258a:	88 23       	and	r24, r24
    258c:	a1 f4       	brne	.+40     	; 0x25b6 <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTD,pin_num);
    258e:	a2 e3       	ldi	r26, 0x32	; 50
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	e2 e3       	ldi	r30, 0x32	; 50
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	48 2f       	mov	r20, r24
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	02 2e       	mov	r0, r18
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <GPIO_writePin+0x1da>
    25a8:	88 0f       	add	r24, r24
    25aa:	99 1f       	adc	r25, r25
    25ac:	0a 94       	dec	r0
    25ae:	e2 f7       	brpl	.-8      	; 0x25a8 <GPIO_writePin+0x1d6>
    25b0:	80 95       	com	r24
    25b2:	84 23       	and	r24, r20
    25b4:	8c 93       	st	X, r24
			}
			break;
		}

	}
}
    25b6:	0f 90       	pop	r0
    25b8:	0f 90       	pop	r0
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	08 95       	ret

000025c6 <GPIO_readPin>:


uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	00 d0       	rcall	.+0      	; 0x25cc <GPIO_readPin+0x6>
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <GPIO_readPin+0x8>
    25ce:	0f 92       	push	r0
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    25d4:	8a 83       	std	Y+2, r24	; 0x02
    25d6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 return_value = 0;
    25d8:	19 82       	std	Y+1, r1	; 0x01
	if((port_num > 3) || (pin_num > 7))
    25da:	8a 81       	ldd	r24, Y+2	; 0x02
    25dc:	84 30       	cpi	r24, 0x04	; 4
    25de:	18 f4       	brcc	.+6      	; 0x25e6 <GPIO_readPin+0x20>
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	88 30       	cpi	r24, 0x08	; 8
    25e4:	10 f0       	brcs	.+4      	; 0x25ea <GPIO_readPin+0x24>
	{
		return_value = LOGIC_LOW;
    25e6:	19 82       	std	Y+1, r1	; 0x01
    25e8:	80 c0       	rjmp	.+256    	; 0x26ea <GPIO_readPin+0x124>
	}
	else
	{
		switch(port_num)
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	3d 83       	std	Y+5, r19	; 0x05
    25f2:	2c 83       	std	Y+4, r18	; 0x04
    25f4:	4c 81       	ldd	r20, Y+4	; 0x04
    25f6:	5d 81       	ldd	r21, Y+5	; 0x05
    25f8:	41 30       	cpi	r20, 0x01	; 1
    25fa:	51 05       	cpc	r21, r1
    25fc:	79 f1       	breq	.+94     	; 0x265c <GPIO_readPin+0x96>
    25fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2600:	9d 81       	ldd	r25, Y+5	; 0x05
    2602:	82 30       	cpi	r24, 0x02	; 2
    2604:	91 05       	cpc	r25, r1
    2606:	34 f4       	brge	.+12     	; 0x2614 <GPIO_readPin+0x4e>
    2608:	2c 81       	ldd	r18, Y+4	; 0x04
    260a:	3d 81       	ldd	r19, Y+5	; 0x05
    260c:	21 15       	cp	r18, r1
    260e:	31 05       	cpc	r19, r1
    2610:	69 f0       	breq	.+26     	; 0x262c <GPIO_readPin+0x66>
    2612:	6b c0       	rjmp	.+214    	; 0x26ea <GPIO_readPin+0x124>
    2614:	4c 81       	ldd	r20, Y+4	; 0x04
    2616:	5d 81       	ldd	r21, Y+5	; 0x05
    2618:	42 30       	cpi	r20, 0x02	; 2
    261a:	51 05       	cpc	r21, r1
    261c:	b9 f1       	breq	.+110    	; 0x268c <GPIO_readPin+0xc6>
    261e:	8c 81       	ldd	r24, Y+4	; 0x04
    2620:	9d 81       	ldd	r25, Y+5	; 0x05
    2622:	83 30       	cpi	r24, 0x03	; 3
    2624:	91 05       	cpc	r25, r1
    2626:	09 f4       	brne	.+2      	; 0x262a <GPIO_readPin+0x64>
    2628:	49 c0       	rjmp	.+146    	; 0x26bc <GPIO_readPin+0xf6>
    262a:	5f c0       	rjmp	.+190    	; 0x26ea <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    262c:	e9 e3       	ldi	r30, 0x39	; 57
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	28 2f       	mov	r18, r24
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	88 2f       	mov	r24, r24
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	a9 01       	movw	r20, r18
    263e:	02 c0       	rjmp	.+4      	; 0x2644 <GPIO_readPin+0x7e>
    2640:	55 95       	asr	r21
    2642:	47 95       	ror	r20
    2644:	8a 95       	dec	r24
    2646:	e2 f7       	brpl	.-8      	; 0x2640 <GPIO_readPin+0x7a>
    2648:	ca 01       	movw	r24, r20
    264a:	81 70       	andi	r24, 0x01	; 1
    264c:	90 70       	andi	r25, 0x00	; 0
    264e:	88 23       	and	r24, r24
    2650:	19 f0       	breq	.+6      	; 0x2658 <GPIO_readPin+0x92>
			{
				return_value = LOGIC_HIGH;
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	49 c0       	rjmp	.+146    	; 0x26ea <GPIO_readPin+0x124>
			}
			else
			{
				return_value = LOGIC_LOW;
    2658:	19 82       	std	Y+1, r1	; 0x01
    265a:	47 c0       	rjmp	.+142    	; 0x26ea <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    265c:	e6 e3       	ldi	r30, 0x36	; 54
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	28 2f       	mov	r18, r24
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	88 2f       	mov	r24, r24
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	a9 01       	movw	r20, r18
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <GPIO_readPin+0xae>
    2670:	55 95       	asr	r21
    2672:	47 95       	ror	r20
    2674:	8a 95       	dec	r24
    2676:	e2 f7       	brpl	.-8      	; 0x2670 <GPIO_readPin+0xaa>
    2678:	ca 01       	movw	r24, r20
    267a:	81 70       	andi	r24, 0x01	; 1
    267c:	90 70       	andi	r25, 0x00	; 0
    267e:	88 23       	and	r24, r24
    2680:	19 f0       	breq	.+6      	; 0x2688 <GPIO_readPin+0xc2>
			{
				return_value = LOGIC_HIGH;
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	89 83       	std	Y+1, r24	; 0x01
    2686:	31 c0       	rjmp	.+98     	; 0x26ea <GPIO_readPin+0x124>
			}
			else
			{
				return_value = LOGIC_LOW;
    2688:	19 82       	std	Y+1, r1	; 0x01
    268a:	2f c0       	rjmp	.+94     	; 0x26ea <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    268c:	e3 e3       	ldi	r30, 0x33	; 51
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	28 2f       	mov	r18, r24
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	88 2f       	mov	r24, r24
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	a9 01       	movw	r20, r18
    269e:	02 c0       	rjmp	.+4      	; 0x26a4 <GPIO_readPin+0xde>
    26a0:	55 95       	asr	r21
    26a2:	47 95       	ror	r20
    26a4:	8a 95       	dec	r24
    26a6:	e2 f7       	brpl	.-8      	; 0x26a0 <GPIO_readPin+0xda>
    26a8:	ca 01       	movw	r24, r20
    26aa:	81 70       	andi	r24, 0x01	; 1
    26ac:	90 70       	andi	r25, 0x00	; 0
    26ae:	88 23       	and	r24, r24
    26b0:	19 f0       	breq	.+6      	; 0x26b8 <GPIO_readPin+0xf2>
			{
				return_value = LOGIC_HIGH;
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	89 83       	std	Y+1, r24	; 0x01
    26b6:	19 c0       	rjmp	.+50     	; 0x26ea <GPIO_readPin+0x124>
			}
			else
			{
				return_value = LOGIC_LOW;
    26b8:	19 82       	std	Y+1, r1	; 0x01
    26ba:	17 c0       	rjmp	.+46     	; 0x26ea <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    26bc:	e0 e3       	ldi	r30, 0x30	; 48
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	28 2f       	mov	r18, r24
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	8b 81       	ldd	r24, Y+3	; 0x03
    26c8:	88 2f       	mov	r24, r24
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	a9 01       	movw	r20, r18
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <GPIO_readPin+0x10e>
    26d0:	55 95       	asr	r21
    26d2:	47 95       	ror	r20
    26d4:	8a 95       	dec	r24
    26d6:	e2 f7       	brpl	.-8      	; 0x26d0 <GPIO_readPin+0x10a>
    26d8:	ca 01       	movw	r24, r20
    26da:	81 70       	andi	r24, 0x01	; 1
    26dc:	90 70       	andi	r25, 0x00	; 0
    26de:	88 23       	and	r24, r24
    26e0:	19 f0       	breq	.+6      	; 0x26e8 <GPIO_readPin+0x122>
			{
				return_value = LOGIC_HIGH;
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	89 83       	std	Y+1, r24	; 0x01
    26e6:	01 c0       	rjmp	.+2      	; 0x26ea <GPIO_readPin+0x124>
			}
			else
			{
				return_value = LOGIC_LOW;
    26e8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}

	}
	return return_value;
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    26ec:	0f 90       	pop	r0
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	08 95       	ret

000026fc <GPIO_setupPortDirection>:


void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    26fc:	df 93       	push	r29
    26fe:	cf 93       	push	r28
    2700:	00 d0       	rcall	.+0      	; 0x2702 <GPIO_setupPortDirection+0x6>
    2702:	00 d0       	rcall	.+0      	; 0x2704 <GPIO_setupPortDirection+0x8>
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num > 3) )
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	84 30       	cpi	r24, 0x04	; 4
    2710:	90 f5       	brcc	.+100    	; 0x2776 <GPIO_setupPortDirection+0x7a>
	{
		/*Do nothing*/
	}
	else
	{
		switch(port_num)
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	28 2f       	mov	r18, r24
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	3c 83       	std	Y+4, r19	; 0x04
    271a:	2b 83       	std	Y+3, r18	; 0x03
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	9c 81       	ldd	r25, Y+4	; 0x04
    2720:	81 30       	cpi	r24, 0x01	; 1
    2722:	91 05       	cpc	r25, r1
    2724:	d1 f0       	breq	.+52     	; 0x275a <GPIO_setupPortDirection+0x5e>
    2726:	2b 81       	ldd	r18, Y+3	; 0x03
    2728:	3c 81       	ldd	r19, Y+4	; 0x04
    272a:	22 30       	cpi	r18, 0x02	; 2
    272c:	31 05       	cpc	r19, r1
    272e:	2c f4       	brge	.+10     	; 0x273a <GPIO_setupPortDirection+0x3e>
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	9c 81       	ldd	r25, Y+4	; 0x04
    2734:	00 97       	sbiw	r24, 0x00	; 0
    2736:	61 f0       	breq	.+24     	; 0x2750 <GPIO_setupPortDirection+0x54>
    2738:	1e c0       	rjmp	.+60     	; 0x2776 <GPIO_setupPortDirection+0x7a>
    273a:	2b 81       	ldd	r18, Y+3	; 0x03
    273c:	3c 81       	ldd	r19, Y+4	; 0x04
    273e:	22 30       	cpi	r18, 0x02	; 2
    2740:	31 05       	cpc	r19, r1
    2742:	81 f0       	breq	.+32     	; 0x2764 <GPIO_setupPortDirection+0x68>
    2744:	8b 81       	ldd	r24, Y+3	; 0x03
    2746:	9c 81       	ldd	r25, Y+4	; 0x04
    2748:	83 30       	cpi	r24, 0x03	; 3
    274a:	91 05       	cpc	r25, r1
    274c:	81 f0       	breq	.+32     	; 0x276e <GPIO_setupPortDirection+0x72>
    274e:	13 c0       	rjmp	.+38     	; 0x2776 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2750:	ea e3       	ldi	r30, 0x3A	; 58
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	8a 81       	ldd	r24, Y+2	; 0x02
    2756:	80 83       	st	Z, r24
    2758:	0e c0       	rjmp	.+28     	; 0x2776 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    275a:	e7 e3       	ldi	r30, 0x37	; 55
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	80 83       	st	Z, r24
    2762:	09 c0       	rjmp	.+18     	; 0x2776 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2764:	e4 e3       	ldi	r30, 0x34	; 52
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
    276a:	80 83       	st	Z, r24
    276c:	04 c0       	rjmp	.+8      	; 0x2776 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    276e:	e1 e3       	ldi	r30, 0x31	; 49
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	8a 81       	ldd	r24, Y+2	; 0x02
    2774:	80 83       	st	Z, r24
			break;
		}
	}
}
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
    277e:	cf 91       	pop	r28
    2780:	df 91       	pop	r29
    2782:	08 95       	ret

00002784 <GPIO_writePort>:


void GPIO_writePort(uint8 port_num, uint8 value)
{
    2784:	df 93       	push	r29
    2786:	cf 93       	push	r28
    2788:	00 d0       	rcall	.+0      	; 0x278a <GPIO_writePort+0x6>
    278a:	00 d0       	rcall	.+0      	; 0x278c <GPIO_writePort+0x8>
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	89 83       	std	Y+1, r24	; 0x01
    2792:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > 3)
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	84 30       	cpi	r24, 0x04	; 4
    2798:	90 f5       	brcc	.+100    	; 0x27fe <GPIO_writePort+0x7a>
	{

	}
	else
	{
		switch(port_num)
    279a:	89 81       	ldd	r24, Y+1	; 0x01
    279c:	28 2f       	mov	r18, r24
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	3c 83       	std	Y+4, r19	; 0x04
    27a2:	2b 83       	std	Y+3, r18	; 0x03
    27a4:	8b 81       	ldd	r24, Y+3	; 0x03
    27a6:	9c 81       	ldd	r25, Y+4	; 0x04
    27a8:	81 30       	cpi	r24, 0x01	; 1
    27aa:	91 05       	cpc	r25, r1
    27ac:	d1 f0       	breq	.+52     	; 0x27e2 <GPIO_writePort+0x5e>
    27ae:	2b 81       	ldd	r18, Y+3	; 0x03
    27b0:	3c 81       	ldd	r19, Y+4	; 0x04
    27b2:	22 30       	cpi	r18, 0x02	; 2
    27b4:	31 05       	cpc	r19, r1
    27b6:	2c f4       	brge	.+10     	; 0x27c2 <GPIO_writePort+0x3e>
    27b8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ba:	9c 81       	ldd	r25, Y+4	; 0x04
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	61 f0       	breq	.+24     	; 0x27d8 <GPIO_writePort+0x54>
    27c0:	1e c0       	rjmp	.+60     	; 0x27fe <GPIO_writePort+0x7a>
    27c2:	2b 81       	ldd	r18, Y+3	; 0x03
    27c4:	3c 81       	ldd	r19, Y+4	; 0x04
    27c6:	22 30       	cpi	r18, 0x02	; 2
    27c8:	31 05       	cpc	r19, r1
    27ca:	81 f0       	breq	.+32     	; 0x27ec <GPIO_writePort+0x68>
    27cc:	8b 81       	ldd	r24, Y+3	; 0x03
    27ce:	9c 81       	ldd	r25, Y+4	; 0x04
    27d0:	83 30       	cpi	r24, 0x03	; 3
    27d2:	91 05       	cpc	r25, r1
    27d4:	81 f0       	breq	.+32     	; 0x27f6 <GPIO_writePort+0x72>
    27d6:	13 c0       	rjmp	.+38     	; 0x27fe <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    27d8:	eb e3       	ldi	r30, 0x3B	; 59
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	8a 81       	ldd	r24, Y+2	; 0x02
    27de:	80 83       	st	Z, r24
    27e0:	0e c0       	rjmp	.+28     	; 0x27fe <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    27e2:	e8 e3       	ldi	r30, 0x38	; 56
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	8a 81       	ldd	r24, Y+2	; 0x02
    27e8:	80 83       	st	Z, r24
    27ea:	09 c0       	rjmp	.+18     	; 0x27fe <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    27ec:	e5 e3       	ldi	r30, 0x35	; 53
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	8a 81       	ldd	r24, Y+2	; 0x02
    27f2:	80 83       	st	Z, r24
    27f4:	04 c0       	rjmp	.+8      	; 0x27fe <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    27f6:	e2 e3       	ldi	r30, 0x32	; 50
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	8a 81       	ldd	r24, Y+2	; 0x02
    27fc:	80 83       	st	Z, r24
			break;
		}
	}
}
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	08 95       	ret

0000280c <GPIO_readPort>:



uint8 GPIO_readPort(uint8 port_num)
{
    280c:	df 93       	push	r29
    280e:	cf 93       	push	r28
    2810:	00 d0       	rcall	.+0      	; 0x2812 <GPIO_readPort+0x6>
    2812:	00 d0       	rcall	.+0      	; 0x2814 <GPIO_readPort+0x8>
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	8a 83       	std	Y+2, r24	; 0x02
	uint8 return_value = 0;
    281a:	19 82       	std	Y+1, r1	; 0x01
	if(port_num > 3)
    281c:	8a 81       	ldd	r24, Y+2	; 0x02
    281e:	84 30       	cpi	r24, 0x04	; 4
    2820:	10 f0       	brcs	.+4      	; 0x2826 <GPIO_readPort+0x1a>
	{
		return_value = 0;
    2822:	19 82       	std	Y+1, r1	; 0x01
    2824:	32 c0       	rjmp	.+100    	; 0x288a <GPIO_readPort+0x7e>
	}
	else
	{
		switch(port_num)
    2826:	8a 81       	ldd	r24, Y+2	; 0x02
    2828:	28 2f       	mov	r18, r24
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	3c 83       	std	Y+4, r19	; 0x04
    282e:	2b 83       	std	Y+3, r18	; 0x03
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	9c 81       	ldd	r25, Y+4	; 0x04
    2834:	81 30       	cpi	r24, 0x01	; 1
    2836:	91 05       	cpc	r25, r1
    2838:	d1 f0       	breq	.+52     	; 0x286e <GPIO_readPort+0x62>
    283a:	2b 81       	ldd	r18, Y+3	; 0x03
    283c:	3c 81       	ldd	r19, Y+4	; 0x04
    283e:	22 30       	cpi	r18, 0x02	; 2
    2840:	31 05       	cpc	r19, r1
    2842:	2c f4       	brge	.+10     	; 0x284e <GPIO_readPort+0x42>
    2844:	8b 81       	ldd	r24, Y+3	; 0x03
    2846:	9c 81       	ldd	r25, Y+4	; 0x04
    2848:	00 97       	sbiw	r24, 0x00	; 0
    284a:	61 f0       	breq	.+24     	; 0x2864 <GPIO_readPort+0x58>
    284c:	1e c0       	rjmp	.+60     	; 0x288a <GPIO_readPort+0x7e>
    284e:	2b 81       	ldd	r18, Y+3	; 0x03
    2850:	3c 81       	ldd	r19, Y+4	; 0x04
    2852:	22 30       	cpi	r18, 0x02	; 2
    2854:	31 05       	cpc	r19, r1
    2856:	81 f0       	breq	.+32     	; 0x2878 <GPIO_readPort+0x6c>
    2858:	8b 81       	ldd	r24, Y+3	; 0x03
    285a:	9c 81       	ldd	r25, Y+4	; 0x04
    285c:	83 30       	cpi	r24, 0x03	; 3
    285e:	91 05       	cpc	r25, r1
    2860:	81 f0       	breq	.+32     	; 0x2882 <GPIO_readPort+0x76>
    2862:	13 c0       	rjmp	.+38     	; 0x288a <GPIO_readPort+0x7e>
		{
		case PORTA_ID:
			return_value = PINA;
    2864:	e9 e3       	ldi	r30, 0x39	; 57
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	89 83       	std	Y+1, r24	; 0x01
    286c:	0e c0       	rjmp	.+28     	; 0x288a <GPIO_readPort+0x7e>
			break;
		case PORTB_ID:
			return_value = PINB;
    286e:	e6 e3       	ldi	r30, 0x36	; 54
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	89 83       	std	Y+1, r24	; 0x01
    2876:	09 c0       	rjmp	.+18     	; 0x288a <GPIO_readPort+0x7e>
			break;
		case PORTC_ID:
			return_value = PINC;
    2878:	e3 e3       	ldi	r30, 0x33	; 51
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	89 83       	std	Y+1, r24	; 0x01
    2880:	04 c0       	rjmp	.+8      	; 0x288a <GPIO_readPort+0x7e>
			break;
		case PORTD_ID:
			return_value = PIND;
    2882:	e0 e3       	ldi	r30, 0x30	; 48
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return return_value;
    288a:	89 81       	ldd	r24, Y+1	; 0x01
}
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	cf 91       	pop	r28
    2896:	df 91       	pop	r29
    2898:	08 95       	ret

0000289a <UART_init>:
#include<avr/io.h>
#include"uart_m.h"
#include"common_macros.h"

void UART_init( uint32 f_cpu ,UART_Configuration * config_ptr)
{
    289a:	df 93       	push	r29
    289c:	cf 93       	push	r28
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
    28a2:	28 97       	sbiw	r28, 0x08	; 8
    28a4:	0f b6       	in	r0, 0x3f	; 63
    28a6:	f8 94       	cli
    28a8:	de bf       	out	0x3e, r29	; 62
    28aa:	0f be       	out	0x3f, r0	; 63
    28ac:	cd bf       	out	0x3d, r28	; 61
    28ae:	6b 83       	std	Y+3, r22	; 0x03
    28b0:	7c 83       	std	Y+4, r23	; 0x04
    28b2:	8d 83       	std	Y+5, r24	; 0x05
    28b4:	9e 83       	std	Y+6, r25	; 0x06
    28b6:	58 87       	std	Y+8, r21	; 0x08
    28b8:	4f 83       	std	Y+7, r20	; 0x07
	SET_BIT(UCSRA,U2X);
    28ba:	ab e2       	ldi	r26, 0x2B	; 43
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	eb e2       	ldi	r30, 0x2B	; 43
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	82 60       	ori	r24, 0x02	; 2
    28c6:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
    28c8:	aa e2       	ldi	r26, 0x2A	; 42
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	ea e2       	ldi	r30, 0x2A	; 42
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	80 81       	ld	r24, Z
    28d2:	80 61       	ori	r24, 0x10	; 16
    28d4:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    28d6:	aa e2       	ldi	r26, 0x2A	; 42
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	ea e2       	ldi	r30, 0x2A	; 42
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	88 60       	ori	r24, 0x08	; 8
    28e2:	8c 93       	st	X, r24
	SET_BIT(UCSRC,URSEL);
    28e4:	a0 e4       	ldi	r26, 0x40	; 64
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	e0 e4       	ldi	r30, 0x40	; 64
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	80 68       	ori	r24, 0x80	; 128
    28f0:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0XCF) | ((config_ptr->parity) << 4);
    28f2:	a0 e4       	ldi	r26, 0x40	; 64
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	e0 e4       	ldi	r30, 0x40	; 64
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	28 2f       	mov	r18, r24
    28fe:	2f 7c       	andi	r18, 0xCF	; 207
    2900:	ef 81       	ldd	r30, Y+7	; 0x07
    2902:	f8 85       	ldd	r31, Y+8	; 0x08
    2904:	80 81       	ld	r24, Z
    2906:	88 2f       	mov	r24, r24
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	82 95       	swap	r24
    290c:	92 95       	swap	r25
    290e:	90 7f       	andi	r25, 0xF0	; 240
    2910:	98 27       	eor	r25, r24
    2912:	80 7f       	andi	r24, 0xF0	; 240
    2914:	98 27       	eor	r25, r24
    2916:	82 2b       	or	r24, r18
    2918:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XF7) | ((config_ptr->stop_bit) << 3);
    291a:	a0 e4       	ldi	r26, 0x40	; 64
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	e0 e4       	ldi	r30, 0x40	; 64
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	28 2f       	mov	r18, r24
    2926:	27 7f       	andi	r18, 0xF7	; 247
    2928:	ef 81       	ldd	r30, Y+7	; 0x07
    292a:	f8 85       	ldd	r31, Y+8	; 0x08
    292c:	81 81       	ldd	r24, Z+1	; 0x01
    292e:	88 2f       	mov	r24, r24
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	88 0f       	add	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	88 0f       	add	r24, r24
    2938:	99 1f       	adc	r25, r25
    293a:	88 0f       	add	r24, r24
    293c:	99 1f       	adc	r25, r25
    293e:	82 2b       	or	r24, r18
    2940:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XFC) | ((config_ptr->no_digit) << 1);
    2942:	a0 e4       	ldi	r26, 0x40	; 64
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	e0 e4       	ldi	r30, 0x40	; 64
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	28 2f       	mov	r18, r24
    294e:	2c 7f       	andi	r18, 0xFC	; 252
    2950:	ef 81       	ldd	r30, Y+7	; 0x07
    2952:	f8 85       	ldd	r31, Y+8	; 0x08
    2954:	82 81       	ldd	r24, Z+2	; 0x02
    2956:	88 2f       	mov	r24, r24
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	82 2b       	or	r24, r18
    2960:	8c 93       	st	X, r24

	uint16 ubrr_value = (uint16)(((f_cpu / (config_ptr->baud_rate * 8UL))) - 1);
    2962:	ef 81       	ldd	r30, Y+7	; 0x07
    2964:	f8 85       	ldd	r31, Y+8	; 0x08
    2966:	83 81       	ldd	r24, Z+3	; 0x03
    2968:	94 81       	ldd	r25, Z+4	; 0x04
    296a:	cc 01       	movw	r24, r24
    296c:	a0 e0       	ldi	r26, 0x00	; 0
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	88 0f       	add	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	aa 1f       	adc	r26, r26
    2976:	bb 1f       	adc	r27, r27
    2978:	88 0f       	add	r24, r24
    297a:	99 1f       	adc	r25, r25
    297c:	aa 1f       	adc	r26, r26
    297e:	bb 1f       	adc	r27, r27
    2980:	88 0f       	add	r24, r24
    2982:	99 1f       	adc	r25, r25
    2984:	aa 1f       	adc	r26, r26
    2986:	bb 1f       	adc	r27, r27
    2988:	9c 01       	movw	r18, r24
    298a:	ad 01       	movw	r20, r26
    298c:	8b 81       	ldd	r24, Y+3	; 0x03
    298e:	9c 81       	ldd	r25, Y+4	; 0x04
    2990:	ad 81       	ldd	r26, Y+5	; 0x05
    2992:	be 81       	ldd	r27, Y+6	; 0x06
    2994:	bc 01       	movw	r22, r24
    2996:	cd 01       	movw	r24, r26
    2998:	0e 94 79 15 	call	0x2af2	; 0x2af2 <__udivmodsi4>
    299c:	da 01       	movw	r26, r20
    299e:	c9 01       	movw	r24, r18
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	9a 83       	std	Y+2, r25	; 0x02
    29a4:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=ubrr_value;
    29a6:	e9 e2       	ldi	r30, 0x29	; 41
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	80 83       	st	Z, r24
	UBRRH=ubrr_value>>8;
    29ae:	e0 e4       	ldi	r30, 0x40	; 64
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	9a 81       	ldd	r25, Y+2	; 0x02
    29b6:	89 2f       	mov	r24, r25
    29b8:	99 27       	eor	r25, r25
    29ba:	80 83       	st	Z, r24
}
    29bc:	28 96       	adiw	r28, 0x08	; 8
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	cd bf       	out	0x3d, r28	; 61
    29c8:	cf 91       	pop	r28
    29ca:	df 91       	pop	r29
    29cc:	08 95       	ret

000029ce <UART_sendByte>:

void UART_sendByte(uint8 data)
{
    29ce:	df 93       	push	r29
    29d0:	cf 93       	push	r28
    29d2:	0f 92       	push	r0
    29d4:	cd b7       	in	r28, 0x3d	; 61
    29d6:	de b7       	in	r29, 0x3e	; 62
    29d8:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    29da:	eb e2       	ldi	r30, 0x2B	; 43
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
    29e0:	88 2f       	mov	r24, r24
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	80 72       	andi	r24, 0x20	; 32
    29e6:	90 70       	andi	r25, 0x00	; 0
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	b9 f3       	breq	.-18     	; 0x29da <UART_sendByte+0xc>
	UDR = data;
    29ec:	ec e2       	ldi	r30, 0x2C	; 44
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	80 83       	st	Z, r24
	/* another method**
	 * UDR = data;
	 * while(CLEAR_BIT(UCSRA,TXC)){}
	 */
}
    29f4:	0f 90       	pop	r0
    29f6:	cf 91       	pop	r28
    29f8:	df 91       	pop	r29
    29fa:	08 95       	ret

000029fc <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    29fc:	df 93       	push	r29
    29fe:	cf 93       	push	r28
    2a00:	cd b7       	in	r28, 0x3d	; 61
    2a02:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2a04:	eb e2       	ldi	r30, 0x2B	; 43
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	88 23       	and	r24, r24
    2a0c:	dc f7       	brge	.-10     	; 0x2a04 <UART_recieveByte+0x8>
	return UDR;
    2a0e:	ec e2       	ldi	r30, 0x2C	; 44
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
}
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	08 95       	ret

00002a1a <UART_sendString>:

void UART_sendString(uint8 * data)
{
    2a1a:	df 93       	push	r29
    2a1c:	cf 93       	push	r28
    2a1e:	00 d0       	rcall	.+0      	; 0x2a20 <UART_sendString+0x6>
    2a20:	0f 92       	push	r0
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
    2a26:	9b 83       	std	Y+3, r25	; 0x03
    2a28:	8a 83       	std	Y+2, r24	; 0x02
	uint8  i =0 ;
    2a2a:	19 82       	std	Y+1, r1	; 0x01
    2a2c:	0e c0       	rjmp	.+28     	; 0x2a4a <UART_sendString+0x30>
	while(data[i] != '\0')
	{
		UART_sendByte(data[i]);
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	28 2f       	mov	r18, r24
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	8a 81       	ldd	r24, Y+2	; 0x02
    2a36:	9b 81       	ldd	r25, Y+3	; 0x03
    2a38:	fc 01       	movw	r30, r24
    2a3a:	e2 0f       	add	r30, r18
    2a3c:	f3 1f       	adc	r31, r19
    2a3e:	80 81       	ld	r24, Z
    2a40:	0e 94 e7 14 	call	0x29ce	; 0x29ce <UART_sendByte>
		i++;
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	8f 5f       	subi	r24, 0xFF	; 255
    2a48:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(uint8 * data)
{
	uint8  i =0 ;
	while(data[i] != '\0')
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
    2a4c:	28 2f       	mov	r18, r24
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	8a 81       	ldd	r24, Y+2	; 0x02
    2a52:	9b 81       	ldd	r25, Y+3	; 0x03
    2a54:	fc 01       	movw	r30, r24
    2a56:	e2 0f       	add	r30, r18
    2a58:	f3 1f       	adc	r31, r19
    2a5a:	80 81       	ld	r24, Z
    2a5c:	88 23       	and	r24, r24
    2a5e:	39 f7       	brne	.-50     	; 0x2a2e <UART_sendString+0x14>
	{
		UART_sendByte(data[i]);
		i++;
	}
}
    2a60:	0f 90       	pop	r0
    2a62:	0f 90       	pop	r0
    2a64:	0f 90       	pop	r0
    2a66:	cf 91       	pop	r28
    2a68:	df 91       	pop	r29
    2a6a:	08 95       	ret

00002a6c <UART_recieveString>:

void UART_recieveString(uint8 * recieve_arr)
{
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	00 d0       	rcall	.+0      	; 0x2a76 <UART_recieveString+0xa>
    2a76:	0f 92       	push	r0
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
    2a7c:	9b 83       	std	Y+3, r25	; 0x03
    2a7e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a80:	19 82       	std	Y+1, r1	; 0x01
	recieve_arr[i] = UART_recieveByte();
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	28 2f       	mov	r18, r24
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a8c:	8c 01       	movw	r16, r24
    2a8e:	02 0f       	add	r16, r18
    2a90:	13 1f       	adc	r17, r19
    2a92:	0e 94 fe 14 	call	0x29fc	; 0x29fc <UART_recieveByte>
    2a96:	f8 01       	movw	r30, r16
    2a98:	80 83       	st	Z, r24
    2a9a:	0f c0       	rjmp	.+30     	; 0x2aba <UART_recieveString+0x4e>
	while(recieve_arr[i] != '$')
	{
		i++;
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	8f 5f       	subi	r24, 0xFF	; 255
    2aa0:	89 83       	std	Y+1, r24	; 0x01
		recieve_arr[i] = UART_recieveByte();
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	28 2f       	mov	r18, r24
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aaa:	9b 81       	ldd	r25, Y+3	; 0x03
    2aac:	8c 01       	movw	r16, r24
    2aae:	02 0f       	add	r16, r18
    2ab0:	13 1f       	adc	r17, r19
    2ab2:	0e 94 fe 14 	call	0x29fc	; 0x29fc <UART_recieveByte>
    2ab6:	f8 01       	movw	r30, r16
    2ab8:	80 83       	st	Z, r24

void UART_recieveString(uint8 * recieve_arr)
{
	uint8 i = 0;
	recieve_arr[i] = UART_recieveByte();
	while(recieve_arr[i] != '$')
    2aba:	89 81       	ldd	r24, Y+1	; 0x01
    2abc:	28 2f       	mov	r18, r24
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac4:	fc 01       	movw	r30, r24
    2ac6:	e2 0f       	add	r30, r18
    2ac8:	f3 1f       	adc	r31, r19
    2aca:	80 81       	ld	r24, Z
    2acc:	84 32       	cpi	r24, 0x24	; 36
    2ace:	31 f7       	brne	.-52     	; 0x2a9c <UART_recieveString+0x30>
	{
		i++;
		recieve_arr[i] = UART_recieveByte();
	}

	recieve_arr[i] = '\0';
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    2ada:	fc 01       	movw	r30, r24
    2adc:	e2 0f       	add	r30, r18
    2ade:	f3 1f       	adc	r31, r19
    2ae0:	10 82       	st	Z, r1
}
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	cf 91       	pop	r28
    2aea:	df 91       	pop	r29
    2aec:	1f 91       	pop	r17
    2aee:	0f 91       	pop	r16
    2af0:	08 95       	ret

00002af2 <__udivmodsi4>:
    2af2:	a1 e2       	ldi	r26, 0x21	; 33
    2af4:	1a 2e       	mov	r1, r26
    2af6:	aa 1b       	sub	r26, r26
    2af8:	bb 1b       	sub	r27, r27
    2afa:	fd 01       	movw	r30, r26
    2afc:	0d c0       	rjmp	.+26     	; 0x2b18 <__udivmodsi4_ep>

00002afe <__udivmodsi4_loop>:
    2afe:	aa 1f       	adc	r26, r26
    2b00:	bb 1f       	adc	r27, r27
    2b02:	ee 1f       	adc	r30, r30
    2b04:	ff 1f       	adc	r31, r31
    2b06:	a2 17       	cp	r26, r18
    2b08:	b3 07       	cpc	r27, r19
    2b0a:	e4 07       	cpc	r30, r20
    2b0c:	f5 07       	cpc	r31, r21
    2b0e:	20 f0       	brcs	.+8      	; 0x2b18 <__udivmodsi4_ep>
    2b10:	a2 1b       	sub	r26, r18
    2b12:	b3 0b       	sbc	r27, r19
    2b14:	e4 0b       	sbc	r30, r20
    2b16:	f5 0b       	sbc	r31, r21

00002b18 <__udivmodsi4_ep>:
    2b18:	66 1f       	adc	r22, r22
    2b1a:	77 1f       	adc	r23, r23
    2b1c:	88 1f       	adc	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	1a 94       	dec	r1
    2b22:	69 f7       	brne	.-38     	; 0x2afe <__udivmodsi4_loop>
    2b24:	60 95       	com	r22
    2b26:	70 95       	com	r23
    2b28:	80 95       	com	r24
    2b2a:	90 95       	com	r25
    2b2c:	9b 01       	movw	r18, r22
    2b2e:	ac 01       	movw	r20, r24
    2b30:	bd 01       	movw	r22, r26
    2b32:	cf 01       	movw	r24, r30
    2b34:	08 95       	ret

00002b36 <__prologue_saves__>:
    2b36:	2f 92       	push	r2
    2b38:	3f 92       	push	r3
    2b3a:	4f 92       	push	r4
    2b3c:	5f 92       	push	r5
    2b3e:	6f 92       	push	r6
    2b40:	7f 92       	push	r7
    2b42:	8f 92       	push	r8
    2b44:	9f 92       	push	r9
    2b46:	af 92       	push	r10
    2b48:	bf 92       	push	r11
    2b4a:	cf 92       	push	r12
    2b4c:	df 92       	push	r13
    2b4e:	ef 92       	push	r14
    2b50:	ff 92       	push	r15
    2b52:	0f 93       	push	r16
    2b54:	1f 93       	push	r17
    2b56:	cf 93       	push	r28
    2b58:	df 93       	push	r29
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
    2b5e:	ca 1b       	sub	r28, r26
    2b60:	db 0b       	sbc	r29, r27
    2b62:	0f b6       	in	r0, 0x3f	; 63
    2b64:	f8 94       	cli
    2b66:	de bf       	out	0x3e, r29	; 62
    2b68:	0f be       	out	0x3f, r0	; 63
    2b6a:	cd bf       	out	0x3d, r28	; 61
    2b6c:	09 94       	ijmp

00002b6e <__epilogue_restores__>:
    2b6e:	2a 88       	ldd	r2, Y+18	; 0x12
    2b70:	39 88       	ldd	r3, Y+17	; 0x11
    2b72:	48 88       	ldd	r4, Y+16	; 0x10
    2b74:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b76:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b78:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b7a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b7c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b80:	b9 84       	ldd	r11, Y+9	; 0x09
    2b82:	c8 84       	ldd	r12, Y+8	; 0x08
    2b84:	df 80       	ldd	r13, Y+7	; 0x07
    2b86:	ee 80       	ldd	r14, Y+6	; 0x06
    2b88:	fd 80       	ldd	r15, Y+5	; 0x05
    2b8a:	0c 81       	ldd	r16, Y+4	; 0x04
    2b8c:	1b 81       	ldd	r17, Y+3	; 0x03
    2b8e:	aa 81       	ldd	r26, Y+2	; 0x02
    2b90:	b9 81       	ldd	r27, Y+1	; 0x01
    2b92:	ce 0f       	add	r28, r30
    2b94:	d1 1d       	adc	r29, r1
    2b96:	0f b6       	in	r0, 0x3f	; 63
    2b98:	f8 94       	cli
    2b9a:	de bf       	out	0x3e, r29	; 62
    2b9c:	0f be       	out	0x3f, r0	; 63
    2b9e:	cd bf       	out	0x3d, r28	; 61
    2ba0:	ed 01       	movw	r28, r26
    2ba2:	08 95       	ret

00002ba4 <itoa>:
    2ba4:	fb 01       	movw	r30, r22
    2ba6:	9f 01       	movw	r18, r30
    2ba8:	e8 94       	clt
    2baa:	42 30       	cpi	r20, 0x02	; 2
    2bac:	c4 f0       	brlt	.+48     	; 0x2bde <itoa+0x3a>
    2bae:	45 32       	cpi	r20, 0x25	; 37
    2bb0:	b4 f4       	brge	.+44     	; 0x2bde <itoa+0x3a>
    2bb2:	4a 30       	cpi	r20, 0x0A	; 10
    2bb4:	29 f4       	brne	.+10     	; 0x2bc0 <itoa+0x1c>
    2bb6:	97 fb       	bst	r25, 7
    2bb8:	1e f4       	brtc	.+6      	; 0x2bc0 <itoa+0x1c>
    2bba:	90 95       	com	r25
    2bbc:	81 95       	neg	r24
    2bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc0:	64 2f       	mov	r22, r20
    2bc2:	77 27       	eor	r23, r23
    2bc4:	0e 94 03 16 	call	0x2c06	; 0x2c06 <__udivmodhi4>
    2bc8:	80 5d       	subi	r24, 0xD0	; 208
    2bca:	8a 33       	cpi	r24, 0x3A	; 58
    2bcc:	0c f0       	brlt	.+2      	; 0x2bd0 <itoa+0x2c>
    2bce:	89 5d       	subi	r24, 0xD9	; 217
    2bd0:	81 93       	st	Z+, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	00 97       	sbiw	r24, 0x00	; 0
    2bd6:	a1 f7       	brne	.-24     	; 0x2bc0 <itoa+0x1c>
    2bd8:	16 f4       	brtc	.+4      	; 0x2bde <itoa+0x3a>
    2bda:	5d e2       	ldi	r21, 0x2D	; 45
    2bdc:	51 93       	st	Z+, r21
    2bde:	10 82       	st	Z, r1
    2be0:	c9 01       	movw	r24, r18
    2be2:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <strrev>

00002be6 <strrev>:
    2be6:	dc 01       	movw	r26, r24
    2be8:	fc 01       	movw	r30, r24
    2bea:	67 2f       	mov	r22, r23
    2bec:	71 91       	ld	r23, Z+
    2bee:	77 23       	and	r23, r23
    2bf0:	e1 f7       	brne	.-8      	; 0x2bea <strrev+0x4>
    2bf2:	32 97       	sbiw	r30, 0x02	; 2
    2bf4:	04 c0       	rjmp	.+8      	; 0x2bfe <strrev+0x18>
    2bf6:	7c 91       	ld	r23, X
    2bf8:	6d 93       	st	X+, r22
    2bfa:	70 83       	st	Z, r23
    2bfc:	62 91       	ld	r22, -Z
    2bfe:	ae 17       	cp	r26, r30
    2c00:	bf 07       	cpc	r27, r31
    2c02:	c8 f3       	brcs	.-14     	; 0x2bf6 <strrev+0x10>
    2c04:	08 95       	ret

00002c06 <__udivmodhi4>:
    2c06:	aa 1b       	sub	r26, r26
    2c08:	bb 1b       	sub	r27, r27
    2c0a:	51 e1       	ldi	r21, 0x11	; 17
    2c0c:	07 c0       	rjmp	.+14     	; 0x2c1c <__udivmodhi4_ep>

00002c0e <__udivmodhi4_loop>:
    2c0e:	aa 1f       	adc	r26, r26
    2c10:	bb 1f       	adc	r27, r27
    2c12:	a6 17       	cp	r26, r22
    2c14:	b7 07       	cpc	r27, r23
    2c16:	10 f0       	brcs	.+4      	; 0x2c1c <__udivmodhi4_ep>
    2c18:	a6 1b       	sub	r26, r22
    2c1a:	b7 0b       	sbc	r27, r23

00002c1c <__udivmodhi4_ep>:
    2c1c:	88 1f       	adc	r24, r24
    2c1e:	99 1f       	adc	r25, r25
    2c20:	5a 95       	dec	r21
    2c22:	a9 f7       	brne	.-22     	; 0x2c0e <__udivmodhi4_loop>
    2c24:	80 95       	com	r24
    2c26:	90 95       	com	r25
    2c28:	bc 01       	movw	r22, r24
    2c2a:	cd 01       	movw	r24, r26
    2c2c:	08 95       	ret

00002c2e <_exit>:
    2c2e:	f8 94       	cli

00002c30 <__stop_program>:
    2c30:	ff cf       	rjmp	.-2      	; 0x2c30 <__stop_program>
