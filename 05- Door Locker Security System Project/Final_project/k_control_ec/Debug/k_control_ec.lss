
k_control_ec.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  000028ee  00002982  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800174  00800174  00002a96  2**0
                  ALLOC
  3 .stab         00002a0c  00000000  00000000  00002a98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000192f  00000000  00000000  000054a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f5  00000000  00000000  00006f73  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002216  00000000  00000000  00007168  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012b8  00000000  00000000  0000937e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001136  00000000  00000000  0000a636  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b76c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002d2  00000000  00000000  0000b92c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000095a  00000000  00000000  0000bbfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c558  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__vector_7>
      20:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <__vector_8>
      24:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f2 06 	call	0xde4	; 0xde4 <main>
      8a:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 47 14 	jmp	0x288e	; 0x288e <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__epilogue_restores__+0x20>

000008b6 <__floatunsisf>:
     8b6:	a8 e0       	ldi	r26, 0x08	; 8
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e1 e6       	ldi	r30, 0x61	; 97
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
     8be:	0c 94 46 14 	jmp	0x288c	; 0x288c <__prologue_saves__+0x10>
     8c2:	7b 01       	movw	r14, r22
     8c4:	8c 01       	movw	r16, r24
     8c6:	61 15       	cp	r22, r1
     8c8:	71 05       	cpc	r23, r1
     8ca:	81 05       	cpc	r24, r1
     8cc:	91 05       	cpc	r25, r1
     8ce:	19 f4       	brne	.+6      	; 0x8d6 <__floatunsisf+0x20>
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	60 c0       	rjmp	.+192    	; 0x996 <__floatunsisf+0xe0>
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	8e e1       	ldi	r24, 0x1E	; 30
     8dc:	c8 2e       	mov	r12, r24
     8de:	d1 2c       	mov	r13, r1
     8e0:	dc 82       	std	Y+4, r13	; 0x04
     8e2:	cb 82       	std	Y+3, r12	; 0x03
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 01       	movw	r24, r16
     8ee:	b7 01       	movw	r22, r14
     8f0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     8f4:	fc 01       	movw	r30, r24
     8f6:	31 97       	sbiw	r30, 0x01	; 1
     8f8:	f7 ff       	sbrs	r31, 7
     8fa:	3b c0       	rjmp	.+118    	; 0x972 <__floatunsisf+0xbc>
     8fc:	22 27       	eor	r18, r18
     8fe:	33 27       	eor	r19, r19
     900:	2e 1b       	sub	r18, r30
     902:	3f 0b       	sbc	r19, r31
     904:	57 01       	movw	r10, r14
     906:	68 01       	movw	r12, r16
     908:	02 2e       	mov	r0, r18
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__floatunsisf+0x5e>
     90c:	d6 94       	lsr	r13
     90e:	c7 94       	ror	r12
     910:	b7 94       	ror	r11
     912:	a7 94       	ror	r10
     914:	0a 94       	dec	r0
     916:	d2 f7       	brpl	.-12     	; 0x90c <__floatunsisf+0x56>
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e0       	ldi	r26, 0x00	; 0
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	04 c0       	rjmp	.+8      	; 0x932 <__floatunsisf+0x7c>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	aa 1f       	adc	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	2a 95       	dec	r18
     934:	d2 f7       	brpl	.-12     	; 0x92a <__floatunsisf+0x74>
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	a1 09       	sbc	r26, r1
     93a:	b1 09       	sbc	r27, r1
     93c:	8e 21       	and	r24, r14
     93e:	9f 21       	and	r25, r15
     940:	a0 23       	and	r26, r16
     942:	b1 23       	and	r27, r17
     944:	00 97       	sbiw	r24, 0x00	; 0
     946:	a1 05       	cpc	r26, r1
     948:	b1 05       	cpc	r27, r1
     94a:	21 f0       	breq	.+8      	; 0x954 <__floatunsisf+0x9e>
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	4a 29       	or	r20, r10
     956:	5b 29       	or	r21, r11
     958:	6c 29       	or	r22, r12
     95a:	7d 29       	or	r23, r13
     95c:	4d 83       	std	Y+5, r20	; 0x05
     95e:	5e 83       	std	Y+6, r21	; 0x06
     960:	6f 83       	std	Y+7, r22	; 0x07
     962:	78 87       	std	Y+8, r23	; 0x08
     964:	8e e1       	ldi	r24, 0x1E	; 30
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	8e 1b       	sub	r24, r30
     96a:	9f 0b       	sbc	r25, r31
     96c:	9c 83       	std	Y+4, r25	; 0x04
     96e:	8b 83       	std	Y+3, r24	; 0x03
     970:	12 c0       	rjmp	.+36     	; 0x996 <__floatunsisf+0xe0>
     972:	30 97       	sbiw	r30, 0x00	; 0
     974:	81 f0       	breq	.+32     	; 0x996 <__floatunsisf+0xe0>
     976:	0e 2e       	mov	r0, r30
     978:	04 c0       	rjmp	.+8      	; 0x982 <__floatunsisf+0xcc>
     97a:	ee 0c       	add	r14, r14
     97c:	ff 1c       	adc	r15, r15
     97e:	00 1f       	adc	r16, r16
     980:	11 1f       	adc	r17, r17
     982:	0a 94       	dec	r0
     984:	d2 f7       	brpl	.-12     	; 0x97a <__floatunsisf+0xc4>
     986:	ed 82       	std	Y+5, r14	; 0x05
     988:	fe 82       	std	Y+6, r15	; 0x06
     98a:	0f 83       	std	Y+7, r16	; 0x07
     98c:	18 87       	std	Y+8, r17	; 0x08
     98e:	ce 1a       	sub	r12, r30
     990:	df 0a       	sbc	r13, r31
     992:	dc 82       	std	Y+4, r13	; 0x04
     994:	cb 82       	std	Y+3, r12	; 0x03
     996:	1a 82       	std	Y+2, r1	; 0x02
     998:	ce 01       	movw	r24, r28
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     9a0:	28 96       	adiw	r28, 0x08	; 8
     9a2:	ea e0       	ldi	r30, 0x0A	; 10
     9a4:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__epilogue_restores__+0x10>

000009a8 <__clzsi2>:
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	7b 01       	movw	r14, r22
     9b2:	8c 01       	movw	r16, r24
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	e8 16       	cp	r14, r24
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	f8 06       	cpc	r15, r24
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	08 07       	cpc	r16, r24
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	18 07       	cpc	r17, r24
     9c4:	88 f4       	brcc	.+34     	; 0x9e8 <__clzsi2+0x40>
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	e8 16       	cp	r14, r24
     9ca:	f1 04       	cpc	r15, r1
     9cc:	01 05       	cpc	r16, r1
     9ce:	11 05       	cpc	r17, r1
     9d0:	31 f0       	breq	.+12     	; 0x9de <__clzsi2+0x36>
     9d2:	28 f0       	brcs	.+10     	; 0x9de <__clzsi2+0x36>
     9d4:	88 e0       	ldi	r24, 0x08	; 8
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	a0 e0       	ldi	r26, 0x00	; 0
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	17 c0       	rjmp	.+46     	; 0xa0c <__clzsi2+0x64>
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	12 c0       	rjmp	.+36     	; 0xa0c <__clzsi2+0x64>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	e8 16       	cp	r14, r24
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	f8 06       	cpc	r15, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	08 07       	cpc	r16, r24
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	18 07       	cpc	r17, r24
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__clzsi2+0x5c>
     9fa:	88 e1       	ldi	r24, 0x18	; 24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__clzsi2+0x64>
     a04:	80 e1       	ldi	r24, 0x10	; 16
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	20 e2       	ldi	r18, 0x20	; 32
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	28 1b       	sub	r18, r24
     a16:	39 0b       	sbc	r19, r25
     a18:	4a 0b       	sbc	r20, r26
     a1a:	5b 0b       	sbc	r21, r27
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__clzsi2+0x7e>
     a1e:	16 95       	lsr	r17
     a20:	07 95       	ror	r16
     a22:	f7 94       	ror	r15
     a24:	e7 94       	ror	r14
     a26:	8a 95       	dec	r24
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__clzsi2+0x76>
     a2a:	f7 01       	movw	r30, r14
     a2c:	e8 59       	subi	r30, 0x98	; 152
     a2e:	ff 4f       	sbci	r31, 0xFF	; 255
     a30:	80 81       	ld	r24, Z
     a32:	28 1b       	sub	r18, r24
     a34:	31 09       	sbc	r19, r1
     a36:	41 09       	sbc	r20, r1
     a38:	51 09       	sbc	r21, r1
     a3a:	c9 01       	movw	r24, r18
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	08 95       	ret

00000a46 <__pack_f>:
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	fc 01       	movw	r30, r24
     a52:	e4 80       	ldd	r14, Z+4	; 0x04
     a54:	f5 80       	ldd	r15, Z+5	; 0x05
     a56:	06 81       	ldd	r16, Z+6	; 0x06
     a58:	17 81       	ldd	r17, Z+7	; 0x07
     a5a:	d1 80       	ldd	r13, Z+1	; 0x01
     a5c:	80 81       	ld	r24, Z
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	48 f4       	brcc	.+18     	; 0xa74 <__pack_f+0x2e>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	a0 e1       	ldi	r26, 0x10	; 16
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e8 2a       	or	r14, r24
     a6c:	f9 2a       	or	r15, r25
     a6e:	0a 2b       	or	r16, r26
     a70:	1b 2b       	or	r17, r27
     a72:	a5 c0       	rjmp	.+330    	; 0xbbe <__pack_f+0x178>
     a74:	84 30       	cpi	r24, 0x04	; 4
     a76:	09 f4       	brne	.+2      	; 0xa7a <__pack_f+0x34>
     a78:	9f c0       	rjmp	.+318    	; 0xbb8 <__pack_f+0x172>
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	21 f4       	brne	.+8      	; 0xa86 <__pack_f+0x40>
     a7e:	ee 24       	eor	r14, r14
     a80:	ff 24       	eor	r15, r15
     a82:	87 01       	movw	r16, r14
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <__pack_f+0x4a>
     a86:	e1 14       	cp	r14, r1
     a88:	f1 04       	cpc	r15, r1
     a8a:	01 05       	cpc	r16, r1
     a8c:	11 05       	cpc	r17, r1
     a8e:	19 f4       	brne	.+6      	; 0xa96 <__pack_f+0x50>
     a90:	e0 e0       	ldi	r30, 0x00	; 0
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	96 c0       	rjmp	.+300    	; 0xbc2 <__pack_f+0x17c>
     a96:	62 81       	ldd	r22, Z+2	; 0x02
     a98:	73 81       	ldd	r23, Z+3	; 0x03
     a9a:	9f ef       	ldi	r25, 0xFF	; 255
     a9c:	62 38       	cpi	r22, 0x82	; 130
     a9e:	79 07       	cpc	r23, r25
     aa0:	0c f0       	brlt	.+2      	; 0xaa4 <__pack_f+0x5e>
     aa2:	5b c0       	rjmp	.+182    	; 0xb5a <__pack_f+0x114>
     aa4:	22 e8       	ldi	r18, 0x82	; 130
     aa6:	3f ef       	ldi	r19, 0xFF	; 255
     aa8:	26 1b       	sub	r18, r22
     aaa:	37 0b       	sbc	r19, r23
     aac:	2a 31       	cpi	r18, 0x1A	; 26
     aae:	31 05       	cpc	r19, r1
     ab0:	2c f0       	brlt	.+10     	; 0xabc <__pack_f+0x76>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	2a c0       	rjmp	.+84     	; 0xb10 <__pack_f+0xca>
     abc:	b8 01       	movw	r22, r16
     abe:	a7 01       	movw	r20, r14
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__pack_f+0x86>
     ac4:	76 95       	lsr	r23
     ac6:	67 95       	ror	r22
     ac8:	57 95       	ror	r21
     aca:	47 95       	ror	r20
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__pack_f+0x7e>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <__pack_f+0x9c>
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	aa 1f       	adc	r26, r26
     ae0:	bb 1f       	adc	r27, r27
     ae2:	2a 95       	dec	r18
     ae4:	d2 f7       	brpl	.-12     	; 0xada <__pack_f+0x94>
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	a1 09       	sbc	r26, r1
     aea:	b1 09       	sbc	r27, r1
     aec:	8e 21       	and	r24, r14
     aee:	9f 21       	and	r25, r15
     af0:	a0 23       	and	r26, r16
     af2:	b1 23       	and	r27, r17
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	a1 05       	cpc	r26, r1
     af8:	b1 05       	cpc	r27, r1
     afa:	21 f0       	breq	.+8      	; 0xb04 <__pack_f+0xbe>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	9a 01       	movw	r18, r20
     b06:	ab 01       	movw	r20, r22
     b08:	28 2b       	or	r18, r24
     b0a:	39 2b       	or	r19, r25
     b0c:	4a 2b       	or	r20, r26
     b0e:	5b 2b       	or	r21, r27
     b10:	da 01       	movw	r26, r20
     b12:	c9 01       	movw	r24, r18
     b14:	8f 77       	andi	r24, 0x7F	; 127
     b16:	90 70       	andi	r25, 0x00	; 0
     b18:	a0 70       	andi	r26, 0x00	; 0
     b1a:	b0 70       	andi	r27, 0x00	; 0
     b1c:	80 34       	cpi	r24, 0x40	; 64
     b1e:	91 05       	cpc	r25, r1
     b20:	a1 05       	cpc	r26, r1
     b22:	b1 05       	cpc	r27, r1
     b24:	39 f4       	brne	.+14     	; 0xb34 <__pack_f+0xee>
     b26:	27 ff       	sbrs	r18, 7
     b28:	09 c0       	rjmp	.+18     	; 0xb3c <__pack_f+0xf6>
     b2a:	20 5c       	subi	r18, 0xC0	; 192
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	4f 4f       	sbci	r20, 0xFF	; 255
     b30:	5f 4f       	sbci	r21, 0xFF	; 255
     b32:	04 c0       	rjmp	.+8      	; 0xb3c <__pack_f+0xf6>
     b34:	21 5c       	subi	r18, 0xC1	; 193
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	4f 4f       	sbci	r20, 0xFF	; 255
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
     b3c:	e0 e0       	ldi	r30, 0x00	; 0
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	20 30       	cpi	r18, 0x00	; 0
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	3a 07       	cpc	r19, r26
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	4a 07       	cpc	r20, r26
     b4a:	a0 e4       	ldi	r26, 0x40	; 64
     b4c:	5a 07       	cpc	r21, r26
     b4e:	10 f0       	brcs	.+4      	; 0xb54 <__pack_f+0x10e>
     b50:	e1 e0       	ldi	r30, 0x01	; 1
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	79 01       	movw	r14, r18
     b56:	8a 01       	movw	r16, r20
     b58:	27 c0       	rjmp	.+78     	; 0xba8 <__pack_f+0x162>
     b5a:	60 38       	cpi	r22, 0x80	; 128
     b5c:	71 05       	cpc	r23, r1
     b5e:	64 f5       	brge	.+88     	; 0xbb8 <__pack_f+0x172>
     b60:	fb 01       	movw	r30, r22
     b62:	e1 58       	subi	r30, 0x81	; 129
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	d8 01       	movw	r26, r16
     b68:	c7 01       	movw	r24, r14
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0x144>
     b7c:	e7 fe       	sbrs	r14, 7
     b7e:	0d c0       	rjmp	.+26     	; 0xb9a <__pack_f+0x154>
     b80:	80 e4       	ldi	r24, 0x40	; 64
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x14c>
     b8a:	8f e3       	ldi	r24, 0x3F	; 63
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	a0 e0       	ldi	r26, 0x00	; 0
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e8 0e       	add	r14, r24
     b94:	f9 1e       	adc	r15, r25
     b96:	0a 1f       	adc	r16, r26
     b98:	1b 1f       	adc	r17, r27
     b9a:	17 ff       	sbrs	r17, 7
     b9c:	05 c0       	rjmp	.+10     	; 0xba8 <__pack_f+0x162>
     b9e:	16 95       	lsr	r17
     ba0:	07 95       	ror	r16
     ba2:	f7 94       	ror	r15
     ba4:	e7 94       	ror	r14
     ba6:	31 96       	adiw	r30, 0x01	; 1
     ba8:	87 e0       	ldi	r24, 0x07	; 7
     baa:	16 95       	lsr	r17
     bac:	07 95       	ror	r16
     bae:	f7 94       	ror	r15
     bb0:	e7 94       	ror	r14
     bb2:	8a 95       	dec	r24
     bb4:	d1 f7       	brne	.-12     	; 0xbaa <__pack_f+0x164>
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__pack_f+0x17c>
     bb8:	ee 24       	eor	r14, r14
     bba:	ff 24       	eor	r15, r15
     bbc:	87 01       	movw	r16, r14
     bbe:	ef ef       	ldi	r30, 0xFF	; 255
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	6e 2f       	mov	r22, r30
     bc4:	67 95       	ror	r22
     bc6:	66 27       	eor	r22, r22
     bc8:	67 95       	ror	r22
     bca:	90 2f       	mov	r25, r16
     bcc:	9f 77       	andi	r25, 0x7F	; 127
     bce:	d7 94       	ror	r13
     bd0:	dd 24       	eor	r13, r13
     bd2:	d7 94       	ror	r13
     bd4:	8e 2f       	mov	r24, r30
     bd6:	86 95       	lsr	r24
     bd8:	49 2f       	mov	r20, r25
     bda:	46 2b       	or	r20, r22
     bdc:	58 2f       	mov	r21, r24
     bde:	5d 29       	or	r21, r13
     be0:	b7 01       	movw	r22, r14
     be2:	ca 01       	movw	r24, r20
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	08 95       	ret

00000bf0 <__unpack_f>:
     bf0:	fc 01       	movw	r30, r24
     bf2:	db 01       	movw	r26, r22
     bf4:	40 81       	ld	r20, Z
     bf6:	51 81       	ldd	r21, Z+1	; 0x01
     bf8:	22 81       	ldd	r18, Z+2	; 0x02
     bfa:	62 2f       	mov	r22, r18
     bfc:	6f 77       	andi	r22, 0x7F	; 127
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	22 1f       	adc	r18, r18
     c02:	22 27       	eor	r18, r18
     c04:	22 1f       	adc	r18, r18
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	89 2f       	mov	r24, r25
     c0a:	88 0f       	add	r24, r24
     c0c:	82 2b       	or	r24, r18
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	99 1f       	adc	r25, r25
     c14:	99 27       	eor	r25, r25
     c16:	99 1f       	adc	r25, r25
     c18:	11 96       	adiw	r26, 0x01	; 1
     c1a:	9c 93       	st	X, r25
     c1c:	11 97       	sbiw	r26, 0x01	; 1
     c1e:	21 15       	cp	r18, r1
     c20:	31 05       	cpc	r19, r1
     c22:	a9 f5       	brne	.+106    	; 0xc8e <__unpack_f+0x9e>
     c24:	41 15       	cp	r20, r1
     c26:	51 05       	cpc	r21, r1
     c28:	61 05       	cpc	r22, r1
     c2a:	71 05       	cpc	r23, r1
     c2c:	11 f4       	brne	.+4      	; 0xc32 <__unpack_f+0x42>
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	37 c0       	rjmp	.+110    	; 0xca0 <__unpack_f+0xb0>
     c32:	82 e8       	ldi	r24, 0x82	; 130
     c34:	9f ef       	ldi	r25, 0xFF	; 255
     c36:	13 96       	adiw	r26, 0x03	; 3
     c38:	9c 93       	st	X, r25
     c3a:	8e 93       	st	-X, r24
     c3c:	12 97       	sbiw	r26, 0x02	; 2
     c3e:	9a 01       	movw	r18, r20
     c40:	ab 01       	movw	r20, r22
     c42:	67 e0       	ldi	r22, 0x07	; 7
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	44 1f       	adc	r20, r20
     c4a:	55 1f       	adc	r21, r21
     c4c:	6a 95       	dec	r22
     c4e:	d1 f7       	brne	.-12     	; 0xc44 <__unpack_f+0x54>
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	8c 93       	st	X, r24
     c54:	0d c0       	rjmp	.+26     	; 0xc70 <__unpack_f+0x80>
     c56:	22 0f       	add	r18, r18
     c58:	33 1f       	adc	r19, r19
     c5a:	44 1f       	adc	r20, r20
     c5c:	55 1f       	adc	r21, r21
     c5e:	12 96       	adiw	r26, 0x02	; 2
     c60:	8d 91       	ld	r24, X+
     c62:	9c 91       	ld	r25, X
     c64:	13 97       	sbiw	r26, 0x03	; 3
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	13 96       	adiw	r26, 0x03	; 3
     c6a:	9c 93       	st	X, r25
     c6c:	8e 93       	st	-X, r24
     c6e:	12 97       	sbiw	r26, 0x02	; 2
     c70:	20 30       	cpi	r18, 0x00	; 0
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	38 07       	cpc	r19, r24
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	48 07       	cpc	r20, r24
     c7a:	80 e4       	ldi	r24, 0x40	; 64
     c7c:	58 07       	cpc	r21, r24
     c7e:	58 f3       	brcs	.-42     	; 0xc56 <__unpack_f+0x66>
     c80:	14 96       	adiw	r26, 0x04	; 4
     c82:	2d 93       	st	X+, r18
     c84:	3d 93       	st	X+, r19
     c86:	4d 93       	st	X+, r20
     c88:	5c 93       	st	X, r21
     c8a:	17 97       	sbiw	r26, 0x07	; 7
     c8c:	08 95       	ret
     c8e:	2f 3f       	cpi	r18, 0xFF	; 255
     c90:	31 05       	cpc	r19, r1
     c92:	79 f4       	brne	.+30     	; 0xcb2 <__unpack_f+0xc2>
     c94:	41 15       	cp	r20, r1
     c96:	51 05       	cpc	r21, r1
     c98:	61 05       	cpc	r22, r1
     c9a:	71 05       	cpc	r23, r1
     c9c:	19 f4       	brne	.+6      	; 0xca4 <__unpack_f+0xb4>
     c9e:	84 e0       	ldi	r24, 0x04	; 4
     ca0:	8c 93       	st	X, r24
     ca2:	08 95       	ret
     ca4:	64 ff       	sbrs	r22, 4
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <__unpack_f+0xbe>
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	8c 93       	st	X, r24
     cac:	12 c0       	rjmp	.+36     	; 0xcd2 <__unpack_f+0xe2>
     cae:	1c 92       	st	X, r1
     cb0:	10 c0       	rjmp	.+32     	; 0xcd2 <__unpack_f+0xe2>
     cb2:	2f 57       	subi	r18, 0x7F	; 127
     cb4:	30 40       	sbci	r19, 0x00	; 0
     cb6:	13 96       	adiw	r26, 0x03	; 3
     cb8:	3c 93       	st	X, r19
     cba:	2e 93       	st	-X, r18
     cbc:	12 97       	sbiw	r26, 0x02	; 2
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	8c 93       	st	X, r24
     cc2:	87 e0       	ldi	r24, 0x07	; 7
     cc4:	44 0f       	add	r20, r20
     cc6:	55 1f       	adc	r21, r21
     cc8:	66 1f       	adc	r22, r22
     cca:	77 1f       	adc	r23, r23
     ccc:	8a 95       	dec	r24
     cce:	d1 f7       	brne	.-12     	; 0xcc4 <__unpack_f+0xd4>
     cd0:	70 64       	ori	r23, 0x40	; 64
     cd2:	14 96       	adiw	r26, 0x04	; 4
     cd4:	4d 93       	st	X+, r20
     cd6:	5d 93       	st	X+, r21
     cd8:	6d 93       	st	X+, r22
     cda:	7c 93       	st	X, r23
     cdc:	17 97       	sbiw	r26, 0x07	; 7
     cde:	08 95       	ret

00000ce0 <__fpcmp_parts_f>:
     ce0:	1f 93       	push	r17
     ce2:	dc 01       	movw	r26, r24
     ce4:	fb 01       	movw	r30, r22
     ce6:	9c 91       	ld	r25, X
     ce8:	92 30       	cpi	r25, 0x02	; 2
     cea:	08 f4       	brcc	.+2      	; 0xcee <__fpcmp_parts_f+0xe>
     cec:	47 c0       	rjmp	.+142    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cee:	80 81       	ld	r24, Z
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <__fpcmp_parts_f+0x16>
     cf4:	43 c0       	rjmp	.+134    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cf6:	94 30       	cpi	r25, 0x04	; 4
     cf8:	51 f4       	brne	.+20     	; 0xd0e <__fpcmp_parts_f+0x2e>
     cfa:	11 96       	adiw	r26, 0x01	; 1
     cfc:	1c 91       	ld	r17, X
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	99 f5       	brne	.+102    	; 0xd68 <__fpcmp_parts_f+0x88>
     d02:	81 81       	ldd	r24, Z+1	; 0x01
     d04:	68 2f       	mov	r22, r24
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	61 1b       	sub	r22, r17
     d0a:	71 09       	sbc	r23, r1
     d0c:	3f c0       	rjmp	.+126    	; 0xd8c <__fpcmp_parts_f+0xac>
     d0e:	84 30       	cpi	r24, 0x04	; 4
     d10:	21 f0       	breq	.+8      	; 0xd1a <__fpcmp_parts_f+0x3a>
     d12:	92 30       	cpi	r25, 0x02	; 2
     d14:	31 f4       	brne	.+12     	; 0xd22 <__fpcmp_parts_f+0x42>
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	b9 f1       	breq	.+110    	; 0xd88 <__fpcmp_parts_f+0xa8>
     d1a:	81 81       	ldd	r24, Z+1	; 0x01
     d1c:	88 23       	and	r24, r24
     d1e:	89 f1       	breq	.+98     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d20:	2d c0       	rjmp	.+90     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	1c 91       	ld	r17, X
     d26:	11 97       	sbiw	r26, 0x01	; 1
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	f1 f0       	breq	.+60     	; 0xd68 <__fpcmp_parts_f+0x88>
     d2c:	81 81       	ldd	r24, Z+1	; 0x01
     d2e:	18 17       	cp	r17, r24
     d30:	d9 f4       	brne	.+54     	; 0xd68 <__fpcmp_parts_f+0x88>
     d32:	12 96       	adiw	r26, 0x02	; 2
     d34:	2d 91       	ld	r18, X+
     d36:	3c 91       	ld	r19, X
     d38:	13 97       	sbiw	r26, 0x03	; 3
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	82 17       	cp	r24, r18
     d40:	93 07       	cpc	r25, r19
     d42:	94 f0       	brlt	.+36     	; 0xd68 <__fpcmp_parts_f+0x88>
     d44:	28 17       	cp	r18, r24
     d46:	39 07       	cpc	r19, r25
     d48:	bc f0       	brlt	.+46     	; 0xd78 <__fpcmp_parts_f+0x98>
     d4a:	14 96       	adiw	r26, 0x04	; 4
     d4c:	8d 91       	ld	r24, X+
     d4e:	9d 91       	ld	r25, X+
     d50:	0d 90       	ld	r0, X+
     d52:	bc 91       	ld	r27, X
     d54:	a0 2d       	mov	r26, r0
     d56:	24 81       	ldd	r18, Z+4	; 0x04
     d58:	35 81       	ldd	r19, Z+5	; 0x05
     d5a:	46 81       	ldd	r20, Z+6	; 0x06
     d5c:	57 81       	ldd	r21, Z+7	; 0x07
     d5e:	28 17       	cp	r18, r24
     d60:	39 07       	cpc	r19, r25
     d62:	4a 07       	cpc	r20, r26
     d64:	5b 07       	cpc	r21, r27
     d66:	18 f4       	brcc	.+6      	; 0xd6e <__fpcmp_parts_f+0x8e>
     d68:	11 23       	and	r17, r17
     d6a:	41 f0       	breq	.+16     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d6c:	0a c0       	rjmp	.+20     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d6e:	82 17       	cp	r24, r18
     d70:	93 07       	cpc	r25, r19
     d72:	a4 07       	cpc	r26, r20
     d74:	b5 07       	cpc	r27, r21
     d76:	40 f4       	brcc	.+16     	; 0xd88 <__fpcmp_parts_f+0xa8>
     d78:	11 23       	and	r17, r17
     d7a:	19 f0       	breq	.+6      	; 0xd82 <__fpcmp_parts_f+0xa2>
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <__fpcmp_parts_f+0xac>
     d82:	6f ef       	ldi	r22, 0xFF	; 255
     d84:	7f ef       	ldi	r23, 0xFF	; 255
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <__fpcmp_parts_f+0xac>
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	cb 01       	movw	r24, r22
     d8e:	1f 91       	pop	r17
     d90:	08 95       	ret

00000d92 <Buzzer_init>:
 * Functional responsible for Initialize the Buzzer device by:
 * 1. Setting the direction of Buzzer pin
 * 2. Initialize the pin by zero
 */
void Buzzer_init(void)
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(Buzzer_PORT_ID, Buzzer_PIN_ID, PIN_OUTPUT);  // Set Buzzer pin direction as output pin
     d9a:	83 e0       	ldi	r24, 0x03	; 3
     d9c:	62 e0       	ldi	r22, 0x02	; 2
     d9e:	41 e0       	ldi	r20, 0x01	; 1
     da0:	0e 94 77 0b 	call	0x16ee	; 0x16ee <GPIO_setupPinDirection>
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN_ID, LOGIC_LOW);            // Initialize Buzzer pin by zero
     da4:	83 e0       	ldi	r24, 0x03	; 3
     da6:	62 e0       	ldi	r22, 0x02	; 2
     da8:	40 e0       	ldi	r20, 0x00	; 0
     daa:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>

}
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <Buzzer_ON>:
/*
 * Description :
 * Set Buzzer Pin by one to turn Buzzer ON
 */
void Buzzer_ON(void)
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN_ID, LOGIC_HIGH);            // Output one on Buzzer pin
     dbc:	83 e0       	ldi	r24, 0x03	; 3
     dbe:	62 e0       	ldi	r22, 0x02	; 2
     dc0:	41 e0       	ldi	r20, 0x01	; 1
     dc2:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>

}
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	08 95       	ret

00000dcc <Buzzer_OFF>:
/*
 * Description :
 * Set Buzzer Pin by zero to turn Buzzer OFF
 */
void Buzzer_OFF(void)
{
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN_ID, LOGIC_LOW);            // Output zero on Buzzer pin
     dd4:	83 e0       	ldi	r24, 0x03	; 3
     dd6:	62 e0       	ldi	r22, 0x02	; 2
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>
}
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <main>:
void readPasswordFromEeprom(uint8 *password);
void changePassword(uint8 *password,uint8 *password_2);
void openDoor(uint8 *password,uint8 *password_2);
void periodCallBack(void);
int main()
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	af 97       	sbiw	r28, 0x2f	; 47
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
	/*Setting the Timer 1 Configurations to count 1 second every Interrupt*/
	Timer1_ConfigType period;
	period.mode=TIMER1_CTC;
     df8:	84 e0       	ldi	r24, 0x04	; 4
     dfa:	8f 87       	std	Y+15, r24	; 0x0f
	period.clock=TIMER1_F_CPU_64;
     dfc:	83 e0       	ldi	r24, 0x03	; 3
     dfe:	8c 87       	std	Y+12, r24	; 0x0c
	period.initialValue=0;
     e00:	1b 82       	std	Y+3, r1	; 0x03
     e02:	1a 82       	std	Y+2, r1	; 0x02
	period.oc1AMode=OC1_A_DISCONNECT;
     e04:	1d 86       	std	Y+13, r1	; 0x0d
	period.oc1BMode=OC1_B_DISCONNECT;
     e06:	1e 86       	std	Y+14, r1	; 0x0e
	period.tick=15625;
     e08:	89 e0       	ldi	r24, 0x09	; 9
     e0a:	9d e3       	ldi	r25, 0x3D	; 61
     e0c:	9d 83       	std	Y+5, r25	; 0x05
     e0e:	8c 83       	std	Y+4, r24	; 0x04
	TIMER1_init(&period);
     e10:	ce 01       	movw	r24, r28
     e12:	02 96       	adiw	r24, 0x02	; 2
     e14:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <TIMER1_init>
	TIMER1_setCallBack(periodCallBack,TIMER1_CTC);
     e18:	83 e3       	ldi	r24, 0x33	; 51
     e1a:	9a e0       	ldi	r25, 0x0A	; 10
     e1c:	64 e0       	ldi	r22, 0x04	; 4
     e1e:	0e 94 70 11 	call	0x22e0	; 0x22e0 <TIMER1_setCallBack>
	TIMER1_stopCount();
     e22:	0e 94 d5 11 	call	0x23aa	; 0x23aa <TIMER1_stopCount>
	//buzzer init
	Buzzer_init();
     e26:	0e 94 c9 06 	call	0xd92	; 0xd92 <Buzzer_init>
	SREG |=(1<<7);
     e2a:	af e5       	ldi	r26, 0x5F	; 95
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	ef e5       	ldi	r30, 0x5F	; 95
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	80 68       	ori	r24, 0x80	; 128
     e36:	8c 93       	st	X, r24
	volatile uint8 pass1[10];
	volatile uint8 pass2[10];
	UART_Configuration hmi_conf = {DISABLE,STOP1_BIT,BITS_8,9600};
     e38:	9e 01       	movw	r18, r28
     e3a:	2c 5d       	subi	r18, 0xDC	; 220
     e3c:	3f 4f       	sbci	r19, 0xFF	; 255
     e3e:	3c a7       	std	Y+44, r19	; 0x2c
     e40:	2b a7       	std	Y+43, r18	; 0x2b
     e42:	88 e6       	ldi	r24, 0x68	; 104
     e44:	91 e0       	ldi	r25, 0x01	; 1
     e46:	9e a7       	std	Y+46, r25	; 0x2e
     e48:	8d a7       	std	Y+45, r24	; 0x2d
     e4a:	95 e0       	ldi	r25, 0x05	; 5
     e4c:	9f a7       	std	Y+47, r25	; 0x2f
     e4e:	ed a5       	ldd	r30, Y+45	; 0x2d
     e50:	fe a5       	ldd	r31, Y+46	; 0x2e
     e52:	00 80       	ld	r0, Z
     e54:	2d a5       	ldd	r18, Y+45	; 0x2d
     e56:	3e a5       	ldd	r19, Y+46	; 0x2e
     e58:	2f 5f       	subi	r18, 0xFF	; 255
     e5a:	3f 4f       	sbci	r19, 0xFF	; 255
     e5c:	3e a7       	std	Y+46, r19	; 0x2e
     e5e:	2d a7       	std	Y+45, r18	; 0x2d
     e60:	eb a5       	ldd	r30, Y+43	; 0x2b
     e62:	fc a5       	ldd	r31, Y+44	; 0x2c
     e64:	00 82       	st	Z, r0
     e66:	2b a5       	ldd	r18, Y+43	; 0x2b
     e68:	3c a5       	ldd	r19, Y+44	; 0x2c
     e6a:	2f 5f       	subi	r18, 0xFF	; 255
     e6c:	3f 4f       	sbci	r19, 0xFF	; 255
     e6e:	3c a7       	std	Y+44, r19	; 0x2c
     e70:	2b a7       	std	Y+43, r18	; 0x2b
     e72:	3f a5       	ldd	r19, Y+47	; 0x2f
     e74:	31 50       	subi	r19, 0x01	; 1
     e76:	3f a7       	std	Y+47, r19	; 0x2f
     e78:	8f a5       	ldd	r24, Y+47	; 0x2f
     e7a:	88 23       	and	r24, r24
     e7c:	41 f7       	brne	.-48     	; 0xe4e <main+0x6a>
	UART_init(8000000, &hmi_conf);
     e7e:	9e 01       	movw	r18, r28
     e80:	2c 5d       	subi	r18, 0xDC	; 220
     e82:	3f 4f       	sbci	r19, 0xFF	; 255
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	72 e1       	ldi	r23, 0x12	; 18
     e88:	8a e7       	ldi	r24, 0x7A	; 122
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a9 01       	movw	r20, r18
     e8e:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <UART_init>
	UART_sendByte(0xF0);
     e92:	80 ef       	ldi	r24, 0xF0	; 240
     e94:	0e 94 8a 13 	call	0x2714	; 0x2714 <UART_sendByte>
	setpassoward(pass1,pass2);
     e98:	ce 01       	movw	r24, r28
     e9a:	40 96       	adiw	r24, 0x10	; 16
     e9c:	9e 01       	movw	r18, r28
     e9e:	26 5e       	subi	r18, 0xE6	; 230
     ea0:	3f 4f       	sbci	r19, 0xFF	; 255
     ea2:	b9 01       	movw	r22, r18
     ea4:	0e 94 78 07 	call	0xef0	; 0xef0 <setpassoward>
	uint8 system;
	while(1)
	{
		system = UART_recieveByte();
     ea8:	0e 94 a1 13 	call	0x2742	; 0x2742 <UART_recieveByte>
     eac:	89 83       	std	Y+1, r24	; 0x01
		switch(system)
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	e8 2f       	mov	r30, r24
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	fa a7       	std	Y+42, r31	; 0x2a
     eb6:	e9 a7       	std	Y+41, r30	; 0x29
     eb8:	29 a5       	ldd	r18, Y+41	; 0x29
     eba:	3a a5       	ldd	r19, Y+42	; 0x2a
     ebc:	21 15       	cp	r18, r1
     ebe:	31 05       	cpc	r19, r1
     ec0:	71 f0       	breq	.+28     	; 0xede <main+0xfa>
     ec2:	89 a5       	ldd	r24, Y+41	; 0x29
     ec4:	9a a5       	ldd	r25, Y+42	; 0x2a
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	91 05       	cpc	r25, r1
     eca:	71 f7       	brne	.-36     	; 0xea8 <main+0xc4>
		{
		case CHANGE :
			changePassword(pass1,pass2);
     ecc:	ce 01       	movw	r24, r28
     ece:	40 96       	adiw	r24, 0x10	; 16
     ed0:	9e 01       	movw	r18, r28
     ed2:	26 5e       	subi	r18, 0xE6	; 230
     ed4:	3f 4f       	sbci	r19, 0xFF	; 255
     ed6:	b9 01       	movw	r22, r18
     ed8:	0e 94 33 09 	call	0x1266	; 0x1266 <changePassword>
     edc:	e5 cf       	rjmp	.-54     	; 0xea8 <main+0xc4>
			break;
		case OPEN:
			openDoor(pass1,pass2);
     ede:	ce 01       	movw	r24, r28
     ee0:	40 96       	adiw	r24, 0x10	; 16
     ee2:	9e 01       	movw	r18, r28
     ee4:	26 5e       	subi	r18, 0xE6	; 230
     ee6:	3f 4f       	sbci	r19, 0xFF	; 255
     ee8:	b9 01       	movw	r22, r18
     eea:	0e 94 9b 09 	call	0x1336	; 0x1336 <openDoor>
     eee:	dc cf       	rjmp	.-72     	; 0xea8 <main+0xc4>

00000ef0 <setpassoward>:
	}

}

void setpassoward (uint8 * passoward, uint8 * passoward_2)
{
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	00 d0       	rcall	.+0      	; 0xef6 <setpassoward+0x6>
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <setpassoward+0x8>
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	9a 83       	std	Y+2, r25	; 0x02
     efe:	89 83       	std	Y+1, r24	; 0x01
     f00:	7c 83       	std	Y+4, r23	; 0x04
     f02:	6b 83       	std	Y+3, r22	; 0x03
	recieve_passoward(passoward);
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	9a 81       	ldd	r25, Y+2	; 0x02
     f08:	0e 94 bf 07 	call	0xf7e	; 0xf7e <recieve_passoward>
	recieve_passoward(passoward_2);
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	9c 81       	ldd	r25, Y+4	; 0x04
     f10:	0e 94 bf 07 	call	0xf7e	; 0xf7e <recieve_passoward>
	g_matchingCheck = compare_passoward (passoward,passoward_2);
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	2b 81       	ldd	r18, Y+3	; 0x03
     f1a:	3c 81       	ldd	r19, Y+4	; 0x04
     f1c:	b9 01       	movw	r22, r18
     f1e:	0e 94 f9 07 	call	0xff2	; 0xff2 <compare_passoward>
     f22:	80 93 7a 01 	sts	0x017A, r24
	UART_sendByte(g_matchingCheck);
     f26:	80 91 7a 01 	lds	r24, 0x017A
     f2a:	0e 94 8a 13 	call	0x2714	; 0x2714 <UART_sendByte>
     f2e:	15 c0       	rjmp	.+42     	; 0xf5a <setpassoward+0x6a>
	while(g_matchingCheck == UNMATCHED)
	{
		UART_sendByte(g_matchingCheck);
     f30:	80 91 7a 01 	lds	r24, 0x017A
     f34:	0e 94 8a 13 	call	0x2714	; 0x2714 <UART_sendByte>
		recieve_passoward(passoward);
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <recieve_passoward>
		recieve_passoward(passoward_2);
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	9c 81       	ldd	r25, Y+4	; 0x04
     f44:	0e 94 bf 07 	call	0xf7e	; 0xf7e <recieve_passoward>
		g_matchingCheck = compare_passoward (passoward,passoward_2);
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	9a 81       	ldd	r25, Y+2	; 0x02
     f4c:	2b 81       	ldd	r18, Y+3	; 0x03
     f4e:	3c 81       	ldd	r19, Y+4	; 0x04
     f50:	b9 01       	movw	r22, r18
     f52:	0e 94 f9 07 	call	0xff2	; 0xff2 <compare_passoward>
     f56:	80 93 7a 01 	sts	0x017A, r24
{
	recieve_passoward(passoward);
	recieve_passoward(passoward_2);
	g_matchingCheck = compare_passoward (passoward,passoward_2);
	UART_sendByte(g_matchingCheck);
	while(g_matchingCheck == UNMATCHED)
     f5a:	80 91 7a 01 	lds	r24, 0x017A
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	39 f3       	breq	.-50     	; 0xf30 <setpassoward+0x40>
		recieve_passoward(passoward);
		recieve_passoward(passoward_2);
		g_matchingCheck = compare_passoward (passoward,passoward_2);
	}
	/*Once they are matched save the password into the EEPROM*/
	UART_sendByte(MATCHED);
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	0e 94 8a 13 	call	0x2714	; 0x2714 <UART_sendByte>
	writePasswordToEeprom(passoward);
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	0e 94 35 08 	call	0x106a	; 0x106a <writePasswordToEeprom>
}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <recieve_passoward>:

void recieve_passoward (uint8 * passoward)
{
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	00 d0       	rcall	.+0      	; 0xf88 <recieve_passoward+0xa>
     f88:	0f 92       	push	r0
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	9b 83       	std	Y+3, r25	; 0x03
     f90:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     f92:	19 82       	std	Y+1, r1	; 0x01
	passoward[i]= UART_recieveByte();
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	9b 81       	ldd	r25, Y+3	; 0x03
     f9e:	8c 01       	movw	r16, r24
     fa0:	02 0f       	add	r16, r18
     fa2:	13 1f       	adc	r17, r19
     fa4:	0e 94 a1 13 	call	0x2742	; 0x2742 <UART_recieveByte>
     fa8:	f8 01       	movw	r30, r16
     faa:	80 83       	st	Z, r24
     fac:	0f c0       	rjmp	.+30     	; 0xfcc <recieve_passoward+0x4e>
	while(passoward[i] != 13)
	{
		i++;
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	8f 5f       	subi	r24, 0xFF	; 255
     fb2:	89 83       	std	Y+1, r24	; 0x01
		passoward[i]= UART_recieveByte();
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	9b 81       	ldd	r25, Y+3	; 0x03
     fbe:	8c 01       	movw	r16, r24
     fc0:	02 0f       	add	r16, r18
     fc2:	13 1f       	adc	r17, r19
     fc4:	0e 94 a1 13 	call	0x2742	; 0x2742 <UART_recieveByte>
     fc8:	f8 01       	movw	r30, r16
     fca:	80 83       	st	Z, r24

void recieve_passoward (uint8 * passoward)
{
	uint8 i = 0;
	passoward[i]= UART_recieveByte();
	while(passoward[i] != 13)
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	9b 81       	ldd	r25, Y+3	; 0x03
     fd6:	fc 01       	movw	r30, r24
     fd8:	e2 0f       	add	r30, r18
     fda:	f3 1f       	adc	r31, r19
     fdc:	80 81       	ld	r24, Z
     fde:	8d 30       	cpi	r24, 0x0D	; 13
     fe0:	31 f7       	brne	.-52     	; 0xfae <recieve_passoward+0x30>
	{
		i++;
		passoward[i]= UART_recieveByte();
	}
}
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	08 95       	ret

00000ff2 <compare_passoward>:

uint8 compare_passoward (uint8 * passoward, uint8 * passoward_2)
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	27 97       	sbiw	r28, 0x07	; 7
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
    1006:	9c 83       	std	Y+4, r25	; 0x04
    1008:	8b 83       	std	Y+3, r24	; 0x03
    100a:	7e 83       	std	Y+6, r23	; 0x06
    100c:	6d 83       	std	Y+5, r22	; 0x05
	for(int i =0 ; i<5 ; i++)
    100e:	1a 82       	std	Y+2, r1	; 0x02
    1010:	19 82       	std	Y+1, r1	; 0x01
    1012:	1a c0       	rjmp	.+52     	; 0x1048 <compare_passoward+0x56>
	{
		if(passoward[i] != passoward_2[i])
    1014:	29 81       	ldd	r18, Y+1	; 0x01
    1016:	3a 81       	ldd	r19, Y+2	; 0x02
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	9c 81       	ldd	r25, Y+4	; 0x04
    101c:	fc 01       	movw	r30, r24
    101e:	e2 0f       	add	r30, r18
    1020:	f3 1f       	adc	r31, r19
    1022:	40 81       	ld	r20, Z
    1024:	29 81       	ldd	r18, Y+1	; 0x01
    1026:	3a 81       	ldd	r19, Y+2	; 0x02
    1028:	8d 81       	ldd	r24, Y+5	; 0x05
    102a:	9e 81       	ldd	r25, Y+6	; 0x06
    102c:	fc 01       	movw	r30, r24
    102e:	e2 0f       	add	r30, r18
    1030:	f3 1f       	adc	r31, r19
    1032:	80 81       	ld	r24, Z
    1034:	48 17       	cp	r20, r24
    1036:	19 f0       	breq	.+6      	; 0x103e <compare_passoward+0x4c>
		{
			/* if only one element in passoward1 does not match the corresponding element in passoward2 return UNMATCHED */
			return UNMATCHED;
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	8f 83       	std	Y+7, r24	; 0x07
    103c:	0c c0       	rjmp	.+24     	; 0x1056 <compare_passoward+0x64>
	}
}

uint8 compare_passoward (uint8 * passoward, uint8 * passoward_2)
{
	for(int i =0 ; i<5 ; i++)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	9a 81       	ldd	r25, Y+2	; 0x02
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	9a 83       	std	Y+2, r25	; 0x02
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	9a 81       	ldd	r25, Y+2	; 0x02
    104c:	85 30       	cpi	r24, 0x05	; 5
    104e:	91 05       	cpc	r25, r1
    1050:	0c f3       	brlt	.-62     	; 0x1014 <compare_passoward+0x22>
			/* if only one element in passoward1 does not match the corresponding element in passoward2 return UNMATCHED */
			return UNMATCHED;
		}
	}
	/* both passowards are identical retrun MATCHED*/
	return MATCHED;
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	8f 83       	std	Y+7, r24	; 0x07
    1056:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1058:	27 96       	adiw	r28, 0x07	; 7
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <writePasswordToEeprom>:


void writePasswordToEeprom (uint8 * passoward )
{
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	61 97       	sbiw	r28, 0x11	; 17
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	99 8b       	std	Y+17, r25	; 0x11
    1080:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i = 0;
    1082:	1f 86       	std	Y+15, r1	; 0x0f
    1084:	88 c0       	rjmp	.+272    	; 0x1196 <writePasswordToEeprom+0x12c>
	while(passoward[i] != 13)
	{
		EEPROM_writeByte(0x0311+i, passoward[i]); /* Write passoward in the external EEPROM */
    1086:	8f 85       	ldd	r24, Y+15	; 0x0f
    1088:	88 2f       	mov	r24, r24
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	8f 5e       	subi	r24, 0xEF	; 239
    108e:	9c 4f       	sbci	r25, 0xFC	; 252
    1090:	ac 01       	movw	r20, r24
    1092:	8f 85       	ldd	r24, Y+15	; 0x0f
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	88 89       	ldd	r24, Y+16	; 0x10
    109a:	99 89       	ldd	r25, Y+17	; 0x11
    109c:	fc 01       	movw	r30, r24
    109e:	e2 0f       	add	r30, r18
    10a0:	f3 1f       	adc	r31, r19
    10a2:	20 81       	ld	r18, Z
    10a4:	ca 01       	movw	r24, r20
    10a6:	62 2f       	mov	r22, r18
    10a8:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <EEPROM_writeByte>
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	a0 e2       	ldi	r26, 0x20	; 32
    10b2:	b1 e4       	ldi	r27, 0x41	; 65
    10b4:	8b 87       	std	Y+11, r24	; 0x0b
    10b6:	9c 87       	std	Y+12, r25	; 0x0c
    10b8:	ad 87       	std	Y+13, r26	; 0x0d
    10ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    10be:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	4a ef       	ldi	r20, 0xFA	; 250
    10ca:	54 e4       	ldi	r21, 0x44	; 68
    10cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	8f 83       	std	Y+7, r24	; 0x07
    10d6:	98 87       	std	Y+8, r25	; 0x08
    10d8:	a9 87       	std	Y+9, r26	; 0x09
    10da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10dc:	6f 81       	ldd	r22, Y+7	; 0x07
    10de:	78 85       	ldd	r23, Y+8	; 0x08
    10e0:	89 85       	ldd	r24, Y+9	; 0x09
    10e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 e8       	ldi	r20, 0x80	; 128
    10ea:	5f e3       	ldi	r21, 0x3F	; 63
    10ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10f0:	88 23       	and	r24, r24
    10f2:	2c f4       	brge	.+10     	; 0x10fe <writePasswordToEeprom+0x94>
		__ticks = 1;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	9e 83       	std	Y+6, r25	; 0x06
    10fa:	8d 83       	std	Y+5, r24	; 0x05
    10fc:	3f c0       	rjmp	.+126    	; 0x117c <writePasswordToEeprom+0x112>
	else if (__tmp > 65535)
    10fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1100:	78 85       	ldd	r23, Y+8	; 0x08
    1102:	89 85       	ldd	r24, Y+9	; 0x09
    1104:	9a 85       	ldd	r25, Y+10	; 0x0a
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	3f ef       	ldi	r19, 0xFF	; 255
    110a:	4f e7       	ldi	r20, 0x7F	; 127
    110c:	57 e4       	ldi	r21, 0x47	; 71
    110e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1112:	18 16       	cp	r1, r24
    1114:	4c f5       	brge	.+82     	; 0x1168 <writePasswordToEeprom+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1116:	6b 85       	ldd	r22, Y+11	; 0x0b
    1118:	7c 85       	ldd	r23, Y+12	; 0x0c
    111a:	8d 85       	ldd	r24, Y+13	; 0x0d
    111c:	9e 85       	ldd	r25, Y+14	; 0x0e
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	40 e2       	ldi	r20, 0x20	; 32
    1124:	51 e4       	ldi	r21, 0x41	; 65
    1126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	bc 01       	movw	r22, r24
    1130:	cd 01       	movw	r24, r26
    1132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	9e 83       	std	Y+6, r25	; 0x06
    113c:	8d 83       	std	Y+5, r24	; 0x05
    113e:	0f c0       	rjmp	.+30     	; 0x115e <writePasswordToEeprom+0xf4>
    1140:	88 ec       	ldi	r24, 0xC8	; 200
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	9c 83       	std	Y+4, r25	; 0x04
    1146:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	9c 81       	ldd	r25, Y+4	; 0x04
    114c:	01 97       	sbiw	r24, 0x01	; 1
    114e:	f1 f7       	brne	.-4      	; 0x114c <writePasswordToEeprom+0xe2>
    1150:	9c 83       	std	Y+4, r25	; 0x04
    1152:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	9e 83       	std	Y+6, r25	; 0x06
    115c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115e:	8d 81       	ldd	r24, Y+5	; 0x05
    1160:	9e 81       	ldd	r25, Y+6	; 0x06
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	69 f7       	brne	.-38     	; 0x1140 <writePasswordToEeprom+0xd6>
    1166:	14 c0       	rjmp	.+40     	; 0x1190 <writePasswordToEeprom+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1168:	6f 81       	ldd	r22, Y+7	; 0x07
    116a:	78 85       	ldd	r23, Y+8	; 0x08
    116c:	89 85       	ldd	r24, Y+9	; 0x09
    116e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	9e 83       	std	Y+6, r25	; 0x06
    117a:	8d 83       	std	Y+5, r24	; 0x05
    117c:	8d 81       	ldd	r24, Y+5	; 0x05
    117e:	9e 81       	ldd	r25, Y+6	; 0x06
    1180:	9a 83       	std	Y+2, r25	; 0x02
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	f1 f7       	brne	.-4      	; 0x1188 <writePasswordToEeprom+0x11e>
    118c:	9a 83       	std	Y+2, r25	; 0x02
    118e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		i++;
    1190:	8f 85       	ldd	r24, Y+15	; 0x0f
    1192:	8f 5f       	subi	r24, 0xFF	; 255
    1194:	8f 87       	std	Y+15, r24	; 0x0f


void writePasswordToEeprom (uint8 * passoward )
{
	uint8 i = 0;
	while(passoward[i] != 13)
    1196:	8f 85       	ldd	r24, Y+15	; 0x0f
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	88 89       	ldd	r24, Y+16	; 0x10
    119e:	99 89       	ldd	r25, Y+17	; 0x11
    11a0:	fc 01       	movw	r30, r24
    11a2:	e2 0f       	add	r30, r18
    11a4:	f3 1f       	adc	r31, r19
    11a6:	80 81       	ld	r24, Z
    11a8:	8d 30       	cpi	r24, 0x0D	; 13
    11aa:	09 f0       	breq	.+2      	; 0x11ae <writePasswordToEeprom+0x144>
    11ac:	6c cf       	rjmp	.-296    	; 0x1086 <writePasswordToEeprom+0x1c>
	{
		EEPROM_writeByte(0x0311+i, passoward[i]); /* Write passoward in the external EEPROM */
		_delay_ms(10);
		i++;
	}
	EEPROM_writeByte(0x0311+i, passoward[i]);
    11ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    11b0:	88 2f       	mov	r24, r24
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	8f 5e       	subi	r24, 0xEF	; 239
    11b6:	9c 4f       	sbci	r25, 0xFC	; 252
    11b8:	ac 01       	movw	r20, r24
    11ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	88 89       	ldd	r24, Y+16	; 0x10
    11c2:	99 89       	ldd	r25, Y+17	; 0x11
    11c4:	fc 01       	movw	r30, r24
    11c6:	e2 0f       	add	r30, r18
    11c8:	f3 1f       	adc	r31, r19
    11ca:	20 81       	ld	r18, Z
    11cc:	ca 01       	movw	r24, r20
    11ce:	62 2f       	mov	r22, r18
    11d0:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <EEPROM_writeByte>
}
    11d4:	61 96       	adiw	r28, 0x11	; 17
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <readPasswordFromEeprom>:

void readPasswordFromEeprom(uint8 *password){
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <readPasswordFromEeprom+0x6>
    11ec:	0f 92       	push	r0
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	9b 83       	std	Y+3, r25	; 0x03
    11f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    11f6:	19 82       	std	Y+1, r1	; 0x01
	EEPROM_readByte((0x0311+i),&password[i]);
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	88 2f       	mov	r24, r24
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	8f 5e       	subi	r24, 0xEF	; 239
    1200:	9c 4f       	sbci	r25, 0xFC	; 252
    1202:	ac 01       	movw	r20, r24
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	9b 81       	ldd	r25, Y+3	; 0x03
    120e:	28 0f       	add	r18, r24
    1210:	39 1f       	adc	r19, r25
    1212:	ca 01       	movw	r24, r20
    1214:	b9 01       	movw	r22, r18
    1216:	0e 94 17 0b 	call	0x162e	; 0x162e <EEPROM_readByte>
    121a:	14 c0       	rjmp	.+40     	; 0x1244 <readPasswordFromEeprom+0x5e>
	while(password[i]!=13){
		i++;
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	8f 5f       	subi	r24, 0xFF	; 255
    1220:	89 83       	std	Y+1, r24	; 0x01
		EEPROM_readByte((0x0311+i),&password[i]); /* read passoward in the external EEPROM */
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	88 2f       	mov	r24, r24
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	8f 5e       	subi	r24, 0xEF	; 239
    122a:	9c 4f       	sbci	r25, 0xFC	; 252
    122c:	ac 01       	movw	r20, r24
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	9b 81       	ldd	r25, Y+3	; 0x03
    1238:	28 0f       	add	r18, r24
    123a:	39 1f       	adc	r19, r25
    123c:	ca 01       	movw	r24, r20
    123e:	b9 01       	movw	r22, r18
    1240:	0e 94 17 0b 	call	0x162e	; 0x162e <EEPROM_readByte>
}

void readPasswordFromEeprom(uint8 *password){
	uint8 i=0;
	EEPROM_readByte((0x0311+i),&password[i]);
	while(password[i]!=13){
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	9b 81       	ldd	r25, Y+3	; 0x03
    124e:	fc 01       	movw	r30, r24
    1250:	e2 0f       	add	r30, r18
    1252:	f3 1f       	adc	r31, r19
    1254:	80 81       	ld	r24, Z
    1256:	8d 30       	cpi	r24, 0x0D	; 13
    1258:	09 f7       	brne	.-62     	; 0x121c <readPasswordFromEeprom+0x36>
		i++;
		EEPROM_readByte((0x0311+i),&password[i]); /* read passoward in the external EEPROM */
	}
}
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <changePassword>:

void changePassword(uint8 *password,uint8 *password_2){
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	27 97       	sbiw	r28, 0x07	; 7
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
    127a:	9b 83       	std	Y+3, r25	; 0x03
    127c:	8a 83       	std	Y+2, r24	; 0x02
    127e:	7d 83       	std	Y+5, r23	; 0x05
    1280:	6c 83       	std	Y+4, r22	; 0x04
	uint8 n=0;
    1282:	19 82       	std	Y+1, r1	; 0x01
	recieve_passoward(password);
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	9b 81       	ldd	r25, Y+3	; 0x03
    1288:	0e 94 bf 07 	call	0xf7e	; 0xf7e <recieve_passoward>
	readPasswordFromEeprom(password_2);
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	9d 81       	ldd	r25, Y+5	; 0x05
    1290:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <readPasswordFromEeprom>
	g_matchingCheck=compare_passoward(password,password_2);
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	9b 81       	ldd	r25, Y+3	; 0x03
    1298:	2c 81       	ldd	r18, Y+4	; 0x04
    129a:	3d 81       	ldd	r19, Y+5	; 0x05
    129c:	b9 01       	movw	r22, r18
    129e:	0e 94 f9 07 	call	0xff2	; 0xff2 <compare_passoward>
    12a2:	80 93 7a 01 	sts	0x017A, r24
	UART_sendByte(g_matchingCheck);
    12a6:	80 91 7a 01 	lds	r24, 0x017A
    12aa:	0e 94 8a 13 	call	0x2714	; 0x2714 <UART_sendByte>
    12ae:	14 c0       	rjmp	.+40     	; 0x12d8 <changePassword+0x72>
	while((g_matchingCheck==UNMATCHED) & (n<2)){
		n++;
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	8f 5f       	subi	r24, 0xFF	; 255
    12b4:	89 83       	std	Y+1, r24	; 0x01
		recieve_passoward(password);
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ba:	0e 94 bf 07 	call	0xf7e	; 0xf7e <recieve_passoward>
		g_matchingCheck=compare_passoward(password,password_2);
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	9b 81       	ldd	r25, Y+3	; 0x03
    12c2:	2c 81       	ldd	r18, Y+4	; 0x04
    12c4:	3d 81       	ldd	r19, Y+5	; 0x05
    12c6:	b9 01       	movw	r22, r18
    12c8:	0e 94 f9 07 	call	0xff2	; 0xff2 <compare_passoward>
    12cc:	80 93 7a 01 	sts	0x017A, r24
		UART_sendByte(g_matchingCheck);
    12d0:	80 91 7a 01 	lds	r24, 0x017A
    12d4:	0e 94 8a 13 	call	0x2714	; 0x2714 <UART_sendByte>
	uint8 n=0;
	recieve_passoward(password);
	readPasswordFromEeprom(password_2);
	g_matchingCheck=compare_passoward(password,password_2);
	UART_sendByte(g_matchingCheck);
	while((g_matchingCheck==UNMATCHED) & (n<2)){
    12d8:	80 91 7a 01 	lds	r24, 0x017A
    12dc:	1f 82       	std	Y+7, r1	; 0x07
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	11 f4       	brne	.+4      	; 0x12e6 <changePassword+0x80>
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	8f 83       	std	Y+7, r24	; 0x07
    12e6:	1e 82       	std	Y+6, r1	; 0x06
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	82 30       	cpi	r24, 0x02	; 2
    12ec:	10 f4       	brcc	.+4      	; 0x12f2 <changePassword+0x8c>
    12ee:	91 e0       	ldi	r25, 0x01	; 1
    12f0:	9e 83       	std	Y+6, r25	; 0x06
    12f2:	8f 81       	ldd	r24, Y+7	; 0x07
    12f4:	9e 81       	ldd	r25, Y+6	; 0x06
    12f6:	89 23       	and	r24, r25
    12f8:	88 23       	and	r24, r24
    12fa:	d1 f6       	brne	.-76     	; 0x12b0 <changePassword+0x4a>
		n++;
		recieve_passoward(password);
		g_matchingCheck=compare_passoward(password,password_2);
		UART_sendByte(g_matchingCheck);
	}
	if(n==2){
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	19 f4       	brne	.+6      	; 0x1308 <changePassword+0xa2>
		Buzzer_ON();
    1302:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Buzzer_ON>
    1306:	0e c0       	rjmp	.+28     	; 0x1324 <changePassword+0xbe>
	}
	else if(g_matchingCheck==MATCHED){
    1308:	80 91 7a 01 	lds	r24, 0x017A
    130c:	82 30       	cpi	r24, 0x02	; 2
    130e:	51 f4       	brne	.+20     	; 0x1324 <changePassword+0xbe>
		setpassoward(password,password_2);
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	9b 81       	ldd	r25, Y+3	; 0x03
    1314:	2c 81       	ldd	r18, Y+4	; 0x04
    1316:	3d 81       	ldd	r19, Y+5	; 0x05
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 78 07 	call	0xef0	; 0xef0 <setpassoward>
		UART_sendByte(DONE);
    131e:	86 e0       	ldi	r24, 0x06	; 6
    1320:	0e 94 8a 13 	call	0x2714	; 0x2714 <UART_sendByte>
	}
}
    1324:	27 96       	adiw	r28, 0x07	; 7
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <openDoor>:


void openDoor(uint8 *password,uint8 *password_2){
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	27 97       	sbiw	r28, 0x07	; 7
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	9b 83       	std	Y+3, r25	; 0x03
    134c:	8a 83       	std	Y+2, r24	; 0x02
    134e:	7d 83       	std	Y+5, r23	; 0x05
    1350:	6c 83       	std	Y+4, r22	; 0x04
	uint8 n=0;
    1352:	19 82       	std	Y+1, r1	; 0x01
	recieve_passoward(password);
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	9b 81       	ldd	r25, Y+3	; 0x03
    1358:	0e 94 bf 07 	call	0xf7e	; 0xf7e <recieve_passoward>
	readPasswordFromEeprom(password_2);
    135c:	8c 81       	ldd	r24, Y+4	; 0x04
    135e:	9d 81       	ldd	r25, Y+5	; 0x05
    1360:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <readPasswordFromEeprom>
	g_matchingCheck=compare_passoward(password,password_2);
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	9b 81       	ldd	r25, Y+3	; 0x03
    1368:	2c 81       	ldd	r18, Y+4	; 0x04
    136a:	3d 81       	ldd	r19, Y+5	; 0x05
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 f9 07 	call	0xff2	; 0xff2 <compare_passoward>
    1372:	80 93 7a 01 	sts	0x017A, r24
	UART_sendByte(g_matchingCheck);
    1376:	80 91 7a 01 	lds	r24, 0x017A
    137a:	0e 94 8a 13 	call	0x2714	; 0x2714 <UART_sendByte>
    137e:	14 c0       	rjmp	.+40     	; 0x13a8 <openDoor+0x72>
	while((g_matchingCheck==UNMATCHED) & (n<2)){
		n++;
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	8f 5f       	subi	r24, 0xFF	; 255
    1384:	89 83       	std	Y+1, r24	; 0x01
		recieve_passoward(password);
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	9b 81       	ldd	r25, Y+3	; 0x03
    138a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <recieve_passoward>
		g_matchingCheck=compare_passoward(password,password_2);
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	9b 81       	ldd	r25, Y+3	; 0x03
    1392:	2c 81       	ldd	r18, Y+4	; 0x04
    1394:	3d 81       	ldd	r19, Y+5	; 0x05
    1396:	b9 01       	movw	r22, r18
    1398:	0e 94 f9 07 	call	0xff2	; 0xff2 <compare_passoward>
    139c:	80 93 7a 01 	sts	0x017A, r24
		UART_sendByte(g_matchingCheck);
    13a0:	80 91 7a 01 	lds	r24, 0x017A
    13a4:	0e 94 8a 13 	call	0x2714	; 0x2714 <UART_sendByte>
	uint8 n=0;
	recieve_passoward(password);
	readPasswordFromEeprom(password_2);
	g_matchingCheck=compare_passoward(password,password_2);
	UART_sendByte(g_matchingCheck);
	while((g_matchingCheck==UNMATCHED) & (n<2)){
    13a8:	80 91 7a 01 	lds	r24, 0x017A
    13ac:	1f 82       	std	Y+7, r1	; 0x07
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	11 f4       	brne	.+4      	; 0x13b6 <openDoor+0x80>
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	8f 83       	std	Y+7, r24	; 0x07
    13b6:	1e 82       	std	Y+6, r1	; 0x06
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	10 f4       	brcc	.+4      	; 0x13c2 <openDoor+0x8c>
    13be:	91 e0       	ldi	r25, 0x01	; 1
    13c0:	9e 83       	std	Y+6, r25	; 0x06
    13c2:	8f 81       	ldd	r24, Y+7	; 0x07
    13c4:	9e 81       	ldd	r25, Y+6	; 0x06
    13c6:	89 23       	and	r24, r25
    13c8:	88 23       	and	r24, r24
    13ca:	d1 f6       	brne	.-76     	; 0x1380 <openDoor+0x4a>
		n++;
		recieve_passoward(password);
		g_matchingCheck=compare_passoward(password,password_2);
		UART_sendByte(g_matchingCheck);
	}
	if(n==2){
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	82 30       	cpi	r24, 0x02	; 2
    13d0:	19 f4       	brne	.+6      	; 0x13d8 <openDoor+0xa2>
		Buzzer_ON();
    13d2:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Buzzer_ON>
    13d6:	3e c0       	rjmp	.+124    	; 0x1454 <openDoor+0x11e>
	}
	else if(g_matchingCheck==MATCHED){
    13d8:	80 91 7a 01 	lds	r24, 0x017A
    13dc:	82 30       	cpi	r24, 0x02	; 2
    13de:	d1 f5       	brne	.+116    	; 0x1454 <openDoor+0x11e>
		UART_sendByte(OPENED);
    13e0:	83 e0       	ldi	r24, 0x03	; 3
    13e2:	0e 94 8a 13 	call	0x2714	; 0x2714 <UART_sendByte>
		DcMotor_Rotate(CW,75);
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	6b e4       	ldi	r22, 0x4B	; 75
    13ea:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DcMotor_Rotate>
		TIMER1_startCount(TIMER1_F_CPU_64);
    13ee:	83 e0       	ldi	r24, 0x03	; 3
    13f0:	0e 94 c0 11 	call	0x2380	; 0x2380 <TIMER1_startCount>
		while(g_seconds<15){};
    13f4:	80 91 7b 01 	lds	r24, 0x017B
    13f8:	8f 30       	cpi	r24, 0x0F	; 15
    13fa:	e0 f3       	brcs	.-8      	; 0x13f4 <openDoor+0xbe>
		TIMER1_stopCount();
    13fc:	0e 94 d5 11 	call	0x23aa	; 0x23aa <TIMER1_stopCount>
		g_seconds=0;
    1400:	10 92 7b 01 	sts	0x017B, r1
		DcMotor_Rotate(STOP,0);
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DcMotor_Rotate>
		TIMER1_startCount(TIMER1_F_CPU_64);
    140c:	83 e0       	ldi	r24, 0x03	; 3
    140e:	0e 94 c0 11 	call	0x2380	; 0x2380 <TIMER1_startCount>
		while(g_seconds<3){};
    1412:	80 91 7b 01 	lds	r24, 0x017B
    1416:	83 30       	cpi	r24, 0x03	; 3
    1418:	e0 f3       	brcs	.-8      	; 0x1412 <openDoor+0xdc>
		TIMER1_stopCount();
    141a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <TIMER1_stopCount>
		g_seconds=0;
    141e:	10 92 7b 01 	sts	0x017B, r1
		UART_sendByte(CLOSING);
    1422:	85 e0       	ldi	r24, 0x05	; 5
    1424:	0e 94 8a 13 	call	0x2714	; 0x2714 <UART_sendByte>
		DcMotor_Rotate(CCW,75);
    1428:	82 e0       	ldi	r24, 0x02	; 2
    142a:	6b e4       	ldi	r22, 0x4B	; 75
    142c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DcMotor_Rotate>
		TIMER1_startCount(TIMER1_F_CPU_64);
    1430:	83 e0       	ldi	r24, 0x03	; 3
    1432:	0e 94 c0 11 	call	0x2380	; 0x2380 <TIMER1_startCount>
		while(g_seconds<15){};
    1436:	80 91 7b 01 	lds	r24, 0x017B
    143a:	8f 30       	cpi	r24, 0x0F	; 15
    143c:	e0 f3       	brcs	.-8      	; 0x1436 <openDoor+0x100>
		g_seconds=0;
    143e:	10 92 7b 01 	sts	0x017B, r1
		TIMER1_stopCount();
    1442:	0e 94 d5 11 	call	0x23aa	; 0x23aa <TIMER1_stopCount>
		DcMotor_Rotate(STOP,0);
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DcMotor_Rotate>
		UART_sendByte(CLOSED);
    144e:	84 e0       	ldi	r24, 0x04	; 4
    1450:	0e 94 8a 13 	call	0x2714	; 0x2714 <UART_sendByte>
	}

}
    1454:	27 96       	adiw	r28, 0x07	; 7
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <periodCallBack>:
[Args]		    :
				void
[Return]	   :
				void
------------------------------------------------------------------------------*/
void periodCallBack(void){
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
	g_seconds++;
    146e:	80 91 7b 01 	lds	r24, 0x017B
    1472:	8f 5f       	subi	r24, 0xFF	; 255
    1474:	80 93 7b 01 	sts	0x017B, r24
}
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <DcMotor_Init>:
#include"m_gpio.h"
#include"dc_motor.h"
#include"pwm.h"

void DcMotor_Init(void)
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
	/*Setup pin directions of motor*/
	GPIO_setupPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN,PIN_OUTPUT );
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	41 e0       	ldi	r20, 0x01	; 1
    148c:	0e 94 77 0b 	call	0x16ee	; 0x16ee <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN,PIN_OUTPUT);
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	61 e0       	ldi	r22, 0x01	; 1
    1494:	41 e0       	ldi	r20, 0x01	; 1
    1496:	0e 94 77 0b 	call	0x16ee	; 0x16ee <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_ENABLE_PORT, MOTOR_ENABLE_PIN,PIN_OUTPUT);
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	63 e0       	ldi	r22, 0x03	; 3
    149e:	41 e0       	ldi	r20, 0x01	; 1
    14a0:	0e 94 77 0b 	call	0x16ee	; 0x16ee <GPIO_setupPinDirection>

}
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <DcMotor_Rotate+0x6>
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <DcMotor_Rotate+0x8>
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	89 83       	std	Y+1, r24	; 0x01
    14b8:	6a 83       	std	Y+2, r22	; 0x02

	switch(state)
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	3c 83       	std	Y+4, r19	; 0x04
    14c2:	2b 83       	std	Y+3, r18	; 0x03
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	9c 81       	ldd	r25, Y+4	; 0x04
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	91 05       	cpc	r25, r1
    14cc:	c1 f0       	breq	.+48     	; 0x14fe <DcMotor_Rotate+0x54>
    14ce:	2b 81       	ldd	r18, Y+3	; 0x03
    14d0:	3c 81       	ldd	r19, Y+4	; 0x04
    14d2:	22 30       	cpi	r18, 0x02	; 2
    14d4:	31 05       	cpc	r19, r1
    14d6:	11 f1       	breq	.+68     	; 0x151c <DcMotor_Rotate+0x72>
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9c 81       	ldd	r25, Y+4	; 0x04
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	61 f5       	brne	.+88     	; 0x1538 <DcMotor_Rotate+0x8e>
	{

	case STOP:
		GPIO_writePin(MOTOR_IN1_PORT,  MOTOR_IN1_PIN, LOGIC_LOW);
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	40 e0       	ldi	r20, 0x00	; 0
    14e6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT,  MOTOR_IN2_PIN, LOGIC_LOW);
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>
		Timer0_PWM_Init (0,MOTOR_ENABLE_PIN);
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	63 e0       	ldi	r22, 0x03	; 3
    14f8:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <Timer0_PWM_Init>
    14fc:	1d c0       	rjmp	.+58     	; 0x1538 <DcMotor_Rotate+0x8e>
		break;
	case CW:
		GPIO_writePin(MOTOR_IN1_PORT,  MOTOR_IN1_PIN, LOGIC_LOW);
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	60 e0       	ldi	r22, 0x00	; 0
    1502:	40 e0       	ldi	r20, 0x00	; 0
    1504:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT,  MOTOR_IN2_PIN, LOGIC_HIGH);
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	61 e0       	ldi	r22, 0x01	; 1
    150c:	41 e0       	ldi	r20, 0x01	; 1
    150e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>
		Timer0_PWM_Init (speed,MOTOR_ENABLE_PIN);
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	63 e0       	ldi	r22, 0x03	; 3
    1516:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <Timer0_PWM_Init>
    151a:	0e c0       	rjmp	.+28     	; 0x1538 <DcMotor_Rotate+0x8e>
		break;
	case CCW:

		GPIO_writePin(MOTOR_IN1_PORT,  MOTOR_IN1_PIN, LOGIC_HIGH);
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	41 e0       	ldi	r20, 0x01	; 1
    1522:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT,  MOTOR_IN2_PIN, LOGIC_LOW);
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	61 e0       	ldi	r22, 0x01	; 1
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>
		Timer0_PWM_Init (speed,MOTOR_ENABLE_PIN);
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	63 e0       	ldi	r22, 0x03	; 3
    1534:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <Timer0_PWM_Init>
		break;
	}


}
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <EEPROM_init>:
#include "external_eeprom.h"
#include "twi.h"


void EEPROM_init(void)
{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	2b 97       	sbiw	r28, 0x0b	; 11
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	cd bf       	out	0x3d, r28	; 61
	/* just initialize the I2C(TWI) module inside the MC */
	Twi_ConfigType EEPROM_init = {TWI_400_Kb_S,TWI_1,0x02};
    155a:	ce 01       	movw	r24, r28
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	98 87       	std	Y+8, r25	; 0x08
    1560:	8f 83       	std	Y+7, r24	; 0x07
    1562:	ed e6       	ldi	r30, 0x6D	; 109
    1564:	f1 e0       	ldi	r31, 0x01	; 1
    1566:	fa 87       	std	Y+10, r31	; 0x0a
    1568:	e9 87       	std	Y+9, r30	; 0x09
    156a:	f6 e0       	ldi	r31, 0x06	; 6
    156c:	fb 87       	std	Y+11, r31	; 0x0b
    156e:	e9 85       	ldd	r30, Y+9	; 0x09
    1570:	fa 85       	ldd	r31, Y+10	; 0x0a
    1572:	00 80       	ld	r0, Z
    1574:	89 85       	ldd	r24, Y+9	; 0x09
    1576:	9a 85       	ldd	r25, Y+10	; 0x0a
    1578:	01 96       	adiw	r24, 0x01	; 1
    157a:	9a 87       	std	Y+10, r25	; 0x0a
    157c:	89 87       	std	Y+9, r24	; 0x09
    157e:	ef 81       	ldd	r30, Y+7	; 0x07
    1580:	f8 85       	ldd	r31, Y+8	; 0x08
    1582:	00 82       	st	Z, r0
    1584:	8f 81       	ldd	r24, Y+7	; 0x07
    1586:	98 85       	ldd	r25, Y+8	; 0x08
    1588:	01 96       	adiw	r24, 0x01	; 1
    158a:	98 87       	std	Y+8, r25	; 0x08
    158c:	8f 83       	std	Y+7, r24	; 0x07
    158e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1590:	91 50       	subi	r25, 0x01	; 1
    1592:	9b 87       	std	Y+11, r25	; 0x0b
    1594:	eb 85       	ldd	r30, Y+11	; 0x0b
    1596:	ee 23       	and	r30, r30
    1598:	51 f7       	brne	.-44     	; 0x156e <EEPROM_init+0x28>

}
    159a:	2b 96       	adiw	r28, 0x0b	; 11
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <EEPROM_writeByte+0x6>
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <EEPROM_writeByte+0x8>
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	9a 83       	std	Y+2, r25	; 0x02
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    15be:	0e 94 89 12 	call	0x2512	; 0x2512 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    15c2:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <TWI_getStatus>
    15c6:	88 30       	cpi	r24, 0x08	; 8
    15c8:	11 f0       	breq	.+4      	; 0x15ce <EEPROM_writeByte+0x22>
        return ERROR;
    15ca:	1c 82       	std	Y+4, r1	; 0x04
    15cc:	28 c0       	rjmp	.+80     	; 0x161e <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	9a 81       	ldd	r25, Y+2	; 0x02
    15d2:	80 70       	andi	r24, 0x00	; 0
    15d4:	97 70       	andi	r25, 0x07	; 7
    15d6:	88 0f       	add	r24, r24
    15d8:	89 2f       	mov	r24, r25
    15da:	88 1f       	adc	r24, r24
    15dc:	99 0b       	sbc	r25, r25
    15de:	91 95       	neg	r25
    15e0:	80 6a       	ori	r24, 0xA0	; 160
    15e2:	0e 94 a4 12 	call	0x2548	; 0x2548 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    15e6:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <TWI_getStatus>
    15ea:	88 31       	cpi	r24, 0x18	; 24
    15ec:	11 f0       	breq	.+4      	; 0x15f2 <EEPROM_writeByte+0x46>
        return ERROR; 
    15ee:	1c 82       	std	Y+4, r1	; 0x04
    15f0:	16 c0       	rjmp	.+44     	; 0x161e <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	0e 94 a4 12 	call	0x2548	; 0x2548 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    15f8:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <TWI_getStatus>
    15fc:	88 32       	cpi	r24, 0x28	; 40
    15fe:	11 f0       	breq	.+4      	; 0x1604 <EEPROM_writeByte+0x58>
        return ERROR;
    1600:	1c 82       	std	Y+4, r1	; 0x04
    1602:	0d c0       	rjmp	.+26     	; 0x161e <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	0e 94 a4 12 	call	0x2548	; 0x2548 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    160a:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <TWI_getStatus>
    160e:	88 32       	cpi	r24, 0x28	; 40
    1610:	11 f0       	breq	.+4      	; 0x1616 <EEPROM_writeByte+0x6a>
        return ERROR;
    1612:	1c 82       	std	Y+4, r1	; 0x04
    1614:	04 c0       	rjmp	.+8      	; 0x161e <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1616:	0e 94 99 12 	call	0x2532	; 0x2532 <TWI_stop>
	
    return SUCCESS;
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	8c 83       	std	Y+4, r24	; 0x04
    161e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	00 d0       	rcall	.+0      	; 0x1634 <EEPROM_readByte+0x6>
    1634:	00 d0       	rcall	.+0      	; 0x1636 <EEPROM_readByte+0x8>
    1636:	0f 92       	push	r0
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	9a 83       	std	Y+2, r25	; 0x02
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	7c 83       	std	Y+4, r23	; 0x04
    1642:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1644:	0e 94 89 12 	call	0x2512	; 0x2512 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1648:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <TWI_getStatus>
    164c:	88 30       	cpi	r24, 0x08	; 8
    164e:	11 f0       	breq	.+4      	; 0x1654 <EEPROM_readByte+0x26>
        return ERROR;
    1650:	1d 82       	std	Y+5, r1	; 0x05
    1652:	44 c0       	rjmp	.+136    	; 0x16dc <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	9a 81       	ldd	r25, Y+2	; 0x02
    1658:	80 70       	andi	r24, 0x00	; 0
    165a:	97 70       	andi	r25, 0x07	; 7
    165c:	88 0f       	add	r24, r24
    165e:	89 2f       	mov	r24, r25
    1660:	88 1f       	adc	r24, r24
    1662:	99 0b       	sbc	r25, r25
    1664:	91 95       	neg	r25
    1666:	80 6a       	ori	r24, 0xA0	; 160
    1668:	0e 94 a4 12 	call	0x2548	; 0x2548 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    166c:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <TWI_getStatus>
    1670:	88 31       	cpi	r24, 0x18	; 24
    1672:	11 f0       	breq	.+4      	; 0x1678 <EEPROM_readByte+0x4a>
        return ERROR;
    1674:	1d 82       	std	Y+5, r1	; 0x05
    1676:	32 c0       	rjmp	.+100    	; 0x16dc <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	0e 94 a4 12 	call	0x2548	; 0x2548 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    167e:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <TWI_getStatus>
    1682:	88 32       	cpi	r24, 0x28	; 40
    1684:	11 f0       	breq	.+4      	; 0x168a <EEPROM_readByte+0x5c>
        return ERROR;
    1686:	1d 82       	std	Y+5, r1	; 0x05
    1688:	29 c0       	rjmp	.+82     	; 0x16dc <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    168a:	0e 94 89 12 	call	0x2512	; 0x2512 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    168e:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <TWI_getStatus>
    1692:	80 31       	cpi	r24, 0x10	; 16
    1694:	11 f0       	breq	.+4      	; 0x169a <EEPROM_readByte+0x6c>
        return ERROR;
    1696:	1d 82       	std	Y+5, r1	; 0x05
    1698:	21 c0       	rjmp	.+66     	; 0x16dc <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	9a 81       	ldd	r25, Y+2	; 0x02
    169e:	80 70       	andi	r24, 0x00	; 0
    16a0:	97 70       	andi	r25, 0x07	; 7
    16a2:	88 0f       	add	r24, r24
    16a4:	89 2f       	mov	r24, r25
    16a6:	88 1f       	adc	r24, r24
    16a8:	99 0b       	sbc	r25, r25
    16aa:	91 95       	neg	r25
    16ac:	81 6a       	ori	r24, 0xA1	; 161
    16ae:	0e 94 a4 12 	call	0x2548	; 0x2548 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    16b2:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <TWI_getStatus>
    16b6:	80 34       	cpi	r24, 0x40	; 64
    16b8:	11 f0       	breq	.+4      	; 0x16be <EEPROM_readByte+0x90>
        return ERROR;
    16ba:	1d 82       	std	Y+5, r1	; 0x05
    16bc:	0f c0       	rjmp	.+30     	; 0x16dc <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    16be:	0e 94 ce 12 	call	0x259c	; 0x259c <TWI_readByteWithNACK>
    16c2:	eb 81       	ldd	r30, Y+3	; 0x03
    16c4:	fc 81       	ldd	r31, Y+4	; 0x04
    16c6:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    16c8:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <TWI_getStatus>
    16cc:	88 35       	cpi	r24, 0x58	; 88
    16ce:	11 f0       	breq	.+4      	; 0x16d4 <EEPROM_readByte+0xa6>
        return ERROR;
    16d0:	1d 82       	std	Y+5, r1	; 0x05
    16d2:	04 c0       	rjmp	.+8      	; 0x16dc <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    16d4:	0e 94 99 12 	call	0x2532	; 0x2532 <TWI_stop>

    return SUCCESS;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	8d 83       	std	Y+5, r24	; 0x05
    16dc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <GPIO_setupPinDirection>:
#include<avr/io.h>
#include"m_gpio.h"
#include"common_macros.h"

void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <GPIO_setupPinDirection+0x6>
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <GPIO_setupPinDirection+0x8>
    16f6:	0f 92       	push	r0
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	89 83       	std	Y+1, r24	; 0x01
    16fe:	6a 83       	std	Y+2, r22	; 0x02
    1700:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num > 3) || (pin_num > 7) )
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	84 30       	cpi	r24, 0x04	; 4
    1706:	08 f0       	brcs	.+2      	; 0x170a <GPIO_setupPinDirection+0x1c>
    1708:	e4 c0       	rjmp	.+456    	; 0x18d2 <GPIO_setupPinDirection+0x1e4>
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	88 30       	cpi	r24, 0x08	; 8
    170e:	08 f0       	brcs	.+2      	; 0x1712 <GPIO_setupPinDirection+0x24>
    1710:	e0 c0       	rjmp	.+448    	; 0x18d2 <GPIO_setupPinDirection+0x1e4>
	{
		/*Do nothing*/
	}
	else
	{
		switch(port_num)
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	3d 83       	std	Y+5, r19	; 0x05
    171a:	2c 83       	std	Y+4, r18	; 0x04
    171c:	8c 81       	ldd	r24, Y+4	; 0x04
    171e:	9d 81       	ldd	r25, Y+5	; 0x05
    1720:	81 30       	cpi	r24, 0x01	; 1
    1722:	91 05       	cpc	r25, r1
    1724:	09 f4       	brne	.+2      	; 0x1728 <GPIO_setupPinDirection+0x3a>
    1726:	47 c0       	rjmp	.+142    	; 0x17b6 <GPIO_setupPinDirection+0xc8>
    1728:	2c 81       	ldd	r18, Y+4	; 0x04
    172a:	3d 81       	ldd	r19, Y+5	; 0x05
    172c:	22 30       	cpi	r18, 0x02	; 2
    172e:	31 05       	cpc	r19, r1
    1730:	2c f4       	brge	.+10     	; 0x173c <GPIO_setupPinDirection+0x4e>
    1732:	8c 81       	ldd	r24, Y+4	; 0x04
    1734:	9d 81       	ldd	r25, Y+5	; 0x05
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	71 f0       	breq	.+28     	; 0x1756 <GPIO_setupPinDirection+0x68>
    173a:	cb c0       	rjmp	.+406    	; 0x18d2 <GPIO_setupPinDirection+0x1e4>
    173c:	2c 81       	ldd	r18, Y+4	; 0x04
    173e:	3d 81       	ldd	r19, Y+5	; 0x05
    1740:	22 30       	cpi	r18, 0x02	; 2
    1742:	31 05       	cpc	r19, r1
    1744:	09 f4       	brne	.+2      	; 0x1748 <GPIO_setupPinDirection+0x5a>
    1746:	67 c0       	rjmp	.+206    	; 0x1816 <GPIO_setupPinDirection+0x128>
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	9d 81       	ldd	r25, Y+5	; 0x05
    174c:	83 30       	cpi	r24, 0x03	; 3
    174e:	91 05       	cpc	r25, r1
    1750:	09 f4       	brne	.+2      	; 0x1754 <GPIO_setupPinDirection+0x66>
    1752:	91 c0       	rjmp	.+290    	; 0x1876 <GPIO_setupPinDirection+0x188>
    1754:	be c0       	rjmp	.+380    	; 0x18d2 <GPIO_setupPinDirection+0x1e4>
		{
		case PORTA_ID :
			if(direction == PIN_OUTPUT)
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	a1 f4       	brne	.+40     	; 0x1784 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    175c:	aa e3       	ldi	r26, 0x3A	; 58
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	ea e3       	ldi	r30, 0x3A	; 58
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	48 2f       	mov	r20, r24
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	02 2e       	mov	r0, r18
    1774:	02 c0       	rjmp	.+4      	; 0x177a <GPIO_setupPinDirection+0x8c>
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	0a 94       	dec	r0
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <GPIO_setupPinDirection+0x88>
    177e:	84 2b       	or	r24, r20
    1780:	8c 93       	st	X, r24
    1782:	a7 c0       	rjmp	.+334    	; 0x18d2 <GPIO_setupPinDirection+0x1e4>
			}
			else if (direction == PIN_INPUT)
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	88 23       	and	r24, r24
    1788:	09 f0       	breq	.+2      	; 0x178c <GPIO_setupPinDirection+0x9e>
    178a:	a3 c0       	rjmp	.+326    	; 0x18d2 <GPIO_setupPinDirection+0x1e4>
			{
				CLEAR_BIT(DDRA,pin_num);
    178c:	aa e3       	ldi	r26, 0x3A	; 58
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	ea e3       	ldi	r30, 0x3A	; 58
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	48 2f       	mov	r20, r24
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	02 2e       	mov	r0, r18
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <GPIO_setupPinDirection+0xbc>
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	0a 94       	dec	r0
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <GPIO_setupPinDirection+0xb8>
    17ae:	80 95       	com	r24
    17b0:	84 23       	and	r24, r20
    17b2:	8c 93       	st	X, r24
    17b4:	8e c0       	rjmp	.+284    	; 0x18d2 <GPIO_setupPinDirection+0x1e4>
			}
			break;
		case PORTB_ID :
			if(direction == PIN_OUTPUT)
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	a1 f4       	brne	.+40     	; 0x17e4 <GPIO_setupPinDirection+0xf6>
			{
				SET_BIT(DDRB,pin_num);
    17bc:	a7 e3       	ldi	r26, 0x37	; 55
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e7 e3       	ldi	r30, 0x37	; 55
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	48 2f       	mov	r20, r24
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	02 2e       	mov	r0, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <GPIO_setupPinDirection+0xec>
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	0a 94       	dec	r0
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <GPIO_setupPinDirection+0xe8>
    17de:	84 2b       	or	r24, r20
    17e0:	8c 93       	st	X, r24
    17e2:	77 c0       	rjmp	.+238    	; 0x18d2 <GPIO_setupPinDirection+0x1e4>
			}
			else if (direction == PIN_INPUT)
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	88 23       	and	r24, r24
    17e8:	09 f0       	breq	.+2      	; 0x17ec <GPIO_setupPinDirection+0xfe>
    17ea:	73 c0       	rjmp	.+230    	; 0x18d2 <GPIO_setupPinDirection+0x1e4>
			{
				CLEAR_BIT(DDRB,pin_num);
    17ec:	a7 e3       	ldi	r26, 0x37	; 55
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e7 e3       	ldi	r30, 0x37	; 55
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <GPIO_setupPinDirection+0x11c>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <GPIO_setupPinDirection+0x118>
    180e:	80 95       	com	r24
    1810:	84 23       	and	r24, r20
    1812:	8c 93       	st	X, r24
    1814:	5e c0       	rjmp	.+188    	; 0x18d2 <GPIO_setupPinDirection+0x1e4>
			}
			break;
		case PORTC_ID :
			if(direction == PIN_OUTPUT)
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	a1 f4       	brne	.+40     	; 0x1844 <GPIO_setupPinDirection+0x156>
			{
				SET_BIT(DDRC,pin_num);
    181c:	a4 e3       	ldi	r26, 0x34	; 52
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e4 e3       	ldi	r30, 0x34	; 52
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	48 2f       	mov	r20, r24
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 2e       	mov	r0, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <GPIO_setupPinDirection+0x14c>
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <GPIO_setupPinDirection+0x148>
    183e:	84 2b       	or	r24, r20
    1840:	8c 93       	st	X, r24
    1842:	47 c0       	rjmp	.+142    	; 0x18d2 <GPIO_setupPinDirection+0x1e4>
			}
			else if (direction == PIN_INPUT)
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	88 23       	and	r24, r24
    1848:	09 f0       	breq	.+2      	; 0x184c <GPIO_setupPinDirection+0x15e>
    184a:	43 c0       	rjmp	.+134    	; 0x18d2 <GPIO_setupPinDirection+0x1e4>
			{
				CLEAR_BIT(DDRC,pin_num);
    184c:	a4 e3       	ldi	r26, 0x34	; 52
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e4 e3       	ldi	r30, 0x34	; 52
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	48 2f       	mov	r20, r24
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	02 2e       	mov	r0, r18
    1864:	02 c0       	rjmp	.+4      	; 0x186a <GPIO_setupPinDirection+0x17c>
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	0a 94       	dec	r0
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <GPIO_setupPinDirection+0x178>
    186e:	80 95       	com	r24
    1870:	84 23       	and	r24, r20
    1872:	8c 93       	st	X, r24
    1874:	2e c0       	rjmp	.+92     	; 0x18d2 <GPIO_setupPinDirection+0x1e4>
			}
			break;
		case PORTD_ID :
			if(direction == PIN_OUTPUT)
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	81 30       	cpi	r24, 0x01	; 1
    187a:	a1 f4       	brne	.+40     	; 0x18a4 <GPIO_setupPinDirection+0x1b6>
			{
				SET_BIT(DDRD,pin_num);
    187c:	a1 e3       	ldi	r26, 0x31	; 49
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e1 e3       	ldi	r30, 0x31	; 49
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	48 2f       	mov	r20, r24
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	02 2e       	mov	r0, r18
    1894:	02 c0       	rjmp	.+4      	; 0x189a <GPIO_setupPinDirection+0x1ac>
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	0a 94       	dec	r0
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <GPIO_setupPinDirection+0x1a8>
    189e:	84 2b       	or	r24, r20
    18a0:	8c 93       	st	X, r24
    18a2:	17 c0       	rjmp	.+46     	; 0x18d2 <GPIO_setupPinDirection+0x1e4>
			}
			else if (direction == PIN_INPUT)
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	88 23       	and	r24, r24
    18a8:	a1 f4       	brne	.+40     	; 0x18d2 <GPIO_setupPinDirection+0x1e4>
			{
				CLEAR_BIT(DDRD,pin_num);
    18aa:	a1 e3       	ldi	r26, 0x31	; 49
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e1 e3       	ldi	r30, 0x31	; 49
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	48 2f       	mov	r20, r24
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 2e       	mov	r0, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <GPIO_setupPinDirection+0x1da>
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	0a 94       	dec	r0
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <GPIO_setupPinDirection+0x1d6>
    18cc:	80 95       	com	r24
    18ce:	84 23       	and	r24, r20
    18d0:	8c 93       	st	X, r24
			}
			break;
		}

	}
}
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <GPIO_writePin>:



void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <GPIO_writePin+0x6>
    18e8:	00 d0       	rcall	.+0      	; 0x18ea <GPIO_writePin+0x8>
    18ea:	0f 92       	push	r0
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	6a 83       	std	Y+2, r22	; 0x02
    18f4:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num > 3) || (pin_num > 7))
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	84 30       	cpi	r24, 0x04	; 4
    18fa:	08 f0       	brcs	.+2      	; 0x18fe <GPIO_writePin+0x1c>
    18fc:	e4 c0       	rjmp	.+456    	; 0x1ac6 <GPIO_writePin+0x1e4>
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	88 30       	cpi	r24, 0x08	; 8
    1902:	08 f0       	brcs	.+2      	; 0x1906 <GPIO_writePin+0x24>
    1904:	e0 c0       	rjmp	.+448    	; 0x1ac6 <GPIO_writePin+0x1e4>
	{
		/*Do nothing*/
	}
	else
	{
		switch(port_num)
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	3d 83       	std	Y+5, r19	; 0x05
    190e:	2c 83       	std	Y+4, r18	; 0x04
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
    1912:	9d 81       	ldd	r25, Y+5	; 0x05
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	91 05       	cpc	r25, r1
    1918:	09 f4       	brne	.+2      	; 0x191c <GPIO_writePin+0x3a>
    191a:	47 c0       	rjmp	.+142    	; 0x19aa <GPIO_writePin+0xc8>
    191c:	2c 81       	ldd	r18, Y+4	; 0x04
    191e:	3d 81       	ldd	r19, Y+5	; 0x05
    1920:	22 30       	cpi	r18, 0x02	; 2
    1922:	31 05       	cpc	r19, r1
    1924:	2c f4       	brge	.+10     	; 0x1930 <GPIO_writePin+0x4e>
    1926:	8c 81       	ldd	r24, Y+4	; 0x04
    1928:	9d 81       	ldd	r25, Y+5	; 0x05
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	71 f0       	breq	.+28     	; 0x194a <GPIO_writePin+0x68>
    192e:	cb c0       	rjmp	.+406    	; 0x1ac6 <GPIO_writePin+0x1e4>
    1930:	2c 81       	ldd	r18, Y+4	; 0x04
    1932:	3d 81       	ldd	r19, Y+5	; 0x05
    1934:	22 30       	cpi	r18, 0x02	; 2
    1936:	31 05       	cpc	r19, r1
    1938:	09 f4       	brne	.+2      	; 0x193c <GPIO_writePin+0x5a>
    193a:	67 c0       	rjmp	.+206    	; 0x1a0a <GPIO_writePin+0x128>
    193c:	8c 81       	ldd	r24, Y+4	; 0x04
    193e:	9d 81       	ldd	r25, Y+5	; 0x05
    1940:	83 30       	cpi	r24, 0x03	; 3
    1942:	91 05       	cpc	r25, r1
    1944:	09 f4       	brne	.+2      	; 0x1948 <GPIO_writePin+0x66>
    1946:	91 c0       	rjmp	.+290    	; 0x1a6a <GPIO_writePin+0x188>
    1948:	be c0       	rjmp	.+380    	; 0x1ac6 <GPIO_writePin+0x1e4>
		{
		case PORTA_ID :
			if(value == LOGIC_HIGH)
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	81 30       	cpi	r24, 0x01	; 1
    194e:	a1 f4       	brne	.+40     	; 0x1978 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1950:	ab e3       	ldi	r26, 0x3B	; 59
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	eb e3       	ldi	r30, 0x3B	; 59
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	48 2f       	mov	r20, r24
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	02 2e       	mov	r0, r18
    1968:	02 c0       	rjmp	.+4      	; 0x196e <GPIO_writePin+0x8c>
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	0a 94       	dec	r0
    1970:	e2 f7       	brpl	.-8      	; 0x196a <GPIO_writePin+0x88>
    1972:	84 2b       	or	r24, r20
    1974:	8c 93       	st	X, r24
    1976:	a7 c0       	rjmp	.+334    	; 0x1ac6 <GPIO_writePin+0x1e4>
			}
			else if (value == LOGIC_LOW)
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	88 23       	and	r24, r24
    197c:	09 f0       	breq	.+2      	; 0x1980 <GPIO_writePin+0x9e>
    197e:	a3 c0       	rjmp	.+326    	; 0x1ac6 <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTA,pin_num);
    1980:	ab e3       	ldi	r26, 0x3B	; 59
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	eb e3       	ldi	r30, 0x3B	; 59
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	48 2f       	mov	r20, r24
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 2e       	mov	r0, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <GPIO_writePin+0xbc>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	0a 94       	dec	r0
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <GPIO_writePin+0xb8>
    19a2:	80 95       	com	r24
    19a4:	84 23       	and	r24, r20
    19a6:	8c 93       	st	X, r24
    19a8:	8e c0       	rjmp	.+284    	; 0x1ac6 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTB_ID :
			if(value == LOGIC_HIGH)
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	81 30       	cpi	r24, 0x01	; 1
    19ae:	a1 f4       	brne	.+40     	; 0x19d8 <GPIO_writePin+0xf6>
			{
				SET_BIT(PORTB,pin_num);
    19b0:	a8 e3       	ldi	r26, 0x38	; 56
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e8 e3       	ldi	r30, 0x38	; 56
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <GPIO_writePin+0xec>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <GPIO_writePin+0xe8>
    19d2:	84 2b       	or	r24, r20
    19d4:	8c 93       	st	X, r24
    19d6:	77 c0       	rjmp	.+238    	; 0x1ac6 <GPIO_writePin+0x1e4>
			}
			else if (value == LOGIC_LOW)
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	88 23       	and	r24, r24
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <GPIO_writePin+0xfe>
    19de:	73 c0       	rjmp	.+230    	; 0x1ac6 <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTB,pin_num);
    19e0:	a8 e3       	ldi	r26, 0x38	; 56
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e8 e3       	ldi	r30, 0x38	; 56
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	48 2f       	mov	r20, r24
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	02 2e       	mov	r0, r18
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <GPIO_writePin+0x11c>
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	0a 94       	dec	r0
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <GPIO_writePin+0x118>
    1a02:	80 95       	com	r24
    1a04:	84 23       	and	r24, r20
    1a06:	8c 93       	st	X, r24
    1a08:	5e c0       	rjmp	.+188    	; 0x1ac6 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTC_ID :
			if(value == LOGIC_HIGH)
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	a1 f4       	brne	.+40     	; 0x1a38 <GPIO_writePin+0x156>
			{
				SET_BIT(PORTC,pin_num);
    1a10:	a5 e3       	ldi	r26, 0x35	; 53
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e5 e3       	ldi	r30, 0x35	; 53
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	02 2e       	mov	r0, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <GPIO_writePin+0x14c>
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	0a 94       	dec	r0
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <GPIO_writePin+0x148>
    1a32:	84 2b       	or	r24, r20
    1a34:	8c 93       	st	X, r24
    1a36:	47 c0       	rjmp	.+142    	; 0x1ac6 <GPIO_writePin+0x1e4>
			}
			else if (value == LOGIC_LOW)
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	88 23       	and	r24, r24
    1a3c:	09 f0       	breq	.+2      	; 0x1a40 <GPIO_writePin+0x15e>
    1a3e:	43 c0       	rjmp	.+134    	; 0x1ac6 <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTC,pin_num);
    1a40:	a5 e3       	ldi	r26, 0x35	; 53
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e5 e3       	ldi	r30, 0x35	; 53
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	48 2f       	mov	r20, r24
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 2e       	mov	r0, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <GPIO_writePin+0x17c>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	0a 94       	dec	r0
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <GPIO_writePin+0x178>
    1a62:	80 95       	com	r24
    1a64:	84 23       	and	r24, r20
    1a66:	8c 93       	st	X, r24
    1a68:	2e c0       	rjmp	.+92     	; 0x1ac6 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTD_ID :
			if(value == LOGIC_HIGH)
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	81 30       	cpi	r24, 0x01	; 1
    1a6e:	a1 f4       	brne	.+40     	; 0x1a98 <GPIO_writePin+0x1b6>
			{
				SET_BIT(PORTD,pin_num);
    1a70:	a2 e3       	ldi	r26, 0x32	; 50
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e2 e3       	ldi	r30, 0x32	; 50
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	48 2f       	mov	r20, r24
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	02 2e       	mov	r0, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <GPIO_writePin+0x1ac>
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	0a 94       	dec	r0
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <GPIO_writePin+0x1a8>
    1a92:	84 2b       	or	r24, r20
    1a94:	8c 93       	st	X, r24
    1a96:	17 c0       	rjmp	.+46     	; 0x1ac6 <GPIO_writePin+0x1e4>
			}
			else if (value == LOGIC_LOW)
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	88 23       	and	r24, r24
    1a9c:	a1 f4       	brne	.+40     	; 0x1ac6 <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTD,pin_num);
    1a9e:	a2 e3       	ldi	r26, 0x32	; 50
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e2 e3       	ldi	r30, 0x32	; 50
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	48 2f       	mov	r20, r24
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	02 2e       	mov	r0, r18
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <GPIO_writePin+0x1da>
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	0a 94       	dec	r0
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <GPIO_writePin+0x1d6>
    1ac0:	80 95       	com	r24
    1ac2:	84 23       	and	r24, r20
    1ac4:	8c 93       	st	X, r24
			}
			break;
		}

	}
}
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <GPIO_readPin>:


uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	00 d0       	rcall	.+0      	; 0x1adc <GPIO_readPin+0x6>
    1adc:	00 d0       	rcall	.+0      	; 0x1ade <GPIO_readPin+0x8>
    1ade:	0f 92       	push	r0
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	8a 83       	std	Y+2, r24	; 0x02
    1ae6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 return_value = 0;
    1ae8:	19 82       	std	Y+1, r1	; 0x01
	if((port_num > 3) || (pin_num > 7))
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	84 30       	cpi	r24, 0x04	; 4
    1aee:	18 f4       	brcc	.+6      	; 0x1af6 <GPIO_readPin+0x20>
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	88 30       	cpi	r24, 0x08	; 8
    1af4:	10 f0       	brcs	.+4      	; 0x1afa <GPIO_readPin+0x24>
	{
		return_value = LOGIC_LOW;
    1af6:	19 82       	std	Y+1, r1	; 0x01
    1af8:	80 c0       	rjmp	.+256    	; 0x1bfa <GPIO_readPin+0x124>
	}
	else
	{
		switch(port_num)
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	3d 83       	std	Y+5, r19	; 0x05
    1b02:	2c 83       	std	Y+4, r18	; 0x04
    1b04:	4c 81       	ldd	r20, Y+4	; 0x04
    1b06:	5d 81       	ldd	r21, Y+5	; 0x05
    1b08:	41 30       	cpi	r20, 0x01	; 1
    1b0a:	51 05       	cpc	r21, r1
    1b0c:	79 f1       	breq	.+94     	; 0x1b6c <GPIO_readPin+0x96>
    1b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b10:	9d 81       	ldd	r25, Y+5	; 0x05
    1b12:	82 30       	cpi	r24, 0x02	; 2
    1b14:	91 05       	cpc	r25, r1
    1b16:	34 f4       	brge	.+12     	; 0x1b24 <GPIO_readPin+0x4e>
    1b18:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1c:	21 15       	cp	r18, r1
    1b1e:	31 05       	cpc	r19, r1
    1b20:	69 f0       	breq	.+26     	; 0x1b3c <GPIO_readPin+0x66>
    1b22:	6b c0       	rjmp	.+214    	; 0x1bfa <GPIO_readPin+0x124>
    1b24:	4c 81       	ldd	r20, Y+4	; 0x04
    1b26:	5d 81       	ldd	r21, Y+5	; 0x05
    1b28:	42 30       	cpi	r20, 0x02	; 2
    1b2a:	51 05       	cpc	r21, r1
    1b2c:	b9 f1       	breq	.+110    	; 0x1b9c <GPIO_readPin+0xc6>
    1b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b30:	9d 81       	ldd	r25, Y+5	; 0x05
    1b32:	83 30       	cpi	r24, 0x03	; 3
    1b34:	91 05       	cpc	r25, r1
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <GPIO_readPin+0x64>
    1b38:	49 c0       	rjmp	.+146    	; 0x1bcc <GPIO_readPin+0xf6>
    1b3a:	5f c0       	rjmp	.+190    	; 0x1bfa <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1b3c:	e9 e3       	ldi	r30, 0x39	; 57
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	88 2f       	mov	r24, r24
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	a9 01       	movw	r20, r18
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <GPIO_readPin+0x7e>
    1b50:	55 95       	asr	r21
    1b52:	47 95       	ror	r20
    1b54:	8a 95       	dec	r24
    1b56:	e2 f7       	brpl	.-8      	; 0x1b50 <GPIO_readPin+0x7a>
    1b58:	ca 01       	movw	r24, r20
    1b5a:	81 70       	andi	r24, 0x01	; 1
    1b5c:	90 70       	andi	r25, 0x00	; 0
    1b5e:	88 23       	and	r24, r24
    1b60:	19 f0       	breq	.+6      	; 0x1b68 <GPIO_readPin+0x92>
			{
				return_value = LOGIC_HIGH;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	49 c0       	rjmp	.+146    	; 0x1bfa <GPIO_readPin+0x124>
			}
			else
			{
				return_value = LOGIC_LOW;
    1b68:	19 82       	std	Y+1, r1	; 0x01
    1b6a:	47 c0       	rjmp	.+142    	; 0x1bfa <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1b6c:	e6 e3       	ldi	r30, 0x36	; 54
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	88 2f       	mov	r24, r24
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	a9 01       	movw	r20, r18
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <GPIO_readPin+0xae>
    1b80:	55 95       	asr	r21
    1b82:	47 95       	ror	r20
    1b84:	8a 95       	dec	r24
    1b86:	e2 f7       	brpl	.-8      	; 0x1b80 <GPIO_readPin+0xaa>
    1b88:	ca 01       	movw	r24, r20
    1b8a:	81 70       	andi	r24, 0x01	; 1
    1b8c:	90 70       	andi	r25, 0x00	; 0
    1b8e:	88 23       	and	r24, r24
    1b90:	19 f0       	breq	.+6      	; 0x1b98 <GPIO_readPin+0xc2>
			{
				return_value = LOGIC_HIGH;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	89 83       	std	Y+1, r24	; 0x01
    1b96:	31 c0       	rjmp	.+98     	; 0x1bfa <GPIO_readPin+0x124>
			}
			else
			{
				return_value = LOGIC_LOW;
    1b98:	19 82       	std	Y+1, r1	; 0x01
    1b9a:	2f c0       	rjmp	.+94     	; 0x1bfa <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1b9c:	e3 e3       	ldi	r30, 0x33	; 51
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	88 2f       	mov	r24, r24
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	a9 01       	movw	r20, r18
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <GPIO_readPin+0xde>
    1bb0:	55 95       	asr	r21
    1bb2:	47 95       	ror	r20
    1bb4:	8a 95       	dec	r24
    1bb6:	e2 f7       	brpl	.-8      	; 0x1bb0 <GPIO_readPin+0xda>
    1bb8:	ca 01       	movw	r24, r20
    1bba:	81 70       	andi	r24, 0x01	; 1
    1bbc:	90 70       	andi	r25, 0x00	; 0
    1bbe:	88 23       	and	r24, r24
    1bc0:	19 f0       	breq	.+6      	; 0x1bc8 <GPIO_readPin+0xf2>
			{
				return_value = LOGIC_HIGH;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	19 c0       	rjmp	.+50     	; 0x1bfa <GPIO_readPin+0x124>
			}
			else
			{
				return_value = LOGIC_LOW;
    1bc8:	19 82       	std	Y+1, r1	; 0x01
    1bca:	17 c0       	rjmp	.+46     	; 0x1bfa <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1bcc:	e0 e3       	ldi	r30, 0x30	; 48
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	a9 01       	movw	r20, r18
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <GPIO_readPin+0x10e>
    1be0:	55 95       	asr	r21
    1be2:	47 95       	ror	r20
    1be4:	8a 95       	dec	r24
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <GPIO_readPin+0x10a>
    1be8:	ca 01       	movw	r24, r20
    1bea:	81 70       	andi	r24, 0x01	; 1
    1bec:	90 70       	andi	r25, 0x00	; 0
    1bee:	88 23       	and	r24, r24
    1bf0:	19 f0       	breq	.+6      	; 0x1bf8 <GPIO_readPin+0x122>
			{
				return_value = LOGIC_HIGH;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	01 c0       	rjmp	.+2      	; 0x1bfa <GPIO_readPin+0x124>
			}
			else
			{
				return_value = LOGIC_LOW;
    1bf8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}

	}
	return return_value;
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <GPIO_setupPortDirection>:


void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <GPIO_setupPortDirection+0x6>
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <GPIO_setupPortDirection+0x8>
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num > 3) )
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	84 30       	cpi	r24, 0x04	; 4
    1c20:	90 f5       	brcc	.+100    	; 0x1c86 <GPIO_setupPortDirection+0x7a>
	{
		/*Do nothing*/
	}
	else
	{
		switch(port_num)
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	3c 83       	std	Y+4, r19	; 0x04
    1c2a:	2b 83       	std	Y+3, r18	; 0x03
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	91 05       	cpc	r25, r1
    1c34:	d1 f0       	breq	.+52     	; 0x1c6a <GPIO_setupPortDirection+0x5e>
    1c36:	2b 81       	ldd	r18, Y+3	; 0x03
    1c38:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3a:	22 30       	cpi	r18, 0x02	; 2
    1c3c:	31 05       	cpc	r19, r1
    1c3e:	2c f4       	brge	.+10     	; 0x1c4a <GPIO_setupPortDirection+0x3e>
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	9c 81       	ldd	r25, Y+4	; 0x04
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	61 f0       	breq	.+24     	; 0x1c60 <GPIO_setupPortDirection+0x54>
    1c48:	1e c0       	rjmp	.+60     	; 0x1c86 <GPIO_setupPortDirection+0x7a>
    1c4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4e:	22 30       	cpi	r18, 0x02	; 2
    1c50:	31 05       	cpc	r19, r1
    1c52:	81 f0       	breq	.+32     	; 0x1c74 <GPIO_setupPortDirection+0x68>
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	83 30       	cpi	r24, 0x03	; 3
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	81 f0       	breq	.+32     	; 0x1c7e <GPIO_setupPortDirection+0x72>
    1c5e:	13 c0       	rjmp	.+38     	; 0x1c86 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1c60:	ea e3       	ldi	r30, 0x3A	; 58
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	80 83       	st	Z, r24
    1c68:	0e c0       	rjmp	.+28     	; 0x1c86 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1c6a:	e7 e3       	ldi	r30, 0x37	; 55
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	80 83       	st	Z, r24
    1c72:	09 c0       	rjmp	.+18     	; 0x1c86 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1c74:	e4 e3       	ldi	r30, 0x34	; 52
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	80 83       	st	Z, r24
    1c7c:	04 c0       	rjmp	.+8      	; 0x1c86 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1c7e:	e1 e3       	ldi	r30, 0x31	; 49
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <GPIO_writePort>:


void GPIO_writePort(uint8 port_num, uint8 value)
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <GPIO_writePort+0x6>
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <GPIO_writePort+0x8>
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	89 83       	std	Y+1, r24	; 0x01
    1ca2:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > 3)
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	84 30       	cpi	r24, 0x04	; 4
    1ca8:	90 f5       	brcc	.+100    	; 0x1d0e <GPIO_writePort+0x7a>
	{

	}
	else
	{
		switch(port_num)
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	3c 83       	std	Y+4, r19	; 0x04
    1cb2:	2b 83       	std	Y+3, r18	; 0x03
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb8:	81 30       	cpi	r24, 0x01	; 1
    1cba:	91 05       	cpc	r25, r1
    1cbc:	d1 f0       	breq	.+52     	; 0x1cf2 <GPIO_writePort+0x5e>
    1cbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc2:	22 30       	cpi	r18, 0x02	; 2
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	2c f4       	brge	.+10     	; 0x1cd2 <GPIO_writePort+0x3e>
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	61 f0       	breq	.+24     	; 0x1ce8 <GPIO_writePort+0x54>
    1cd0:	1e c0       	rjmp	.+60     	; 0x1d0e <GPIO_writePort+0x7a>
    1cd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd6:	22 30       	cpi	r18, 0x02	; 2
    1cd8:	31 05       	cpc	r19, r1
    1cda:	81 f0       	breq	.+32     	; 0x1cfc <GPIO_writePort+0x68>
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce0:	83 30       	cpi	r24, 0x03	; 3
    1ce2:	91 05       	cpc	r25, r1
    1ce4:	81 f0       	breq	.+32     	; 0x1d06 <GPIO_writePort+0x72>
    1ce6:	13 c0       	rjmp	.+38     	; 0x1d0e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1ce8:	eb e3       	ldi	r30, 0x3B	; 59
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	80 83       	st	Z, r24
    1cf0:	0e c0       	rjmp	.+28     	; 0x1d0e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1cf2:	e8 e3       	ldi	r30, 0x38	; 56
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	80 83       	st	Z, r24
    1cfa:	09 c0       	rjmp	.+18     	; 0x1d0e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1cfc:	e5 e3       	ldi	r30, 0x35	; 53
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	80 83       	st	Z, r24
    1d04:	04 c0       	rjmp	.+8      	; 0x1d0e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1d06:	e2 e3       	ldi	r30, 0x32	; 50
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <GPIO_readPort>:



uint8 GPIO_readPort(uint8 port_num)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <GPIO_readPort+0x6>
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <GPIO_readPort+0x8>
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	8a 83       	std	Y+2, r24	; 0x02
	uint8 return_value = 0;
    1d2a:	19 82       	std	Y+1, r1	; 0x01
	if(port_num > 3)
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	84 30       	cpi	r24, 0x04	; 4
    1d30:	10 f0       	brcs	.+4      	; 0x1d36 <GPIO_readPort+0x1a>
	{
		return_value = 0;
    1d32:	19 82       	std	Y+1, r1	; 0x01
    1d34:	32 c0       	rjmp	.+100    	; 0x1d9a <GPIO_readPort+0x7e>
	}
	else
	{
		switch(port_num)
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	3c 83       	std	Y+4, r19	; 0x04
    1d3e:	2b 83       	std	Y+3, r18	; 0x03
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	9c 81       	ldd	r25, Y+4	; 0x04
    1d44:	81 30       	cpi	r24, 0x01	; 1
    1d46:	91 05       	cpc	r25, r1
    1d48:	d1 f0       	breq	.+52     	; 0x1d7e <GPIO_readPort+0x62>
    1d4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d4e:	22 30       	cpi	r18, 0x02	; 2
    1d50:	31 05       	cpc	r19, r1
    1d52:	2c f4       	brge	.+10     	; 0x1d5e <GPIO_readPort+0x42>
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	9c 81       	ldd	r25, Y+4	; 0x04
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	61 f0       	breq	.+24     	; 0x1d74 <GPIO_readPort+0x58>
    1d5c:	1e c0       	rjmp	.+60     	; 0x1d9a <GPIO_readPort+0x7e>
    1d5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d60:	3c 81       	ldd	r19, Y+4	; 0x04
    1d62:	22 30       	cpi	r18, 0x02	; 2
    1d64:	31 05       	cpc	r19, r1
    1d66:	81 f0       	breq	.+32     	; 0x1d88 <GPIO_readPort+0x6c>
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6c:	83 30       	cpi	r24, 0x03	; 3
    1d6e:	91 05       	cpc	r25, r1
    1d70:	81 f0       	breq	.+32     	; 0x1d92 <GPIO_readPort+0x76>
    1d72:	13 c0       	rjmp	.+38     	; 0x1d9a <GPIO_readPort+0x7e>
		{
		case PORTA_ID:
			return_value = PINA;
    1d74:	e9 e3       	ldi	r30, 0x39	; 57
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	89 83       	std	Y+1, r24	; 0x01
    1d7c:	0e c0       	rjmp	.+28     	; 0x1d9a <GPIO_readPort+0x7e>
			break;
		case PORTB_ID:
			return_value = PINB;
    1d7e:	e6 e3       	ldi	r30, 0x36	; 54
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	89 83       	std	Y+1, r24	; 0x01
    1d86:	09 c0       	rjmp	.+18     	; 0x1d9a <GPIO_readPort+0x7e>
			break;
		case PORTC_ID:
			return_value = PINC;
    1d88:	e3 e3       	ldi	r30, 0x33	; 51
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	04 c0       	rjmp	.+8      	; 0x1d9a <GPIO_readPort+0x7e>
			break;
		case PORTD_ID:
			return_value = PIND;
    1d92:	e0 e3       	ldi	r30, 0x30	; 48
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return return_value;
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <Timer0_PWM_Init>:
#include<avr/io.h>
#include"pwm.h"
#include"common_macros.h"

void Timer0_PWM_Init(uint8 duty_cycle_percent,uint8 out_pin)
{
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	00 d0       	rcall	.+0      	; 0x1db0 <Timer0_PWM_Init+0x6>
    1db0:	0f 92       	push	r0
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	8a 83       	std	Y+2, r24	; 0x02
    1db8:	6b 83       	std	Y+3, r22	; 0x03
	TCNT0 = 0; // Set Timer Initial Value to 0
    1dba:	e2 e5       	ldi	r30, 0x52	; 82
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	10 82       	st	Z, r1
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1dc0:	e3 e5       	ldi	r30, 0x53	; 83
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	8a e6       	ldi	r24, 0x6A	; 106
    1dc6:	80 83       	st	Z, r24
	uint8 set_duty_cycle= duty_cycle_percent * PERCENT_FACTOR;
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	aa 27       	eor	r26, r26
    1dd0:	97 fd       	sbrc	r25, 7
    1dd2:	a0 95       	com	r26
    1dd4:	ba 2f       	mov	r27, r26
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	bc 01       	movw	r22, r24
    1de4:	cd 01       	movw	r24, r26
    1de6:	23 e3       	ldi	r18, 0x33	; 51
    1de8:	33 e3       	ldi	r19, 0x33	; 51
    1dea:	43 e2       	ldi	r20, 0x23	; 35
    1dec:	50 e4       	ldi	r21, 0x40	; 64
    1dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	bc 01       	movw	r22, r24
    1df8:	cd 01       	movw	r24, r26
    1dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	89 83       	std	Y+1, r24	; 0x01

	OCR0  = set_duty_cycle;
    1e04:	ec e5       	ldi	r30, 0x5C	; 92
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	80 83       	st	Z, r24

	DDRB|=(1<<3);
    1e0c:	a7 e3       	ldi	r26, 0x37	; 55
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e7 e3       	ldi	r30, 0x37	; 55
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	88 60       	ori	r24, 0x08	; 8
    1e18:	8c 93       	st	X, r24
}
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <__vector_9>:


/* -----------------------------------------------------------------------------
 *                       Interrupt Service Routines                            *
 ------------------------------------------------------------------------------*/
ISR(TIMER1_OVF_vect){
    1e26:	1f 92       	push	r1
    1e28:	0f 92       	push	r0
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	0f 92       	push	r0
    1e2e:	11 24       	eor	r1, r1
    1e30:	2f 93       	push	r18
    1e32:	3f 93       	push	r19
    1e34:	4f 93       	push	r20
    1e36:	5f 93       	push	r21
    1e38:	6f 93       	push	r22
    1e3a:	7f 93       	push	r23
    1e3c:	8f 93       	push	r24
    1e3e:	9f 93       	push	r25
    1e40:	af 93       	push	r26
    1e42:	bf 93       	push	r27
    1e44:	ef 93       	push	r30
    1e46:	ff 93       	push	r31
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrOvf != NULL_PTR)
    1e50:	80 91 74 01 	lds	r24, 0x0174
    1e54:	90 91 75 01 	lds	r25, 0x0175
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	29 f0       	breq	.+10     	; 0x1e66 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrOvf)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1e5c:	e0 91 74 01 	lds	r30, 0x0174
    1e60:	f0 91 75 01 	lds	r31, 0x0175
    1e64:	09 95       	icall
	}
}
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	ff 91       	pop	r31
    1e6c:	ef 91       	pop	r30
    1e6e:	bf 91       	pop	r27
    1e70:	af 91       	pop	r26
    1e72:	9f 91       	pop	r25
    1e74:	8f 91       	pop	r24
    1e76:	7f 91       	pop	r23
    1e78:	6f 91       	pop	r22
    1e7a:	5f 91       	pop	r21
    1e7c:	4f 91       	pop	r20
    1e7e:	3f 91       	pop	r19
    1e80:	2f 91       	pop	r18
    1e82:	0f 90       	pop	r0
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	0f 90       	pop	r0
    1e88:	1f 90       	pop	r1
    1e8a:	18 95       	reti

00001e8c <__vector_7>:

ISR(TIMER1_COMPA_vect){
    1e8c:	1f 92       	push	r1
    1e8e:	0f 92       	push	r0
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	0f 92       	push	r0
    1e94:	11 24       	eor	r1, r1
    1e96:	2f 93       	push	r18
    1e98:	3f 93       	push	r19
    1e9a:	4f 93       	push	r20
    1e9c:	5f 93       	push	r21
    1e9e:	6f 93       	push	r22
    1ea0:	7f 93       	push	r23
    1ea2:	8f 93       	push	r24
    1ea4:	9f 93       	push	r25
    1ea6:	af 93       	push	r26
    1ea8:	bf 93       	push	r27
    1eaa:	ef 93       	push	r30
    1eac:	ff 93       	push	r31
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrCompA != NULL_PTR)
    1eb6:	80 91 76 01 	lds	r24, 0x0176
    1eba:	90 91 77 01 	lds	r25, 0x0177
    1ebe:	00 97       	sbiw	r24, 0x00	; 0
    1ec0:	29 f0       	breq	.+10     	; 0x1ecc <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrCompA)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1ec2:	e0 91 76 01 	lds	r30, 0x0176
    1ec6:	f0 91 77 01 	lds	r31, 0x0177
    1eca:	09 95       	icall
	}
}
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	ff 91       	pop	r31
    1ed2:	ef 91       	pop	r30
    1ed4:	bf 91       	pop	r27
    1ed6:	af 91       	pop	r26
    1ed8:	9f 91       	pop	r25
    1eda:	8f 91       	pop	r24
    1edc:	7f 91       	pop	r23
    1ede:	6f 91       	pop	r22
    1ee0:	5f 91       	pop	r21
    1ee2:	4f 91       	pop	r20
    1ee4:	3f 91       	pop	r19
    1ee6:	2f 91       	pop	r18
    1ee8:	0f 90       	pop	r0
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	0f 90       	pop	r0
    1eee:	1f 90       	pop	r1
    1ef0:	18 95       	reti

00001ef2 <__vector_8>:

ISR(TIMER1_COMPB_vect){
    1ef2:	1f 92       	push	r1
    1ef4:	0f 92       	push	r0
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	0f 92       	push	r0
    1efa:	11 24       	eor	r1, r1
    1efc:	2f 93       	push	r18
    1efe:	3f 93       	push	r19
    1f00:	4f 93       	push	r20
    1f02:	5f 93       	push	r21
    1f04:	6f 93       	push	r22
    1f06:	7f 93       	push	r23
    1f08:	8f 93       	push	r24
    1f0a:	9f 93       	push	r25
    1f0c:	af 93       	push	r26
    1f0e:	bf 93       	push	r27
    1f10:	ef 93       	push	r30
    1f12:	ff 93       	push	r31
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrCompB != NULL_PTR)
    1f1c:	80 91 78 01 	lds	r24, 0x0178
    1f20:	90 91 79 01 	lds	r25, 0x0179
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	29 f0       	breq	.+10     	; 0x1f32 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrCompB)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1f28:	e0 91 78 01 	lds	r30, 0x0178
    1f2c:	f0 91 79 01 	lds	r31, 0x0179
    1f30:	09 95       	icall
	}
}
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	ff 91       	pop	r31
    1f38:	ef 91       	pop	r30
    1f3a:	bf 91       	pop	r27
    1f3c:	af 91       	pop	r26
    1f3e:	9f 91       	pop	r25
    1f40:	8f 91       	pop	r24
    1f42:	7f 91       	pop	r23
    1f44:	6f 91       	pop	r22
    1f46:	5f 91       	pop	r21
    1f48:	4f 91       	pop	r20
    1f4a:	3f 91       	pop	r19
    1f4c:	2f 91       	pop	r18
    1f4e:	0f 90       	pop	r0
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	0f 90       	pop	r0
    1f54:	1f 90       	pop	r1
    1f56:	18 95       	reti

00001f58 <TIMER1_init>:

/* -----------------------------------------------------------------------------
 *                      Functions Definitions                                  *
 ------------------------------------------------------------------------------*/
void TIMER1_init(const Timer1_ConfigType * Config_Ptr){
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	00 d0       	rcall	.+0      	; 0x1f5e <TIMER1_init+0x6>
    1f5e:	00 d0       	rcall	.+0      	; 0x1f60 <TIMER1_init+0x8>
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	9a 83       	std	Y+2, r25	; 0x02
    1f66:	89 83       	std	Y+1, r24	; 0x01
	/*Initial value for timer 1*/
	TCNT1 = Config_Ptr -> initialValue;
    1f68:	ac e4       	ldi	r26, 0x4C	; 76
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f70:	80 81       	ld	r24, Z
    1f72:	91 81       	ldd	r25, Z+1	; 0x01
    1f74:	11 96       	adiw	r26, 0x01	; 1
    1f76:	9c 93       	st	X, r25
    1f78:	8e 93       	st	-X, r24
	switch (Config_Ptr -> mode){
    1f7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f7e:	85 85       	ldd	r24, Z+13	; 0x0d
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	3c 83       	std	Y+4, r19	; 0x04
    1f86:	2b 83       	std	Y+3, r18	; 0x03
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	84 30       	cpi	r24, 0x04	; 4
    1f8e:	91 05       	cpc	r25, r1
    1f90:	d9 f1       	breq	.+118    	; 0x2008 <TIMER1_init+0xb0>
    1f92:	2b 81       	ldd	r18, Y+3	; 0x03
    1f94:	3c 81       	ldd	r19, Y+4	; 0x04
    1f96:	25 30       	cpi	r18, 0x05	; 5
    1f98:	31 05       	cpc	r19, r1
    1f9a:	2c f4       	brge	.+10     	; 0x1fa6 <TIMER1_init+0x4e>
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	71 f0       	breq	.+28     	; 0x1fc0 <TIMER1_init+0x68>
    1fa4:	d3 c0       	rjmp	.+422    	; 0x214c <TIMER1_init+0x1f4>
    1fa6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa8:	3c 81       	ldd	r19, Y+4	; 0x04
    1faa:	2e 30       	cpi	r18, 0x0E	; 14
    1fac:	31 05       	cpc	r19, r1
    1fae:	09 f4       	brne	.+2      	; 0x1fb2 <TIMER1_init+0x5a>
    1fb0:	8e c0       	rjmp	.+284    	; 0x20ce <TIMER1_init+0x176>
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb6:	8f 30       	cpi	r24, 0x0F	; 15
    1fb8:	91 05       	cpc	r25, r1
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <TIMER1_init+0x66>
    1fbc:	52 c0       	rjmp	.+164    	; 0x2062 <TIMER1_init+0x10a>
    1fbe:	c6 c0       	rjmp	.+396    	; 0x214c <TIMER1_init+0x1f4>
	case TIMER1_OVF:
		/*Overflow Interrupt Enable*/
		SET_BIT(TIMSK,TOIE1);
    1fc0:	a9 e5       	ldi	r26, 0x59	; 89
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e9 e5       	ldi	r30, 0x59	; 89
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	84 60       	ori	r24, 0x04	; 4
    1fcc:	8c 93       	st	X, r24
		/*Disable Other Modes Interrupts*/
		CLEAR_BIT(TIMSK,OCIE1A);
    1fce:	a9 e5       	ldi	r26, 0x59	; 89
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e9 e5       	ldi	r30, 0x59	; 89
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	8f 7e       	andi	r24, 0xEF	; 239
    1fda:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE1B);
    1fdc:	a9 e5       	ldi	r26, 0x59	; 89
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e9 e5       	ldi	r30, 0x59	; 89
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	87 7f       	andi	r24, 0xF7	; 247
    1fe8:	8c 93       	st	X, r24
		/*Enable Force Output Compare*/
		SET_BIT(TCCR1A,FOC1A);
    1fea:	af e4       	ldi	r26, 0x4F	; 79
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	ef e4       	ldi	r30, 0x4F	; 79
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	88 60       	ori	r24, 0x08	; 8
    1ff6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    1ff8:	af e4       	ldi	r26, 0x4F	; 79
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	ef e4       	ldi	r30, 0x4F	; 79
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	84 60       	ori	r24, 0x04	; 4
    2004:	8c 93       	st	X, r24
    2006:	d7 c0       	rjmp	.+430    	; 0x21b6 <TIMER1_init+0x25e>
		break;

	case TIMER1_CTC:
		/*Compare Interrupt Enable*/
		SET_BIT(TIMSK,OCIE1A);
    2008:	a9 e5       	ldi	r26, 0x59	; 89
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e9 e5       	ldi	r30, 0x59	; 89
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	80 61       	ori	r24, 0x10	; 16
    2014:	8c 93       	st	X, r24
		/*Disable Other Modes Interrupts*/
		CLEAR_BIT(TIMSK,TOIE1);
    2016:	a9 e5       	ldi	r26, 0x59	; 89
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	e9 e5       	ldi	r30, 0x59	; 89
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	8b 7f       	andi	r24, 0xFB	; 251
    2022:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE1B);
    2024:	a9 e5       	ldi	r26, 0x59	; 89
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	e9 e5       	ldi	r30, 0x59	; 89
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	87 7f       	andi	r24, 0xF7	; 247
    2030:	8c 93       	st	X, r24
		/*Enable Force Output Compare*/
		SET_BIT(TCCR1A,FOC1A);
    2032:	af e4       	ldi	r26, 0x4F	; 79
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	ef e4       	ldi	r30, 0x4F	; 79
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	88 60       	ori	r24, 0x08	; 8
    203e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,FOC1B);
    2040:	af e4       	ldi	r26, 0x4F	; 79
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	ef e4       	ldi	r30, 0x4F	; 79
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	8b 7f       	andi	r24, 0xFB	; 251
    204c:	8c 93       	st	X, r24
		/*Set Compare Value*/
		OCR1A = Config_Ptr -> tick;
    204e:	aa e4       	ldi	r26, 0x4A	; 74
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e9 81       	ldd	r30, Y+1	; 0x01
    2054:	fa 81       	ldd	r31, Y+2	; 0x02
    2056:	82 81       	ldd	r24, Z+2	; 0x02
    2058:	93 81       	ldd	r25, Z+3	; 0x03
    205a:	11 96       	adiw	r26, 0x01	; 1
    205c:	9c 93       	st	X, r25
    205e:	8e 93       	st	-X, r24
    2060:	aa c0       	rjmp	.+340    	; 0x21b6 <TIMER1_init+0x25e>
		break;

	case TIMER1_FAST_PWM_OCR1A:
		/*Disable All Interrupts*/
		CLEAR_BIT(TIMSK,OCIE1A);
    2062:	a9 e5       	ldi	r26, 0x59	; 89
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e9 e5       	ldi	r30, 0x59	; 89
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	8f 7e       	andi	r24, 0xEF	; 239
    206e:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE1B);
    2070:	a9 e5       	ldi	r26, 0x59	; 89
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	e9 e5       	ldi	r30, 0x59	; 89
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	87 7f       	andi	r24, 0xF7	; 247
    207c:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE1);
    207e:	a9 e5       	ldi	r26, 0x59	; 89
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e9 e5       	ldi	r30, 0x59	; 89
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	8b 7f       	andi	r24, 0xFB	; 251
    208a:	8c 93       	st	X, r24
		/*DisableForce Output Compare*/
		CLEAR_BIT(TCCR1A,FOC1A);
    208c:	af e4       	ldi	r26, 0x4F	; 79
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	ef e4       	ldi	r30, 0x4F	; 79
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	87 7f       	andi	r24, 0xF7	; 247
    2098:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,FOC1B);
    209a:	af e4       	ldi	r26, 0x4F	; 79
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	ef e4       	ldi	r30, 0x4F	; 79
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	8b 7f       	andi	r24, 0xFB	; 251
    20a6:	8c 93       	st	X, r24
		/*Set Top Value*/
		OCR1A = Config_Ptr -> top;
    20a8:	aa e4       	ldi	r26, 0x4A	; 74
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e9 81       	ldd	r30, Y+1	; 0x01
    20ae:	fa 81       	ldd	r31, Y+2	; 0x02
    20b0:	84 81       	ldd	r24, Z+4	; 0x04
    20b2:	95 81       	ldd	r25, Z+5	; 0x05
    20b4:	11 96       	adiw	r26, 0x01	; 1
    20b6:	9c 93       	st	X, r25
    20b8:	8e 93       	st	-X, r24
		/*Set Compare Value*/
		OCR1B = Config_Ptr -> dutyCycleB;
    20ba:	a8 e4       	ldi	r26, 0x48	; 72
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e9 81       	ldd	r30, Y+1	; 0x01
    20c0:	fa 81       	ldd	r31, Y+2	; 0x02
    20c2:	80 85       	ldd	r24, Z+8	; 0x08
    20c4:	91 85       	ldd	r25, Z+9	; 0x09
    20c6:	11 96       	adiw	r26, 0x01	; 1
    20c8:	9c 93       	st	X, r25
    20ca:	8e 93       	st	-X, r24
    20cc:	74 c0       	rjmp	.+232    	; 0x21b6 <TIMER1_init+0x25e>
		break;

	case TIMER1_FAST_PWM_ICR1:
		/*Disable All Interrupts*/
		CLEAR_BIT(TIMSK,OCIE1A);
    20ce:	a9 e5       	ldi	r26, 0x59	; 89
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e9 e5       	ldi	r30, 0x59	; 89
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	8f 7e       	andi	r24, 0xEF	; 239
    20da:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE1B);
    20dc:	a9 e5       	ldi	r26, 0x59	; 89
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e9 e5       	ldi	r30, 0x59	; 89
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	87 7f       	andi	r24, 0xF7	; 247
    20e8:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE1);
    20ea:	a9 e5       	ldi	r26, 0x59	; 89
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e9 e5       	ldi	r30, 0x59	; 89
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	8b 7f       	andi	r24, 0xFB	; 251
    20f6:	8c 93       	st	X, r24
		/*DisableForce Output Compare*/
		CLEAR_BIT(TCCR1A,FOC1A);
    20f8:	af e4       	ldi	r26, 0x4F	; 79
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	ef e4       	ldi	r30, 0x4F	; 79
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	87 7f       	andi	r24, 0xF7	; 247
    2104:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,FOC1B);
    2106:	af e4       	ldi	r26, 0x4F	; 79
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	ef e4       	ldi	r30, 0x4F	; 79
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	8b 7f       	andi	r24, 0xFB	; 251
    2112:	8c 93       	st	X, r24
		/*Set Top Value*/
		ICR1 = Config_Ptr -> top;
    2114:	a6 e4       	ldi	r26, 0x46	; 70
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	e9 81       	ldd	r30, Y+1	; 0x01
    211a:	fa 81       	ldd	r31, Y+2	; 0x02
    211c:	84 81       	ldd	r24, Z+4	; 0x04
    211e:	95 81       	ldd	r25, Z+5	; 0x05
    2120:	11 96       	adiw	r26, 0x01	; 1
    2122:	9c 93       	st	X, r25
    2124:	8e 93       	st	-X, r24
		/*Set Compare Value*/
		OCR1A = Config_Ptr -> dutyCycleA;
    2126:	aa e4       	ldi	r26, 0x4A	; 74
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e9 81       	ldd	r30, Y+1	; 0x01
    212c:	fa 81       	ldd	r31, Y+2	; 0x02
    212e:	86 81       	ldd	r24, Z+6	; 0x06
    2130:	97 81       	ldd	r25, Z+7	; 0x07
    2132:	11 96       	adiw	r26, 0x01	; 1
    2134:	9c 93       	st	X, r25
    2136:	8e 93       	st	-X, r24
		OCR1B = Config_Ptr -> dutyCycleB;
    2138:	a8 e4       	ldi	r26, 0x48	; 72
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	e9 81       	ldd	r30, Y+1	; 0x01
    213e:	fa 81       	ldd	r31, Y+2	; 0x02
    2140:	80 85       	ldd	r24, Z+8	; 0x08
    2142:	91 85       	ldd	r25, Z+9	; 0x09
    2144:	11 96       	adiw	r26, 0x01	; 1
    2146:	9c 93       	st	X, r25
    2148:	8e 93       	st	-X, r24
    214a:	35 c0       	rjmp	.+106    	; 0x21b6 <TIMER1_init+0x25e>
		break;

	default:
		/*Disable All Interrupts*/
		CLEAR_BIT(TIMSK,OCIE1A);
    214c:	a9 e5       	ldi	r26, 0x59	; 89
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	e9 e5       	ldi	r30, 0x59	; 89
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	8f 7e       	andi	r24, 0xEF	; 239
    2158:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE1B);
    215a:	a9 e5       	ldi	r26, 0x59	; 89
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e9 e5       	ldi	r30, 0x59	; 89
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	87 7f       	andi	r24, 0xF7	; 247
    2166:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE1);
    2168:	a9 e5       	ldi	r26, 0x59	; 89
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e9 e5       	ldi	r30, 0x59	; 89
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	8b 7f       	andi	r24, 0xFB	; 251
    2174:	8c 93       	st	X, r24
		/*DisableForce Output Compare*/
		CLEAR_BIT(TCCR1A,FOC1A);
    2176:	af e4       	ldi	r26, 0x4F	; 79
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	ef e4       	ldi	r30, 0x4F	; 79
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	87 7f       	andi	r24, 0xF7	; 247
    2182:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,FOC1B);
    2184:	af e4       	ldi	r26, 0x4F	; 79
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	ef e4       	ldi	r30, 0x4F	; 79
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	8b 7f       	andi	r24, 0xFB	; 251
    2190:	8c 93       	st	X, r24
		/*Set Compare Value*/
		OCR1A = Config_Ptr -> dutyCycleA;
    2192:	aa e4       	ldi	r26, 0x4A	; 74
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e9 81       	ldd	r30, Y+1	; 0x01
    2198:	fa 81       	ldd	r31, Y+2	; 0x02
    219a:	86 81       	ldd	r24, Z+6	; 0x06
    219c:	97 81       	ldd	r25, Z+7	; 0x07
    219e:	11 96       	adiw	r26, 0x01	; 1
    21a0:	9c 93       	st	X, r25
    21a2:	8e 93       	st	-X, r24
		OCR1B = Config_Ptr -> dutyCycleB;
    21a4:	a8 e4       	ldi	r26, 0x48	; 72
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e9 81       	ldd	r30, Y+1	; 0x01
    21aa:	fa 81       	ldd	r31, Y+2	; 0x02
    21ac:	80 85       	ldd	r24, Z+8	; 0x08
    21ae:	91 85       	ldd	r25, Z+9	; 0x09
    21b0:	11 96       	adiw	r26, 0x01	; 1
    21b2:	9c 93       	st	X, r25
    21b4:	8e 93       	st	-X, r24
	}

	/*Select Mode*/
	TCCR1A = (TCCR1A & NUM_TO_CLEAR_FIRST_2_BITS) |\
    21b6:	af e4       	ldi	r26, 0x4F	; 79
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	ef e4       	ldi	r30, 0x4F	; 79
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	98 2f       	mov	r25, r24
    21c2:	9c 7f       	andi	r25, 0xFC	; 252
    21c4:	e9 81       	ldd	r30, Y+1	; 0x01
    21c6:	fa 81       	ldd	r31, Y+2	; 0x02
    21c8:	85 85       	ldd	r24, Z+13	; 0x0d
    21ca:	83 70       	andi	r24, 0x03	; 3
    21cc:	89 2b       	or	r24, r25
    21ce:	8c 93       	st	X, r24
			(Config_Ptr -> mode & NUM_TO_CLEAR_LAST_6_BITS);
	TCCR1B = (TCCR1B & NUM_TO_CLEAR_3_4TH_BITS) |\
    21d0:	ae e4       	ldi	r26, 0x4E	; 78
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	ee e4       	ldi	r30, 0x4E	; 78
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	28 2f       	mov	r18, r24
    21dc:	27 7e       	andi	r18, 0xE7	; 231
    21de:	e9 81       	ldd	r30, Y+1	; 0x01
    21e0:	fa 81       	ldd	r31, Y+2	; 0x02
    21e2:	85 85       	ldd	r24, Z+13	; 0x0d
    21e4:	88 2f       	mov	r24, r24
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	8c 70       	andi	r24, 0x0C	; 12
    21ea:	90 70       	andi	r25, 0x00	; 0
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	82 2b       	or	r24, r18
    21f2:	8c 93       	st	X, r24
			((Config_Ptr -> mode & NUM_TO_CLEAR_FIRST_2_BITS_LAST_4_BITS)<<1);
	/*OC1A Mode Selection*/
	TCCR1A = (TCCR1A & NUM_TO_CLEAR_LAST_2_BITS) |\
    21f4:	af e4       	ldi	r26, 0x4F	; 79
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	ef e4       	ldi	r30, 0x4F	; 79
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	28 2f       	mov	r18, r24
    2200:	2f 73       	andi	r18, 0x3F	; 63
    2202:	e9 81       	ldd	r30, Y+1	; 0x01
    2204:	fa 81       	ldd	r31, Y+2	; 0x02
    2206:	83 85       	ldd	r24, Z+11	; 0x0b
    2208:	88 2f       	mov	r24, r24
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	00 24       	eor	r0, r0
    220e:	96 95       	lsr	r25
    2210:	87 95       	ror	r24
    2212:	07 94       	ror	r0
    2214:	96 95       	lsr	r25
    2216:	87 95       	ror	r24
    2218:	07 94       	ror	r0
    221a:	98 2f       	mov	r25, r24
    221c:	80 2d       	mov	r24, r0
    221e:	82 2b       	or	r24, r18
    2220:	8c 93       	st	X, r24
			((Config_Ptr -> oc1AMode & NUM_TO_CLEAR_LAST_6_BITS)<<6);
	/*OC1B Mode Selection*/
	TCCR1A = (TCCR1A & NUM_TO_CLEAR_4_5TH_BITS) |\
    2222:	af e4       	ldi	r26, 0x4F	; 79
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	ef e4       	ldi	r30, 0x4F	; 79
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	28 2f       	mov	r18, r24
    222e:	2f 7c       	andi	r18, 0xCF	; 207
    2230:	e9 81       	ldd	r30, Y+1	; 0x01
    2232:	fa 81       	ldd	r31, Y+2	; 0x02
    2234:	84 85       	ldd	r24, Z+12	; 0x0c
    2236:	88 2f       	mov	r24, r24
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	83 70       	andi	r24, 0x03	; 3
    223c:	90 70       	andi	r25, 0x00	; 0
    223e:	82 95       	swap	r24
    2240:	92 95       	swap	r25
    2242:	90 7f       	andi	r25, 0xF0	; 240
    2244:	98 27       	eor	r25, r24
    2246:	80 7f       	andi	r24, 0xF0	; 240
    2248:	98 27       	eor	r25, r24
    224a:	82 2b       	or	r24, r18
    224c:	8c 93       	st	X, r24
			((Config_Ptr -> oc1BMode & NUM_TO_CLEAR_LAST_6_BITS)<<4);
	/*Initialize Clock*/
	TCCR1B = (TCCR1B & NUM_TO_CLEAR_FIRST_3_BITS) |\
    224e:	ae e4       	ldi	r26, 0x4E	; 78
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	ee e4       	ldi	r30, 0x4E	; 78
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	98 2f       	mov	r25, r24
    225a:	98 7f       	andi	r25, 0xF8	; 248
    225c:	e9 81       	ldd	r30, Y+1	; 0x01
    225e:	fa 81       	ldd	r31, Y+2	; 0x02
    2260:	82 85       	ldd	r24, Z+10	; 0x0a
    2262:	87 70       	andi	r24, 0x07	; 7
    2264:	89 2b       	or	r24, r25
    2266:	8c 93       	st	X, r24
			(Config_Ptr -> clock & NUM_TO_CLEAR_LAST_5_BITS);	

	if(Config_Ptr -> oc1AMode != OC1_A_DISCONNECT){
    2268:	e9 81       	ldd	r30, Y+1	; 0x01
    226a:	fa 81       	ldd	r31, Y+2	; 0x02
    226c:	83 85       	ldd	r24, Z+11	; 0x0b
    226e:	88 23       	and	r24, r24
    2270:	b1 f0       	breq	.+44     	; 0x229e <TIMER1_init+0x346>
		CLEAR_BIT(TIMSK,OCIE1A);
    2272:	a9 e5       	ldi	r26, 0x59	; 89
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	e9 e5       	ldi	r30, 0x59	; 89
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	8f 7e       	andi	r24, 0xEF	; 239
    227e:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE1);
    2280:	a9 e5       	ldi	r26, 0x59	; 89
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	e9 e5       	ldi	r30, 0x59	; 89
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	8b 7f       	andi	r24, 0xFB	; 251
    228c:	8c 93       	st	X, r24
		/*OC1A as output*/
		DDRD |= (1<<PD5);
    228e:	a1 e3       	ldi	r26, 0x31	; 49
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	e1 e3       	ldi	r30, 0x31	; 49
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	80 62       	ori	r24, 0x20	; 32
    229a:	8c 93       	st	X, r24
    229c:	1a c0       	rjmp	.+52     	; 0x22d2 <TIMER1_init+0x37a>
	}
	else if(Config_Ptr -> oc1BMode != OC1_B_DISCONNECT){
    229e:	e9 81       	ldd	r30, Y+1	; 0x01
    22a0:	fa 81       	ldd	r31, Y+2	; 0x02
    22a2:	84 85       	ldd	r24, Z+12	; 0x0c
    22a4:	88 23       	and	r24, r24
    22a6:	a9 f0       	breq	.+42     	; 0x22d2 <TIMER1_init+0x37a>
		CLEAR_BIT(TIMSK,OCIE1B);
    22a8:	a9 e5       	ldi	r26, 0x59	; 89
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	e9 e5       	ldi	r30, 0x59	; 89
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	87 7f       	andi	r24, 0xF7	; 247
    22b4:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE1);
    22b6:	a9 e5       	ldi	r26, 0x59	; 89
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	e9 e5       	ldi	r30, 0x59	; 89
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	8b 7f       	andi	r24, 0xFB	; 251
    22c2:	8c 93       	st	X, r24
		/*OC1B as output*/
		DDRD |= (1<<PD4);
    22c4:	a1 e3       	ldi	r26, 0x31	; 49
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e1 e3       	ldi	r30, 0x31	; 49
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	80 61       	ori	r24, 0x10	; 16
    22d0:	8c 93       	st	X, r24
	}
}
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <TIMER1_setCallBack>:

void TIMER1_setCallBack(void(*a_ptr)(void),const Timer1_ModeOfOperation mode){
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	00 d0       	rcall	.+0      	; 0x22e6 <TIMER1_setCallBack+0x6>
    22e6:	00 d0       	rcall	.+0      	; 0x22e8 <TIMER1_setCallBack+0x8>
    22e8:	0f 92       	push	r0
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	9a 83       	std	Y+2, r25	; 0x02
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	6b 83       	std	Y+3, r22	; 0x03
	/* Save the address of the Call back function in a global variable */
	switch (mode){
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	28 2f       	mov	r18, r24
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	3d 83       	std	Y+5, r19	; 0x05
    22fc:	2c 83       	std	Y+4, r18	; 0x04
    22fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2300:	9d 81       	ldd	r25, Y+5	; 0x05
    2302:	00 97       	sbiw	r24, 0x00	; 0
    2304:	31 f0       	breq	.+12     	; 0x2312 <TIMER1_setCallBack+0x32>
    2306:	2c 81       	ldd	r18, Y+4	; 0x04
    2308:	3d 81       	ldd	r19, Y+5	; 0x05
    230a:	24 30       	cpi	r18, 0x04	; 4
    230c:	31 05       	cpc	r19, r1
    230e:	41 f0       	breq	.+16     	; 0x2320 <TIMER1_setCallBack+0x40>
    2310:	0d c0       	rjmp	.+26     	; 0x232c <TIMER1_setCallBack+0x4c>
	case TIMER1_OVF:
		g_callBackPtrOvf = a_ptr;
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	9a 81       	ldd	r25, Y+2	; 0x02
    2316:	90 93 75 01 	sts	0x0175, r25
    231a:	80 93 74 01 	sts	0x0174, r24
    231e:	06 c0       	rjmp	.+12     	; 0x232c <TIMER1_setCallBack+0x4c>
		break;
	case TIMER1_CTC:
		g_callBackPtrCompA = a_ptr;
    2320:	89 81       	ldd	r24, Y+1	; 0x01
    2322:	9a 81       	ldd	r25, Y+2	; 0x02
    2324:	90 93 77 01 	sts	0x0177, r25
    2328:	80 93 76 01 	sts	0x0176, r24
		break;
	}
}
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <TIMER1_deInit>:

void TIMER1_deInit(void)
{
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    2344:	ef e4       	ldi	r30, 0x4F	; 79
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	10 82       	st	Z, r1
	TCCR1B=0;
    234a:	ee e4       	ldi	r30, 0x4E	; 78
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	10 82       	st	Z, r1
	/*Disable All Interrupts*/
	CLEAR_BIT(TIMSK,OCIE1A);
    2350:	a9 e5       	ldi	r26, 0x59	; 89
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e9 e5       	ldi	r30, 0x59	; 89
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	8f 7e       	andi	r24, 0xEF	; 239
    235c:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,OCIE1B);
    235e:	a9 e5       	ldi	r26, 0x59	; 89
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e9 e5       	ldi	r30, 0x59	; 89
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	87 7f       	andi	r24, 0xF7	; 247
    236a:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE1);
    236c:	a9 e5       	ldi	r26, 0x59	; 89
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e9 e5       	ldi	r30, 0x59	; 89
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	8b 7f       	andi	r24, 0xFB	; 251
    2378:	8c 93       	st	X, r24
}
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <TIMER1_startCount>:

void TIMER1_startCount(const Timer1_Clock a_clock){
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	0f 92       	push	r0
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
    238a:	89 83       	std	Y+1, r24	; 0x01
	/*Initialize Clock*/
	TCCR1B = (TCCR1B & NUM_TO_CLEAR_FIRST_3_BITS) |\
    238c:	ae e4       	ldi	r26, 0x4E	; 78
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	ee e4       	ldi	r30, 0x4E	; 78
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	98 2f       	mov	r25, r24
    2398:	98 7f       	andi	r25, 0xF8	; 248
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	87 70       	andi	r24, 0x07	; 7
    239e:	89 2b       	or	r24, r25
    23a0:	8c 93       	st	X, r24
			(a_clock & NUM_TO_CLEAR_LAST_5_BITS);
}
    23a2:	0f 90       	pop	r0
    23a4:	cf 91       	pop	r28
    23a6:	df 91       	pop	r29
    23a8:	08 95       	ret

000023aa <TIMER1_stopCount>:

void TIMER1_stopCount(void){
    23aa:	df 93       	push	r29
    23ac:	cf 93       	push	r28
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= NUM_TO_CLEAR_FIRST_3_BITS;
    23b2:	ae e4       	ldi	r26, 0x4E	; 78
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	ee e4       	ldi	r30, 0x4E	; 78
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	88 7f       	andi	r24, 0xF8	; 248
    23be:	8c 93       	st	X, r24
}
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <TIMER1_changeDutyCyle>:

void TIMER1_changeDutyCyle(uint16 duty,Timer1_channels channel){
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <TIMER1_changeDutyCyle+0x6>
    23cc:	00 d0       	rcall	.+0      	; 0x23ce <TIMER1_changeDutyCyle+0x8>
    23ce:	0f 92       	push	r0
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	9a 83       	std	Y+2, r25	; 0x02
    23d6:	89 83       	std	Y+1, r24	; 0x01
    23d8:	6b 83       	std	Y+3, r22	; 0x03
	switch (channel){
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	28 2f       	mov	r18, r24
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	3d 83       	std	Y+5, r19	; 0x05
    23e2:	2c 83       	std	Y+4, r18	; 0x04
    23e4:	8c 81       	ldd	r24, Y+4	; 0x04
    23e6:	9d 81       	ldd	r25, Y+5	; 0x05
    23e8:	81 30       	cpi	r24, 0x01	; 1
    23ea:	91 05       	cpc	r25, r1
    23ec:	81 f0       	breq	.+32     	; 0x240e <TIMER1_changeDutyCyle+0x48>
    23ee:	2c 81       	ldd	r18, Y+4	; 0x04
    23f0:	3d 81       	ldd	r19, Y+5	; 0x05
    23f2:	22 30       	cpi	r18, 0x02	; 2
    23f4:	31 05       	cpc	r19, r1
    23f6:	91 f0       	breq	.+36     	; 0x241c <TIMER1_changeDutyCyle+0x56>
    23f8:	8c 81       	ldd	r24, Y+4	; 0x04
    23fa:	9d 81       	ldd	r25, Y+5	; 0x05
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	d1 f4       	brne	.+52     	; 0x2434 <TIMER1_changeDutyCyle+0x6e>
	case OC1_A:
		OCR1A = duty;
    2400:	ea e4       	ldi	r30, 0x4A	; 74
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	9a 81       	ldd	r25, Y+2	; 0x02
    2408:	91 83       	std	Z+1, r25	; 0x01
    240a:	80 83       	st	Z, r24
    240c:	13 c0       	rjmp	.+38     	; 0x2434 <TIMER1_changeDutyCyle+0x6e>
		break;
	case OC1_B:
		OCR1B = duty;
    240e:	e8 e4       	ldi	r30, 0x48	; 72
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	89 81       	ldd	r24, Y+1	; 0x01
    2414:	9a 81       	ldd	r25, Y+2	; 0x02
    2416:	91 83       	std	Z+1, r25	; 0x01
    2418:	80 83       	st	Z, r24
    241a:	0c c0       	rjmp	.+24     	; 0x2434 <TIMER1_changeDutyCyle+0x6e>
		break;
	case OC1_A_B:
		OCR1A = duty;
    241c:	ea e4       	ldi	r30, 0x4A	; 74
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	9a 81       	ldd	r25, Y+2	; 0x02
    2424:	91 83       	std	Z+1, r25	; 0x01
    2426:	80 83       	st	Z, r24
		OCR1B = duty;
    2428:	e8 e4       	ldi	r30, 0x48	; 72
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	9a 81       	ldd	r25, Y+2	; 0x02
    2430:	91 83       	std	Z+1, r25	; 0x01
    2432:	80 83       	st	Z, r24
	}
}
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	cf 91       	pop	r28
    2440:	df 91       	pop	r29
    2442:	08 95       	ret

00002444 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(Twi_ConfigType* conf_ptr)
{
    2444:	ef 92       	push	r14
    2446:	ff 92       	push	r15
    2448:	0f 93       	push	r16
    244a:	1f 93       	push	r17
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	00 d0       	rcall	.+0      	; 0x2452 <TWI_init+0xe>
    2452:	0f 92       	push	r0
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	9b 83       	std	Y+3, r25	; 0x03
    245a:	8a 83       	std	Y+2, r24	; 0x02
	sint8 twbrValue = (float)(((F_CPU/conf_ptr->speed)-16)/(2*conf_ptr->prescalar));
    245c:	ea 81       	ldd	r30, Y+2	; 0x02
    245e:	fb 81       	ldd	r31, Y+3	; 0x03
    2460:	20 81       	ld	r18, Z
    2462:	31 81       	ldd	r19, Z+1	; 0x01
    2464:	42 81       	ldd	r20, Z+2	; 0x02
    2466:	53 81       	ldd	r21, Z+3	; 0x03
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	92 e1       	ldi	r25, 0x12	; 18
    246c:	aa e7       	ldi	r26, 0x7A	; 122
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	bc 01       	movw	r22, r24
    2472:	cd 01       	movw	r24, r26
    2474:	0e 94 1c 14 	call	0x2838	; 0x2838 <__udivmodsi4>
    2478:	da 01       	movw	r26, r20
    247a:	c9 01       	movw	r24, r18
    247c:	0f 2e       	mov	r0, r31
    247e:	f0 ef       	ldi	r31, 0xF0	; 240
    2480:	ef 2e       	mov	r14, r31
    2482:	ff ef       	ldi	r31, 0xFF	; 255
    2484:	ff 2e       	mov	r15, r31
    2486:	ff ef       	ldi	r31, 0xFF	; 255
    2488:	0f 2f       	mov	r16, r31
    248a:	ff ef       	ldi	r31, 0xFF	; 255
    248c:	1f 2f       	mov	r17, r31
    248e:	f0 2d       	mov	r31, r0
    2490:	e8 0e       	add	r14, r24
    2492:	f9 1e       	adc	r15, r25
    2494:	0a 1f       	adc	r16, r26
    2496:	1b 1f       	adc	r17, r27
    2498:	ea 81       	ldd	r30, Y+2	; 0x02
    249a:	fb 81       	ldd	r31, Y+3	; 0x03
    249c:	84 81       	ldd	r24, Z+4	; 0x04
    249e:	88 2f       	mov	r24, r24
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	88 0f       	add	r24, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	9c 01       	movw	r18, r24
    24a8:	44 27       	eor	r20, r20
    24aa:	37 fd       	sbrc	r19, 7
    24ac:	40 95       	com	r20
    24ae:	54 2f       	mov	r21, r20
    24b0:	c8 01       	movw	r24, r16
    24b2:	b7 01       	movw	r22, r14
    24b4:	0e 94 1c 14 	call	0x2838	; 0x2838 <__udivmodsi4>
    24b8:	da 01       	movw	r26, r20
    24ba:	c9 01       	movw	r24, r18
    24bc:	bc 01       	movw	r22, r24
    24be:	cd 01       	movw	r24, r26
    24c0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	bc 01       	movw	r22, r24
    24ca:	cd 01       	movw	r24, r26
    24cc:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	89 83       	std	Y+1, r24	; 0x01
	TWBR = twbrValue;
    24d6:	e0 e2       	ldi	r30, 0x20	; 32
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	80 83       	st	Z, r24
	TWSR = conf_ptr->prescalar;
    24de:	a1 e2       	ldi	r26, 0x21	; 33
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	ea 81       	ldd	r30, Y+2	; 0x02
    24e4:	fb 81       	ldd	r31, Y+3	; 0x03
    24e6:	84 81       	ldd	r24, Z+4	; 0x04
    24e8:	8c 93       	st	X, r24

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
	       General Call Recognition: Off */
	TWAR = conf_ptr->address;
    24ea:	a2 e2       	ldi	r26, 0x22	; 34
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	ea 81       	ldd	r30, Y+2	; 0x02
    24f0:	fb 81       	ldd	r31, Y+3	; 0x03
    24f2:	85 81       	ldd	r24, Z+5	; 0x05
    24f4:	8c 93       	st	X, r24

	TWCR = (1<<TWEN); /* enable TWI */
    24f6:	e6 e5       	ldi	r30, 0x56	; 86
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	84 e0       	ldi	r24, 0x04	; 4
    24fc:	80 83       	st	Z, r24
}
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	0f 90       	pop	r0
    2504:	cf 91       	pop	r28
    2506:	df 91       	pop	r29
    2508:	1f 91       	pop	r17
    250a:	0f 91       	pop	r16
    250c:	ff 90       	pop	r15
    250e:	ef 90       	pop	r14
    2510:	08 95       	ret

00002512 <TWI_start>:

void TWI_start(void)
{
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    251a:	e6 e5       	ldi	r30, 0x56	; 86
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	84 ea       	ldi	r24, 0xA4	; 164
    2520:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2522:	e6 e5       	ldi	r30, 0x56	; 86
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	88 23       	and	r24, r24
    252a:	dc f7       	brge	.-10     	; 0x2522 <TWI_start+0x10>
}
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <TWI_stop>:

void TWI_stop(void)
{
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    253a:	e6 e5       	ldi	r30, 0x56	; 86
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	84 e9       	ldi	r24, 0x94	; 148
    2540:	80 83       	st	Z, r24
}
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	08 95       	ret

00002548 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	0f 92       	push	r0
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
    2552:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    2554:	e3 e2       	ldi	r30, 0x23	; 35
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN);
    255c:	e6 e5       	ldi	r30, 0x56	; 86
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	84 e8       	ldi	r24, 0x84	; 132
    2562:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2564:	e6 e5       	ldi	r30, 0x56	; 86
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	88 23       	and	r24, r24
    256c:	dc f7       	brge	.-10     	; 0x2564 <TWI_writeByte+0x1c>
}
    256e:	0f 90       	pop	r0
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	08 95       	ret

00002576 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    257e:	e6 e5       	ldi	r30, 0x56	; 86
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	84 ec       	ldi	r24, 0xC4	; 196
    2584:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2586:	e6 e5       	ldi	r30, 0x56	; 86
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	88 23       	and	r24, r24
    258e:	dc f7       	brge	.-10     	; 0x2586 <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    2590:	e3 e2       	ldi	r30, 0x23	; 35
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
}
    2596:	cf 91       	pop	r28
    2598:	df 91       	pop	r29
    259a:	08 95       	ret

0000259c <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    25a4:	e6 e5       	ldi	r30, 0x56	; 86
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	84 e8       	ldi	r24, 0x84	; 132
    25aa:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    25ac:	e6 e5       	ldi	r30, 0x56	; 86
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	80 81       	ld	r24, Z
    25b2:	88 23       	and	r24, r24
    25b4:	dc f7       	brge	.-10     	; 0x25ac <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    25b6:	e3 e2       	ldi	r30, 0x23	; 35
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
}
    25bc:	cf 91       	pop	r28
    25be:	df 91       	pop	r29
    25c0:	08 95       	ret

000025c2 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    25c2:	df 93       	push	r29
    25c4:	cf 93       	push	r28
    25c6:	0f 92       	push	r0
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    25cc:	e1 e2       	ldi	r30, 0x21	; 33
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	88 7f       	andi	r24, 0xF8	; 248
    25d4:	89 83       	std	Y+1, r24	; 0x01
	return status;
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    25d8:	0f 90       	pop	r0
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <UART_init>:
#include<avr/io.h>
#include"uart_m.h"
#include"common_macros.h"

void UART_init( uint32 f_cpu ,UART_Configuration * config_ptr)
{
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	28 97       	sbiw	r28, 0x08	; 8
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	f8 94       	cli
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	cd bf       	out	0x3d, r28	; 61
    25f4:	6b 83       	std	Y+3, r22	; 0x03
    25f6:	7c 83       	std	Y+4, r23	; 0x04
    25f8:	8d 83       	std	Y+5, r24	; 0x05
    25fa:	9e 83       	std	Y+6, r25	; 0x06
    25fc:	58 87       	std	Y+8, r21	; 0x08
    25fe:	4f 83       	std	Y+7, r20	; 0x07
	SET_BIT(UCSRA,U2X);
    2600:	ab e2       	ldi	r26, 0x2B	; 43
    2602:	b0 e0       	ldi	r27, 0x00	; 0
    2604:	eb e2       	ldi	r30, 0x2B	; 43
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	82 60       	ori	r24, 0x02	; 2
    260c:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
    260e:	aa e2       	ldi	r26, 0x2A	; 42
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	ea e2       	ldi	r30, 0x2A	; 42
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 81       	ld	r24, Z
    2618:	80 61       	ori	r24, 0x10	; 16
    261a:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    261c:	aa e2       	ldi	r26, 0x2A	; 42
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	ea e2       	ldi	r30, 0x2A	; 42
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	88 60       	ori	r24, 0x08	; 8
    2628:	8c 93       	st	X, r24
	SET_BIT(UCSRC,URSEL);
    262a:	a0 e4       	ldi	r26, 0x40	; 64
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	e0 e4       	ldi	r30, 0x40	; 64
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	80 68       	ori	r24, 0x80	; 128
    2636:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0XCF) | ((config_ptr->parity) << 4);
    2638:	a0 e4       	ldi	r26, 0x40	; 64
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	e0 e4       	ldi	r30, 0x40	; 64
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	28 2f       	mov	r18, r24
    2644:	2f 7c       	andi	r18, 0xCF	; 207
    2646:	ef 81       	ldd	r30, Y+7	; 0x07
    2648:	f8 85       	ldd	r31, Y+8	; 0x08
    264a:	80 81       	ld	r24, Z
    264c:	88 2f       	mov	r24, r24
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	82 95       	swap	r24
    2652:	92 95       	swap	r25
    2654:	90 7f       	andi	r25, 0xF0	; 240
    2656:	98 27       	eor	r25, r24
    2658:	80 7f       	andi	r24, 0xF0	; 240
    265a:	98 27       	eor	r25, r24
    265c:	82 2b       	or	r24, r18
    265e:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XF7) | ((config_ptr->stop_bit) << 3);
    2660:	a0 e4       	ldi	r26, 0x40	; 64
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	e0 e4       	ldi	r30, 0x40	; 64
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	28 2f       	mov	r18, r24
    266c:	27 7f       	andi	r18, 0xF7	; 247
    266e:	ef 81       	ldd	r30, Y+7	; 0x07
    2670:	f8 85       	ldd	r31, Y+8	; 0x08
    2672:	81 81       	ldd	r24, Z+1	; 0x01
    2674:	88 2f       	mov	r24, r24
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	88 0f       	add	r24, r24
    267a:	99 1f       	adc	r25, r25
    267c:	88 0f       	add	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	88 0f       	add	r24, r24
    2682:	99 1f       	adc	r25, r25
    2684:	82 2b       	or	r24, r18
    2686:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0XFC) | ((config_ptr->no_digit) << 1);
    2688:	a0 e4       	ldi	r26, 0x40	; 64
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	e0 e4       	ldi	r30, 0x40	; 64
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	28 2f       	mov	r18, r24
    2694:	2c 7f       	andi	r18, 0xFC	; 252
    2696:	ef 81       	ldd	r30, Y+7	; 0x07
    2698:	f8 85       	ldd	r31, Y+8	; 0x08
    269a:	82 81       	ldd	r24, Z+2	; 0x02
    269c:	88 2f       	mov	r24, r24
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	88 0f       	add	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	82 2b       	or	r24, r18
    26a6:	8c 93       	st	X, r24

	uint16 ubrr_value = (uint16)(((f_cpu / (config_ptr->baud_rate * 8UL))) - 1);
    26a8:	ef 81       	ldd	r30, Y+7	; 0x07
    26aa:	f8 85       	ldd	r31, Y+8	; 0x08
    26ac:	83 81       	ldd	r24, Z+3	; 0x03
    26ae:	94 81       	ldd	r25, Z+4	; 0x04
    26b0:	cc 01       	movw	r24, r24
    26b2:	a0 e0       	ldi	r26, 0x00	; 0
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	88 0f       	add	r24, r24
    26b8:	99 1f       	adc	r25, r25
    26ba:	aa 1f       	adc	r26, r26
    26bc:	bb 1f       	adc	r27, r27
    26be:	88 0f       	add	r24, r24
    26c0:	99 1f       	adc	r25, r25
    26c2:	aa 1f       	adc	r26, r26
    26c4:	bb 1f       	adc	r27, r27
    26c6:	88 0f       	add	r24, r24
    26c8:	99 1f       	adc	r25, r25
    26ca:	aa 1f       	adc	r26, r26
    26cc:	bb 1f       	adc	r27, r27
    26ce:	9c 01       	movw	r18, r24
    26d0:	ad 01       	movw	r20, r26
    26d2:	8b 81       	ldd	r24, Y+3	; 0x03
    26d4:	9c 81       	ldd	r25, Y+4	; 0x04
    26d6:	ad 81       	ldd	r26, Y+5	; 0x05
    26d8:	be 81       	ldd	r27, Y+6	; 0x06
    26da:	bc 01       	movw	r22, r24
    26dc:	cd 01       	movw	r24, r26
    26de:	0e 94 1c 14 	call	0x2838	; 0x2838 <__udivmodsi4>
    26e2:	da 01       	movw	r26, r20
    26e4:	c9 01       	movw	r24, r18
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	9a 83       	std	Y+2, r25	; 0x02
    26ea:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=ubrr_value;
    26ec:	e9 e2       	ldi	r30, 0x29	; 41
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	80 83       	st	Z, r24
	UBRRH=ubrr_value>>8;
    26f4:	e0 e4       	ldi	r30, 0x40	; 64
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	9a 81       	ldd	r25, Y+2	; 0x02
    26fc:	89 2f       	mov	r24, r25
    26fe:	99 27       	eor	r25, r25
    2700:	80 83       	st	Z, r24
}
    2702:	28 96       	adiw	r28, 0x08	; 8
    2704:	0f b6       	in	r0, 0x3f	; 63
    2706:	f8 94       	cli
    2708:	de bf       	out	0x3e, r29	; 62
    270a:	0f be       	out	0x3f, r0	; 63
    270c:	cd bf       	out	0x3d, r28	; 61
    270e:	cf 91       	pop	r28
    2710:	df 91       	pop	r29
    2712:	08 95       	ret

00002714 <UART_sendByte>:

void UART_sendByte(uint8 data)
{
    2714:	df 93       	push	r29
    2716:	cf 93       	push	r28
    2718:	0f 92       	push	r0
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2720:	eb e2       	ldi	r30, 0x2B	; 43
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	88 2f       	mov	r24, r24
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	80 72       	andi	r24, 0x20	; 32
    272c:	90 70       	andi	r25, 0x00	; 0
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	b9 f3       	breq	.-18     	; 0x2720 <UART_sendByte+0xc>
	UDR = data;
    2732:	ec e2       	ldi	r30, 0x2C	; 44
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	80 83       	st	Z, r24
	/* another method**
	 * UDR = data;
	 * while(CLEAR_BIT(UCSRA,TXC)){}
	 */
}
    273a:	0f 90       	pop	r0
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	08 95       	ret

00002742 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    274a:	eb e2       	ldi	r30, 0x2B	; 43
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	88 23       	and	r24, r24
    2752:	dc f7       	brge	.-10     	; 0x274a <UART_recieveByte+0x8>
	return UDR;
    2754:	ec e2       	ldi	r30, 0x2C	; 44
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
}
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	08 95       	ret

00002760 <UART_sendString>:

void UART_sendString(uint8 * data)
{
    2760:	df 93       	push	r29
    2762:	cf 93       	push	r28
    2764:	00 d0       	rcall	.+0      	; 0x2766 <UART_sendString+0x6>
    2766:	0f 92       	push	r0
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	9b 83       	std	Y+3, r25	; 0x03
    276e:	8a 83       	std	Y+2, r24	; 0x02
	uint8  i =0 ;
    2770:	19 82       	std	Y+1, r1	; 0x01
    2772:	0e c0       	rjmp	.+28     	; 0x2790 <UART_sendString+0x30>
	while(data[i] != '\0')
	{
		UART_sendByte(data[i]);
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	28 2f       	mov	r18, r24
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	9b 81       	ldd	r25, Y+3	; 0x03
    277e:	fc 01       	movw	r30, r24
    2780:	e2 0f       	add	r30, r18
    2782:	f3 1f       	adc	r31, r19
    2784:	80 81       	ld	r24, Z
    2786:	0e 94 8a 13 	call	0x2714	; 0x2714 <UART_sendByte>
		i++;
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	8f 5f       	subi	r24, 0xFF	; 255
    278e:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(uint8 * data)
{
	uint8  i =0 ;
	while(data[i] != '\0')
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	28 2f       	mov	r18, r24
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	9b 81       	ldd	r25, Y+3	; 0x03
    279a:	fc 01       	movw	r30, r24
    279c:	e2 0f       	add	r30, r18
    279e:	f3 1f       	adc	r31, r19
    27a0:	80 81       	ld	r24, Z
    27a2:	88 23       	and	r24, r24
    27a4:	39 f7       	brne	.-50     	; 0x2774 <UART_sendString+0x14>
	{
		UART_sendByte(data[i]);
		i++;
	}
}
    27a6:	0f 90       	pop	r0
    27a8:	0f 90       	pop	r0
    27aa:	0f 90       	pop	r0
    27ac:	cf 91       	pop	r28
    27ae:	df 91       	pop	r29
    27b0:	08 95       	ret

000027b2 <UART_recieveString>:

void UART_recieveString(uint8 * recieve_arr)
{
    27b2:	0f 93       	push	r16
    27b4:	1f 93       	push	r17
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	00 d0       	rcall	.+0      	; 0x27bc <UART_recieveString+0xa>
    27bc:	0f 92       	push	r0
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	9b 83       	std	Y+3, r25	; 0x03
    27c4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    27c6:	19 82       	std	Y+1, r1	; 0x01
	recieve_arr[i] = UART_recieveByte();
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
    27ca:	28 2f       	mov	r18, r24
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	8a 81       	ldd	r24, Y+2	; 0x02
    27d0:	9b 81       	ldd	r25, Y+3	; 0x03
    27d2:	8c 01       	movw	r16, r24
    27d4:	02 0f       	add	r16, r18
    27d6:	13 1f       	adc	r17, r19
    27d8:	0e 94 a1 13 	call	0x2742	; 0x2742 <UART_recieveByte>
    27dc:	f8 01       	movw	r30, r16
    27de:	80 83       	st	Z, r24
    27e0:	0f c0       	rjmp	.+30     	; 0x2800 <UART_recieveString+0x4e>
	while(recieve_arr[i] != '$')
	{
		i++;
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	8f 5f       	subi	r24, 0xFF	; 255
    27e6:	89 83       	std	Y+1, r24	; 0x01
		recieve_arr[i] = UART_recieveByte();
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	28 2f       	mov	r18, r24
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	8a 81       	ldd	r24, Y+2	; 0x02
    27f0:	9b 81       	ldd	r25, Y+3	; 0x03
    27f2:	8c 01       	movw	r16, r24
    27f4:	02 0f       	add	r16, r18
    27f6:	13 1f       	adc	r17, r19
    27f8:	0e 94 a1 13 	call	0x2742	; 0x2742 <UART_recieveByte>
    27fc:	f8 01       	movw	r30, r16
    27fe:	80 83       	st	Z, r24

void UART_recieveString(uint8 * recieve_arr)
{
	uint8 i = 0;
	recieve_arr[i] = UART_recieveByte();
	while(recieve_arr[i] != '$')
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	28 2f       	mov	r18, r24
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	8a 81       	ldd	r24, Y+2	; 0x02
    2808:	9b 81       	ldd	r25, Y+3	; 0x03
    280a:	fc 01       	movw	r30, r24
    280c:	e2 0f       	add	r30, r18
    280e:	f3 1f       	adc	r31, r19
    2810:	80 81       	ld	r24, Z
    2812:	84 32       	cpi	r24, 0x24	; 36
    2814:	31 f7       	brne	.-52     	; 0x27e2 <UART_recieveString+0x30>
	{
		i++;
		recieve_arr[i] = UART_recieveByte();
	}

	recieve_arr[i] = '\0';
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	28 2f       	mov	r18, r24
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	8a 81       	ldd	r24, Y+2	; 0x02
    281e:	9b 81       	ldd	r25, Y+3	; 0x03
    2820:	fc 01       	movw	r30, r24
    2822:	e2 0f       	add	r30, r18
    2824:	f3 1f       	adc	r31, r19
    2826:	10 82       	st	Z, r1
}
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	cf 91       	pop	r28
    2830:	df 91       	pop	r29
    2832:	1f 91       	pop	r17
    2834:	0f 91       	pop	r16
    2836:	08 95       	ret

00002838 <__udivmodsi4>:
    2838:	a1 e2       	ldi	r26, 0x21	; 33
    283a:	1a 2e       	mov	r1, r26
    283c:	aa 1b       	sub	r26, r26
    283e:	bb 1b       	sub	r27, r27
    2840:	fd 01       	movw	r30, r26
    2842:	0d c0       	rjmp	.+26     	; 0x285e <__udivmodsi4_ep>

00002844 <__udivmodsi4_loop>:
    2844:	aa 1f       	adc	r26, r26
    2846:	bb 1f       	adc	r27, r27
    2848:	ee 1f       	adc	r30, r30
    284a:	ff 1f       	adc	r31, r31
    284c:	a2 17       	cp	r26, r18
    284e:	b3 07       	cpc	r27, r19
    2850:	e4 07       	cpc	r30, r20
    2852:	f5 07       	cpc	r31, r21
    2854:	20 f0       	brcs	.+8      	; 0x285e <__udivmodsi4_ep>
    2856:	a2 1b       	sub	r26, r18
    2858:	b3 0b       	sbc	r27, r19
    285a:	e4 0b       	sbc	r30, r20
    285c:	f5 0b       	sbc	r31, r21

0000285e <__udivmodsi4_ep>:
    285e:	66 1f       	adc	r22, r22
    2860:	77 1f       	adc	r23, r23
    2862:	88 1f       	adc	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	1a 94       	dec	r1
    2868:	69 f7       	brne	.-38     	; 0x2844 <__udivmodsi4_loop>
    286a:	60 95       	com	r22
    286c:	70 95       	com	r23
    286e:	80 95       	com	r24
    2870:	90 95       	com	r25
    2872:	9b 01       	movw	r18, r22
    2874:	ac 01       	movw	r20, r24
    2876:	bd 01       	movw	r22, r26
    2878:	cf 01       	movw	r24, r30
    287a:	08 95       	ret

0000287c <__prologue_saves__>:
    287c:	2f 92       	push	r2
    287e:	3f 92       	push	r3
    2880:	4f 92       	push	r4
    2882:	5f 92       	push	r5
    2884:	6f 92       	push	r6
    2886:	7f 92       	push	r7
    2888:	8f 92       	push	r8
    288a:	9f 92       	push	r9
    288c:	af 92       	push	r10
    288e:	bf 92       	push	r11
    2890:	cf 92       	push	r12
    2892:	df 92       	push	r13
    2894:	ef 92       	push	r14
    2896:	ff 92       	push	r15
    2898:	0f 93       	push	r16
    289a:	1f 93       	push	r17
    289c:	cf 93       	push	r28
    289e:	df 93       	push	r29
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	ca 1b       	sub	r28, r26
    28a6:	db 0b       	sbc	r29, r27
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	09 94       	ijmp

000028b4 <__epilogue_restores__>:
    28b4:	2a 88       	ldd	r2, Y+18	; 0x12
    28b6:	39 88       	ldd	r3, Y+17	; 0x11
    28b8:	48 88       	ldd	r4, Y+16	; 0x10
    28ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    28bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    28be:	7d 84       	ldd	r7, Y+13	; 0x0d
    28c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    28c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    28c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    28c6:	b9 84       	ldd	r11, Y+9	; 0x09
    28c8:	c8 84       	ldd	r12, Y+8	; 0x08
    28ca:	df 80       	ldd	r13, Y+7	; 0x07
    28cc:	ee 80       	ldd	r14, Y+6	; 0x06
    28ce:	fd 80       	ldd	r15, Y+5	; 0x05
    28d0:	0c 81       	ldd	r16, Y+4	; 0x04
    28d2:	1b 81       	ldd	r17, Y+3	; 0x03
    28d4:	aa 81       	ldd	r26, Y+2	; 0x02
    28d6:	b9 81       	ldd	r27, Y+1	; 0x01
    28d8:	ce 0f       	add	r28, r30
    28da:	d1 1d       	adc	r29, r1
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	f8 94       	cli
    28e0:	de bf       	out	0x3e, r29	; 62
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	cd bf       	out	0x3d, r28	; 61
    28e6:	ed 01       	movw	r28, r26
    28e8:	08 95       	ret

000028ea <_exit>:
    28ea:	f8 94       	cli

000028ec <__stop_program>:
    28ec:	ff cf       	rjmp	.-2      	; 0x28ec <__stop_program>
